# -*- coding: utf-8 -*-
# Describe classes, methods and functions in a module. 
# Works with user-defined modules, all Python library modules, including built-in modules.
# by Kevin Noel

#-------------------------------------------------------------------------------
#  getmodule_doc("pyfolio", file1)

''' Transport Python 2 to Python 3
import lib2to3
'''



#---------------------------------------------------------------------------------
import inspect;import os, sys

INDENT=0
file1= r"D:\_devs\Python01\aapackage\printdoc.txt"


#Print with indentation
def wi(*args):
   aux=''
   if INDENT: aux= str(' '*INDENT)
   for arg in args: 
       dx= str(arg).replace("'", "");
       dx= dx.replace("[","");   dx= dx.replace("]","")
       aux= aux + dx  + "\n"
       
   printinfile(aux, file1)


def printinfile(vv, file1):
# print vv
 with open(file1, "a") as text_file:
    text_file.write(vv)   
    

def wi2(*args):
   if INDENT: print(' '*INDENT,)
   for arg in args: print(arg,)
   print

def indent():     global INDENT; INDENT += 4
def dedent():     global INDENT; INDENT -= 4


#----Describe a builtin function
def describe_builtin(obj):
   wi('+Built-in Function: %s' % obj.__name__)
# Built-in functions cannot be inspected by inspect.getargspec.  parse the __doc__ attribute of the function.
   docstr = obj.__doc__ ;   args = ''
   if docstr:
      items = docstr.split('\n')
      if items:
         func_descr = items[0]
         s = func_descr.replace(obj.__name__,'')
         idx1 = s.find('(')
         idx2 = s.find(')',idx1)
         if idx1 != -1 and idx2 != -1 and (idx2>idx1+1):
            args = s[idx1+1:idx2]
            wi('\t-Method Arguments:', args)

   if args=='':  wi('\t-Method Arguments: None')
   print


# Describe the function  passed as argument. method the 2n argument will be passed as True 
def describe_func(obj, method=False):
   try:
       arginfo = inspect.getargspec(obj)
   except TypeError:
      print 
      return
   args = arginfo[0];   argsvar = arginfo[1]

   if args:
       if method: wi('  +  '+obj.__name__ +'('+ str(args) +')' )
       else:    wi('  +Func: '+obj.__name__ +'('+ str(args) +')' ) 
#       if args[0] == 'self':  wi('Instance method' );    args.pop(0)
       if arginfo[3]:
           dl = len(arginfo[3]);   al = len(args)
           defargs = args[al-dl:al]
           ax= str(zip(defargs, arginfo[3]))
           wi('\t  	  Default_Args:'+ax)

   if arginfo[1]:  wi('\t   Positional_Args: ' + str( arginfo[1]))
   if arginfo[2]:  wi('\t   Keyword_Args: ' + str(arginfo[2]))
   print



#Describe class object passed as argument,including its methods 
def describe_klass(obj):
   wi('\n   +Class: %s' % obj.__name__)
   indent();   count = 0
   for name in obj.__dict__:
       try:
         item = getattr(obj, name)
         if inspect.ismethod(item): count += 1;describe_func(item, True)
       except TypeError:
           print('error')
           return
   if count==0:  wi('(No members)')
   dedent()
   print 



#Describe the module object passed as argument classes and functions 
def describe(module):
   wi('\n \n[Module: %s]-------------------------------------------------' % module.__name__)
   indent();   count = 0   
   for name in dir(module):
       obj = getattr(module, name)
       if inspect.isclass(obj): 
           count += 1; 
           try :  describe_klass(obj)
           except :
               print('error')
               return
       elif (inspect.ismethod(obj) or inspect.isfunction(obj)):
          count +=1 ; describe_func(obj)
       elif inspect.isbuiltin(obj):
          count += 1; describe_builtin(obj)

   if count==0: wi('(No members)')
   dedent()


#----Print in 1 Line Documentation of the function----------------------------------

def describe_builtin2(obj, name1):
   wi(name1+'.'+obj.__name__)
# Built-in functions cannot be inspected by inspect.getargspec.  parse the __doc__ attribute of the function.
   docstr = obj.__doc__ ;   args = ''
   if docstr:
      items = docstr.split('\n')
      if items:
         func_descr = items[0]
         s = func_descr.replace(obj.__name__,'')
         idx1 = s.find('(');  idx2 = s.find(')',idx1)
         if idx1 != -1 and idx2 != -1 and (idx2>idx1+1):
            args = s[idx1+1:idx2]
            wi('(', args)

#   if args=='':  wi('()')
   print



def describe_func2(obj, method=False, name1=''):
   try:  arginfo = inspect.getargspec(obj)
   except :
      print 
      return
   args = arginfo[0];   argsvar = arginfo[1]
   if args:
       if method: wi( name1+'.'+obj.__name__ +'('+ str(args) +')' )
       else:    wi( name1+'.'+obj.__name__ +'('+ str(args) +')' ) 



def describe_klass2(obj, name1=''): 
   for name in obj.__dict__:
       try:
         item = getattr(obj, name)
         if inspect.ismethod(item): count += 0; describe_func2(item, True, name1+'.'+obj.__name__)
       except TypeError:
           print;  return
   print 


def describe2(module):
   wi('\n \n ')   
   for name in dir(module):
       obj = getattr(module, name)
       if inspect.isclass(obj): 
           try :  describe_klass2(obj, module.__name__)
           except :
               print('error');  return
       elif (inspect.ismethod(obj) or inspect.isfunction(obj)):  describe_func2(obj, False,  module.__name__)
          
       elif inspect.isbuiltin(obj):  describe_builtin2(obj, module.__name__)




#-------------------Parse the module ------------------------------------------------
def getmodule_doc(module1, file1='moduledoc.txt'):
 import importlib;  import pkgutil;  global INDENT    
 package= importlib.import_module(module1);

#Get list of sub-module
 vv= []; INDENT =0
 for importer, modname, ispkg in  pkgutil.walk_packages(path=package.__path__, 
                                                      prefix=package.__name__+'.',
                                                      onerror=lambda x: None):
     vv.append(modname)                                                   
     wi(str(modname))
 
 
 # 1 Line Doc for each function
 for submodule1 in vv:
    try:
      mod2 = importlib.import_module(submodule1);     INDENT=0
      describe2(mod2)
    except : print(sys.exc_info())

 wi('\n \n \n \n -----------------------------------------------------------------------------')

 #Tree Base Documentation
 for submodule1 in vv:
    try:
      mod2 = importlib.import_module(submodule1);     INDENT=0
      describe(mod2)
    except :  print(sys.exc_info())
 print('Document generated in'+  file1)











'''
numpy.__config__
numpy._import_tools
numpy.add_newdocs
numpy.compat
numpy.compat._inspect
numpy.compat.py3k
numpy.compat.setup
numpy.core
numpy.core._dotblas
numpy.core._dummy
numpy.core._internal
numpy.core._methods
numpy.core.arrayprint
numpy.core.cversions
numpy.core.defchararray
numpy.core.fromnumeric
numpy.core.function_base
numpy.core.generate_numpy_api
numpy.core.getlimits
numpy.core.info
numpy.core.machar
numpy.core.memmap
numpy.core.multiarray
numpy.core.multiarray_tests
numpy.core.numeric
numpy.core.numerictypes
numpy.core.operand_flag_tests
numpy.core.records
numpy.core.scalarmath
numpy.core.setup
numpy.core.setup_common
numpy.core.shape_base
numpy.core.struct_ufunc_test
numpy.core.test_rational
numpy.core.umath
numpy.core.umath_tests
numpy.ctypeslib
numpy.distutils
numpy.distutils.__config__
numpy.distutils.__version__
numpy.distutils.ccompiler
numpy.distutils.command
numpy.distutils.command.autodist
numpy.distutils.command.bdist_rpm
numpy.distutils.command.build
numpy.distutils.command.build_clib
numpy.distutils.command.build_ext
numpy.distutils.command.build_py
numpy.distutils.command.build_scripts
numpy.distutils.command.build_src
numpy.distutils.command.config
numpy.distutils.command.config_compiler
numpy.distutils.command.develop
numpy.distutils.command.egg_info
numpy.distutils.command.install
numpy.distutils.command.install_clib
numpy.distutils.command.install_data
numpy.distutils.command.install_headers
numpy.distutils.command.sdist
numpy.distutils.compat
numpy.distutils.conv_template
numpy.distutils.core
numpy.distutils.cpuinfo
numpy.distutils.environment
numpy.distutils.exec_command
numpy.distutils.extension
numpy.distutils.fcompiler
numpy.distutils.fcompiler.absoft
numpy.distutils.fcompiler.compaq
numpy.distutils.fcompiler.g95
numpy.distutils.fcompiler.gnu
numpy.distutils.fcompiler.hpux
numpy.distutils.fcompiler.ibm
numpy.distutils.fcompiler.intel
numpy.distutils.fcompiler.lahey
numpy.distutils.fcompiler.mips
numpy.distutils.fcompiler.nag
numpy.distutils.fcompiler.none
numpy.distutils.fcompiler.pathf95
numpy.distutils.fcompiler.pg
numpy.distutils.fcompiler.sun
numpy.distutils.fcompiler.vast
numpy.distutils.from_template
numpy.distutils.info
numpy.distutils.intelccompiler
numpy.distutils.lib2def
numpy.distutils.line_endings
numpy.distutils.log
numpy.distutils.mingw32ccompiler
numpy.distutils.misc_util
numpy.distutils.npy_pkg_config
numpy.distutils.numpy_distribution
numpy.distutils.pathccompiler
numpy.distutils.setup
numpy.distutils.system_info
numpy.distutils.unixccompiler
numpy.doc
numpy.doc.basics
numpy.doc.broadcasting
numpy.doc.byteswapping
numpy.doc.constants
numpy.doc.creation
numpy.doc.glossary
numpy.doc.howtofind
numpy.doc.indexing
numpy.doc.internals
numpy.doc.io
numpy.doc.jargon
numpy.doc.methods_vs_functions
numpy.doc.misc
numpy.doc.performance
numpy.doc.structured_arrays
numpy.doc.subclassing
numpy.doc.ufuncs
numpy.dual
numpy.f2py
numpy.f2py.__version__
numpy.f2py.auxfuncs
numpy.f2py.capi_maps
numpy.f2py.cb_rules
numpy.f2py.cfuncs
numpy.f2py.common_rules
numpy.f2py.crackfortran
numpy.f2py.diagnose
numpy.f2py.f2py2e
numpy.f2py.f2py_testing
numpy.f2py.f90mod_rules
numpy.f2py.func2subr
numpy.f2py.info
numpy.f2py.rules
numpy.f2py.setup
numpy.f2py.use_rules
numpy.fft
numpy.fft.fftpack
numpy.fft.fftpack_lite
numpy.fft.helper
numpy.fft.info
numpy.fft.setup
numpy.lib
numpy.lib._compiled_base
numpy.lib._datasource
numpy.lib._iotools
numpy.lib._version
numpy.lib.arraypad
numpy.lib.arraysetops
numpy.lib.arrayterator
numpy.lib.financial
numpy.lib.format
numpy.lib.function_base
numpy.lib.index_tricks
numpy.lib.info
numpy.lib.nanfunctions
numpy.lib.npyio
numpy.lib.polynomial
numpy.lib.recfunctions
numpy.lib.scimath
numpy.lib.setup
numpy.lib.shape_base
numpy.lib.stride_tricks
numpy.lib.twodim_base
numpy.lib.type_check
numpy.lib.ufunclike
numpy.lib.user_array
numpy.lib.utils
numpy.linalg
numpy.linalg._umath_linalg
numpy.linalg.info
numpy.linalg.lapack_lite
numpy.linalg.linalg
numpy.linalg.setup
numpy.ma
numpy.ma.bench
numpy.ma.core
numpy.ma.extras
numpy.ma.mrecords
numpy.ma.setup
numpy.ma.testutils
numpy.ma.timer_comparison
numpy.ma.version
numpy.matlib
numpy.matrixlib
numpy.matrixlib.defmatrix
numpy.matrixlib.setup
numpy.polynomial
numpy.polynomial._polybase
numpy.polynomial.chebyshev
numpy.polynomial.hermite
numpy.polynomial.hermite_e
numpy.polynomial.laguerre
numpy.polynomial.legendre
numpy.polynomial.polynomial
numpy.polynomial.polytemplate
numpy.polynomial.polyutils
numpy.polynomial.setup
numpy.random
numpy.random.info
numpy.random.mtrand
numpy.random.setup
numpy.setup
numpy.testing
numpy.testing.decorators
numpy.testing.noseclasses
numpy.testing.nosetester
numpy.testing.print_coercion_tables
numpy.testing.setup
numpy.testing.utils
numpy.version

 
 
numpy.__config__.get_info(name)

 
 

 
 
numpy.add_newdocs.add_newdoc(place, obj, doc)

 
 
numpy.compat.asbytes_nested(x)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat.getargspec(func)
numpy.compat.isfileobj(f)
numpy.compat.open_latin1(filename, mode)
numpy.compat.sixu(s)

 
 
numpy.compat._inspect.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object, convert, join)

 
 
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.open_latin1(filename, mode)
numpy.compat.py3k.sixu(s)

 
 
numpy.compat.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.core._dotblas.alterdot
numpy.core._dotblas.dot
(
a, b, out=None
numpy.core._dotblas.inner
(
a, b
numpy.core._dotblas.restoredot
numpy.core._dotblas.vdot
(
a, b

 
 

 
 
numpy.core._internal._add_trailing_padding(value, padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)

 
 
numpy.core._methods._all(a, axis, dtype, out, keepdims)
numpy.core._methods._amax(a, axis, out, keepdims)
numpy.core._methods._amin(a, axis, out, keepdims)
numpy.core._methods._any(a, axis, dtype, out, keepdims)
numpy.core._methods._count_reduce_items(arr, axis)
numpy.core._methods._mean(a, axis, dtype, out, keepdims)
numpy.core._methods._prod(a, axis, dtype, out, keepdims)
numpy.core._methods._std(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods._sum(a, axis, dtype, out, keepdims)
numpy.core._methods._var(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods.asanyarray(a, dtype, order)
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False

 
 

 
 
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray.len
(
object
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._vec_string
numpy.core.defchararray.add(x1, x2)
numpy.core.defchararray.array(obj, itemsize, copy, unicode, order)
numpy.core.defchararray.asarray(obj, itemsize, unicode, order)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a, width, fillchar)

 
 
numpy.core.fromnumeric.sctype2char(sctype)
numpy.core.fromnumeric.sum
(
sequence, start
numpy.core.fromnumeric._wrapit(obj, method)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a, axis, out, keepdims)
numpy.core.fromnumeric.alltrue(a, axis, out, keepdims)
numpy.core.fromnumeric.amax(a, axis, out, keepdims)
numpy.core.fromnumeric.amin(a, axis, out, keepdims)
numpy.core.fromnumeric.any(a, axis, out, keepdims)
numpy.core.fromnumeric.argmax(a, axis)
numpy.core.fromnumeric.argmin(a, axis)
numpy.core.fromnumeric.argpartition(a, kth, axis, kind, order)
numpy.core.fromnumeric.argsort(a, axis, kind, order)
numpy.core.fromnumeric.around(a, decimals, out)
numpy.core.fromnumeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.fromnumeric.asanyarray(a, dtype, order)
numpy.core.fromnumeric.asarray(a, dtype, order)
numpy.core.fromnumeric.choose(a, choices, out, mode)
numpy.core.fromnumeric.clip(a, a_min, a_max, out)
numpy.core.fromnumeric.compress(condition, a, axis, out)
numpy.core.fromnumeric.concatenate
(
(a1, a2, ...
numpy.core.fromnumeric.cumprod(a, axis, dtype, out)
numpy.core.fromnumeric.cumproduct(a, axis, dtype, out)
numpy.core.fromnumeric.cumsum(a, axis, dtype, out)
numpy.core.fromnumeric.diagonal(a, offset, axis1, axis2)
numpy.core.fromnumeric.mean(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a, kth, axis, kind, order)
numpy.core.fromnumeric.prod(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.product(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ptp(a, axis, out)
numpy.core.fromnumeric.put(a, ind, v, mode)
numpy.core.fromnumeric.rank(a)
numpy.core.fromnumeric.ravel(a, order)
numpy.core.fromnumeric.repeat(a, repeats, axis)
numpy.core.fromnumeric.reshape(a, newshape, order)
numpy.core.fromnumeric.resize(a, new_shape)
numpy.core.fromnumeric.round_(a, decimals, out)
numpy.core.fromnumeric.searchsorted(a, v, side, sorter)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a, axis)
numpy.core.fromnumeric.sometrue(a, axis, out, keepdims)
numpy.core.fromnumeric.sort(a, axis, kind, order)
numpy.core.fromnumeric.squeeze(a, axis)
numpy.core.fromnumeric.std(a, axis, dtype, out, ddof, keepdims)
numpy.core.fromnumeric.sum(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.swapaxes(a, axis1, axis2)
numpy.core.fromnumeric.take(a, indices, axis, out, mode)
numpy.core.fromnumeric.trace(a, offset, axis1, axis2, dtype, out)
numpy.core.fromnumeric.transpose(a, axes)
numpy.core.fromnumeric.var(a, axis, dtype, out, ddof, keepdims)

 
 
numpy.core.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.core.function_base.logspace(start, stop, num, endpoint, base, dtype)
numpy.core.function_base.result_type
(
*arrays_and_dtypes

 
 

 
 

 
 

 
 

 
 
numpy.core.multiarray._fastCopyAndTranspose
(
a
numpy.core.multiarray._get_ndarray_c_version
numpy.core.multiarray._reconstruct
(
subtype, shape, dtype
numpy.core.multiarray._vec_string
numpy.core.multiarray.arange
(
start, stop, step,, dtype=None
numpy.core.multiarray.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.multiarray.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.multiarray.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.can_cast
(
from, totype, casting = safe
numpy.core.multiarray.compare_chararrays
numpy.core.multiarray.concatenate
(
(a1, a2, ...
numpy.core.multiarray.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.multiarray.correlate
(
a,v, mode=0
numpy.core.multiarray.correlate2
numpy.core.multiarray.count_nonzero
(
a
numpy.core.multiarray.datetime_as_string
numpy.core.multiarray.datetime_data
numpy.core.multiarray.dot
numpy.core.multiarray.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.multiarray.empty
(
shape, dtype=float, order=C
numpy.core.multiarray.empty_like
(
a, dtype=None, order=K, subok=True
numpy.core.multiarray.format_longfloat
numpy.core.multiarray.frombuffer
(
buffer, dtype=float, count=-1, offset=0
numpy.core.multiarray.fromfile
(
file, dtype=float, count=-1, sep=
numpy.core.multiarray.fromiter
(
iterable, dtype, count=-1
numpy.core.multiarray.fromstring
(
string, dtype=float, count=-1, sep=
numpy.core.multiarray.getbuffer
(
obj ,offset, size
numpy.core.multiarray.inner
numpy.core.multiarray.int_asbuffer
numpy.core.multiarray.is_busday
(
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.lexsort
(
keys, axis=-1
numpy.core.multiarray.may_share_memory
numpy.core.multiarray.min_scalar_type
(
a
numpy.core.multiarray.nested_iters
numpy.core.multiarray.newbuffer
(
size
numpy.core.multiarray.promote_types
(
type1, type2
numpy.core.multiarray.putmask
(
a, mask, values
numpy.core.multiarray.result_type
(
*arrays_and_dtypes
numpy.core.multiarray.scalar
(
dtype, obj
numpy.core.multiarray.set_datetimeparse_function
numpy.core.multiarray.set_numeric_ops
(
op1=func1, op2=func2, ...
numpy.core.multiarray.set_string_function
(
f, repr=1
numpy.core.multiarray.set_typeDict
(
dict
numpy.core.multiarray.test_interrupt
numpy.core.multiarray.where
(
condition, x, y
numpy.core.multiarray.zeros
(
shape, dtype=float, order=C

 
 
numpy.core.multiarray_tests.array_indexing
numpy.core.multiarray_tests.get_buffer_info
numpy.core.multiarray_tests.test_as_c_array
numpy.core.multiarray_tests.test_inplace_increment
numpy.core.multiarray_tests.test_int_subclass
numpy.core.multiarray_tests.test_nditer_too_large
numpy.core.multiarray_tests.test_neighborhood_iterator
numpy.core.multiarray_tests.test_neighborhood_iterator_oob
numpy.core.multiarray_tests.test_pydatamem_seteventhook_end
numpy.core.multiarray_tests.test_pydatamem_seteventhook_start

 
 
numpy.core.numeric._maketup(descr, val)
numpy.core.numeric._mode_from_name(mode)
numpy.core.numeric._move_axis_to_0(a, axis)
numpy.core.numeric.alen(a)
numpy.core.numeric.all(a, axis, out, keepdims)
numpy.core.numeric.allclose(a, b, rtol, atol)
numpy.core.numeric.alltrue(a, axis, out, keepdims)
numpy.core.numeric.alterdot
numpy.core.numeric.amax(a, axis, out, keepdims)
numpy.core.numeric.amin(a, axis, out, keepdims)
numpy.core.numeric.any(a, axis, out, keepdims)
numpy.core.numeric.arange
(
start, stop, step,, dtype=None
numpy.core.numeric.argmax(a, axis)
numpy.core.numeric.argmin(a, axis)
numpy.core.numeric.argpartition(a, kth, axis, kind, order)
numpy.core.numeric.argsort(a, axis, kind, order)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.around(a, decimals, out)
numpy.core.numeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.numeric.array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
numpy.core.numeric.array_equal(a1, a2)
numpy.core.numeric.array_equiv(a1, a2)
numpy.core.numeric.array_repr(arr, max_line_width, precision, suppress_small)
numpy.core.numeric.array_str(a, max_line_width, precision, suppress_small)
numpy.core.numeric.asanyarray(a, dtype, order)
numpy.core.numeric.asarray(a, dtype, order)
numpy.core.numeric.ascontiguousarray(a, dtype)
numpy.core.numeric.asfortranarray(a, dtype)
numpy.core.numeric.base_repr(number, base, padding)
numpy.core.numeric.binary_repr(num, width)
numpy.core.numeric.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.numeric.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.numeric.can_cast
(
from, totype, casting = safe
numpy.core.numeric.choose(a, choices, out, mode)
numpy.core.numeric.clip(a, a_min, a_max, out)
numpy.core.numeric.compare_chararrays
numpy.core.numeric.compress(condition, a, axis, out)
numpy.core.numeric.concatenate
(
(a1, a2, ...
numpy.core.numeric.convolve(a, v, mode)
numpy.core.numeric.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.numeric.correlate(a, v, mode, old_behavior)
numpy.core.numeric.count_nonzero
(
a
numpy.core.numeric.cross(a, b, axisa, axisb, axisc, axis)
numpy.core.numeric.cumprod(a, axis, dtype, out)
numpy.core.numeric.cumproduct(a, axis, dtype, out)
numpy.core.numeric.cumsum(a, axis, dtype, out)
numpy.core.numeric.datetime_as_string
numpy.core.numeric.datetime_data
numpy.core.numeric.diagonal(a, offset, axis1, axis2)
numpy.core.numeric.dot
(
a, b, out=None
numpy.core.numeric.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.numeric.empty
(
shape, dtype=float, order=C
numpy.core.numeric.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.core.numerictypes._add_array_type(typename, bits)
numpy.core.numerictypes._can_coerce_all(dtypelist, start)
numpy.core.numerictypes._evalname(name)
numpy.core.numerictypes._find_common_coerce(a, b)
numpy.core.numerictypes._python_type(t)

 
 

 
 
numpy.core.records.array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)

 
 
numpy.core.scalarmath.alter_pythonmath
numpy.core.scalarmath.restore_pythonmath
numpy.core.scalarmath.use_pythonmath
numpy.core.scalarmath.use_scalarmath

 
 

 
 
numpy.core.setup_common.check_api_version(apiversion, codegen_dir)
numpy.core.setup_common.check_long_double_representation(cmd)
numpy.core.setup_common.fname2def(name)
numpy.core.setup_common.get_api_versions(apiversion, codegen_dir)
numpy.core.setup_common.is_released(config)
numpy.core.setup_common.join(path)
numpy.core.setup_common.long_double_representation(lines)
numpy.core.setup_common.pyod(filename)
numpy.core.setup_common.sym2def(symbol)
numpy.core.setup_common.type2def(symbol)

 
 
numpy.core.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.shape_base.asanyarray(a, dtype, order)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.vstack(tup)

 
 

 
 

 
 
numpy.core.umath.frompyfunc
(
func, nin, nout
numpy.core.umath.geterrobj
numpy.core.umath.seterrobj
(
errobj

 
 
numpy.core.umath_tests.test_signature

 
 
numpy.ctypeslib._flags_fromnum(num)

 
 

 
 
numpy.distutils.__config__.get_info(name)

 
 

 
 

 
 

 
 
numpy.distutils.command.autodist.check_compiler_gcc4(cmd)
numpy.distutils.command.autodist.check_inline(cmd)

 
 

 
 

 
 
numpy.distutils.command.build_clib.all_strings(lst)

 
 

 
 

 
 

 
 
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src._find_swig_target(target_dir, name)
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.appendpath(prefix, path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.command.sdist.get_data_files(data)

 
 

 
 
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr, env, level, line)
numpy.distutils.conv_template.parse_structure(astr, level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)

 
 

 
 

 
 

 
 
numpy.distutils.exec_command._exec_command(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_posix(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_python(command, exec_command_dir)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._supports_fileno(stream)
numpy.distutils.exec_command.exec_command(command, execute_in, use_shell, use_tee, _with_python)
numpy.distutils.exec_command.find_executable(exe, path, _cache)
numpy.distutils.exec_command.is_sequence(seq)
numpy.distutils.exec_command.make_temp_file(suffix, prefix, text)
numpy.distutils.exec_command.open_latin1(filename, mode)
numpy.distutils.exec_command.quote_arg(arg)
numpy.distutils.exec_command.splitcmdline(line)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr, names)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)

 
 

 
 

 
 
numpy.distutils.lib2def.getnm(nm_cmd)
numpy.distutils.lib2def.output_def(dlist, flist, header, file)
numpy.distutils.lib2def.parse_nm(nm_output)

 
 
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files, dir_name, file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files, dir_name, file_names)

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.dual.cholesky(a, lower, overwrite_a, check_finite)
numpy.dual.det(a, overwrite_a, check_finite)
numpy.dual.eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
numpy.dual.eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.eigvals(a, b, overwrite_a, check_finite)
numpy.dual.eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.fft(a, n, axis)
numpy.dual.fft2(a, s, axes)
numpy.dual.fftn(a, s, axes)
numpy.dual.ifft(a, n, axis)
numpy.dual.ifft2(a, s, axes)
numpy.dual.ifftn(a, s, axes)
numpy.dual.inv(a, overwrite_a, check_finite)
numpy.dual.lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
numpy.dual.norm(a, ord)
numpy.dual.pinv2(a, cond, rcond, return_rank, check_finite)
numpy.dual.register_func(name, func)
numpy.dual.restore_func(name)
numpy.dual.solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
numpy.dual.svd(a, full_matrices, compute_uv, overwrite_a, check_finite)

 
 

 
 

 
 
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules, d, var)
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd, ar)
numpy.f2py.auxfuncs.write(self, string)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout, cb_map)
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.reduce
(
function, sequence, initial
numpy.f2py.auxfuncs.replace(str, d, defaultsep)
numpy.f2py.auxfuncs.pprint(object, stream, indent, width, depth)
numpy.f2py.auxfuncs.stripcomma(s)

 
 
numpy.f2py.capi_maps.applyrules(rules, d, var)
numpy.f2py.capi_maps.cb_routsign2map(rout, um)
numpy.f2py.capi_maps.cb_sign2map(a, var, index)
numpy.f2py.capi_maps.common_sign2map(a, var)
numpy.f2py.capi_maps.containscommon(rout)
numpy.f2py.capi_maps.containsmodule(block)
numpy.f2py.capi_maps.debugcapi(var)
numpy.f2py.capi_maps.dictappend(rd, ar)
numpy.f2py.capi_maps.write(self, string)
numpy.f2py.capi_maps.flatlist(l)
numpy.f2py.capi_maps.gentitle(name)
numpy.f2py.capi_maps.get_kind(var)
numpy.f2py.capi_maps.getargs(rout)
numpy.f2py.capi_maps.getargs2(rout)
numpy.f2py.capi_maps.getarrdims(a, var, verbose)
numpy.f2py.capi_maps.getarrdocsign(a, var)
numpy.f2py.capi_maps.getcallprotoargument(rout, cb_map)
numpy.f2py.capi_maps.getcallstatement(rout)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getfortranname(rout)
numpy.f2py.capi_maps.getinit(a, var)
numpy.f2py.capi_maps.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.capi_maps.getpydocsign(a, var)
numpy.f2py.capi_maps.getpymethoddef(rout)
numpy.f2py.capi_maps.getrestdoc(rout)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.getusercode(rout)
numpy.f2py.capi_maps.getusercode1(rout)
numpy.f2py.capi_maps.hasassumedshape(rout)
numpy.f2py.capi_maps.hasbody(rout)
numpy.f2py.capi_maps.hascallstatement(rout)
numpy.f2py.capi_maps.hascommon(rout)
numpy.f2py.capi_maps.hasexternals(rout)
numpy.f2py.capi_maps.hasinitvalue(var)
numpy.f2py.capi_maps.hasinitvalueasstring(var)
numpy.f2py.capi_maps.hasnote(var)
numpy.f2py.capi_maps.hasresultnote(rout)
numpy.f2py.capi_maps.hasvariables(rout)
numpy.f2py.capi_maps.isallocatable(var)
numpy.f2py.capi_maps.isarray(var)
numpy.f2py.capi_maps.isarrayofstrings(var)
numpy.f2py.capi_maps.ischaracter(var)
numpy.f2py.capi_maps.iscomplex(var)
numpy.f2py.capi_maps.iscomplexarray(var)
numpy.f2py.capi_maps.iscomplexfunction(rout)
numpy.f2py.capi_maps.iscomplexfunction_warn(rout)
numpy.f2py.capi_maps.isdouble(var)
numpy.f2py.capi_maps.isdummyroutine(rout)
numpy.f2py.capi_maps.isexternal(var)
numpy.f2py.capi_maps.isfalse(var)
numpy.f2py.capi_maps.isfunction(rout)
numpy.f2py.capi_maps.isfunction_wrap(rout)
numpy.f2py.capi_maps.isint1array(var)
numpy.f2py.capi_maps.isinteger(var)
numpy.f2py.capi_maps.isintent_aligned16(var)
numpy.f2py.capi_maps.isintent_aligned4(var)
numpy.f2py.capi_maps.isintent_aligned8(var)
numpy.f2py.capi_maps.isintent_aux(var)
numpy.f2py.capi_maps.isintent_c(var)
numpy.f2py.capi_maps.isintent_cache(var)
numpy.f2py.capi_maps.isintent_callback(var)
numpy.f2py.capi_maps.isintent_copy(var)
numpy.f2py.capi_maps.isintent_hide(var)
numpy.f2py.capi_maps.isintent_in(var)
numpy.f2py.capi_maps.isintent_inout(var)
numpy.f2py.capi_maps.isintent_inplace(var)
numpy.f2py.capi_maps.isintent_nothide(var)
numpy.f2py.capi_maps.isintent_out(var)
numpy.f2py.capi_maps.isintent_overwrite(var)
numpy.f2py.capi_maps.islogical(var)
numpy.f2py.capi_maps.islogicalfunction(rout)
numpy.f2py.capi_maps.islong_complex(var)
numpy.f2py.capi_maps.islong_double(var)
numpy.f2py.capi_maps.islong_doublefunction(rout)
numpy.f2py.capi_maps.islong_long(var)
numpy.f2py.capi_maps.islong_longfunction(rout)
numpy.f2py.capi_maps.ismodule(rout)
numpy.f2py.capi_maps.ismoduleroutine(rout)
numpy.f2py.capi_maps.ismutable(var)
numpy.f2py.capi_maps.isoptional(var)
numpy.f2py.capi_maps.isprivate(var)
numpy.f2py.capi_maps.isreal(var)
numpy.f2py.capi_maps.isrequired(var)
numpy.f2py.capi_maps.isroutine(rout)
numpy.f2py.capi_maps.isscalar(var)
numpy.f2py.capi_maps.issigned_array(var)
numpy.f2py.capi_maps.issigned_chararray(var)
numpy.f2py.capi_maps.issigned_long_longarray(var)
numpy.f2py.capi_maps.issigned_shortarray(var)
numpy.f2py.capi_maps.isstring(var)
numpy.f2py.capi_maps.isstringarray(var)
numpy.f2py.capi_maps.isstringfunction(rout)
numpy.f2py.capi_maps.issubroutine(rout)
numpy.f2py.capi_maps.issubroutine_wrap(rout)
numpy.f2py.capi_maps.isthreadsafe(rout)
numpy.f2py.capi_maps.istrue(var)
numpy.f2py.capi_maps.isunsigned(var)
numpy.f2py.capi_maps.isunsigned_char(var)
numpy.f2py.capi_maps.isunsigned_chararray(var)
numpy.f2py.capi_maps.isunsigned_long_long(var)
numpy.f2py.capi_maps.isunsigned_long_longarray(var)
numpy.f2py.capi_maps.isunsigned_short(var)
numpy.f2py.capi_maps.isunsigned_shortarray(var)
numpy.f2py.capi_maps.isunsignedarray(var)
numpy.f2py.capi_maps.l_not(f)
numpy.f2py.capi_maps.markoutercomma(line, comma)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.outmess(t)
numpy.f2py.capi_maps.reduce
(
function, sequence, initial
numpy.f2py.capi_maps.replace(str, d, defaultsep)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.pprint(object, stream, indent, width, depth)
numpy.f2py.capi_maps.sign2map(a, var)
numpy.f2py.capi_maps.stripcomma(s)

 
 
numpy.f2py.cb_rules.applyrules(rules, d, var)
numpy.f2py.cb_rules.buildcallback(rout, um)
numpy.f2py.cb_rules.buildcallbacks(m)
numpy.f2py.cb_rules.containscommon(rout)
numpy.f2py.cb_rules.containsmodule(block)
numpy.f2py.cb_rules.debugcapi(var)
numpy.f2py.cb_rules.dictappend(rd, ar)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.flatlist(l)
numpy.f2py.cb_rules.gentitle(name)
numpy.f2py.cb_rules.get_kind(var)
numpy.f2py.cb_rules.getargs(rout)
numpy.f2py.cb_rules.getargs2(rout)
numpy.f2py.cb_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.cb_rules.getcallstatement(rout)
numpy.f2py.cb_rules.getfortranname(rout)
numpy.f2py.cb_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.cb_rules.getpymethoddef(rout)
numpy.f2py.cb_rules.getrestdoc(rout)
numpy.f2py.cb_rules.getusercode(rout)
numpy.f2py.cb_rules.getusercode1(rout)
numpy.f2py.cb_rules.hasassumedshape(rout)
numpy.f2py.cb_rules.hasbody(rout)
numpy.f2py.cb_rules.hascallstatement(rout)
numpy.f2py.cb_rules.hascommon(rout)
numpy.f2py.cb_rules.hasexternals(rout)
numpy.f2py.cb_rules.hasinitvalue(var)
numpy.f2py.cb_rules.hasinitvalueasstring(var)
numpy.f2py.cb_rules.hasnote(var)
numpy.f2py.cb_rules.hasresultnote(rout)
numpy.f2py.cb_rules.hasvariables(rout)
numpy.f2py.cb_rules.isallocatable(var)
numpy.f2py.cb_rules.isarray(var)
numpy.f2py.cb_rules.isarrayofstrings(var)
numpy.f2py.cb_rules.ischaracter(var)
numpy.f2py.cb_rules.iscomplex(var)
numpy.f2py.cb_rules.iscomplexarray(var)
numpy.f2py.cb_rules.iscomplexfunction(rout)
numpy.f2py.cb_rules.iscomplexfunction_warn(rout)
numpy.f2py.cb_rules.isdouble(var)
numpy.f2py.cb_rules.isdummyroutine(rout)
numpy.f2py.cb_rules.isexternal(var)
numpy.f2py.cb_rules.isfalse(var)
numpy.f2py.cb_rules.isfunction(rout)
numpy.f2py.cb_rules.isfunction_wrap(rout)
numpy.f2py.cb_rules.isint1array(var)
numpy.f2py.cb_rules.isinteger(var)
numpy.f2py.cb_rules.isintent_aligned16(var)
numpy.f2py.cb_rules.isintent_aligned4(var)
numpy.f2py.cb_rules.isintent_aligned8(var)
numpy.f2py.cb_rules.isintent_aux(var)
numpy.f2py.cb_rules.isintent_c(var)
numpy.f2py.cb_rules.isintent_cache(var)
numpy.f2py.cb_rules.isintent_callback(var)
numpy.f2py.cb_rules.isintent_copy(var)
numpy.f2py.cb_rules.isintent_hide(var)
numpy.f2py.cb_rules.isintent_in(var)
numpy.f2py.cb_rules.isintent_inout(var)
numpy.f2py.cb_rules.isintent_inplace(var)
numpy.f2py.cb_rules.isintent_nothide(var)
numpy.f2py.cb_rules.isintent_out(var)
numpy.f2py.cb_rules.isintent_overwrite(var)
numpy.f2py.cb_rules.islogical(var)
numpy.f2py.cb_rules.islogicalfunction(rout)
numpy.f2py.cb_rules.islong_complex(var)
numpy.f2py.cb_rules.islong_double(var)
numpy.f2py.cb_rules.islong_doublefunction(rout)
numpy.f2py.cb_rules.islong_long(var)
numpy.f2py.cb_rules.islong_longfunction(rout)
numpy.f2py.cb_rules.ismodule(rout)
numpy.f2py.cb_rules.ismoduleroutine(rout)
numpy.f2py.cb_rules.ismutable(var)
numpy.f2py.cb_rules.isoptional(var)
numpy.f2py.cb_rules.isprivate(var)
numpy.f2py.cb_rules.isreal(var)
numpy.f2py.cb_rules.isrequired(var)
numpy.f2py.cb_rules.isroutine(rout)
numpy.f2py.cb_rules.isscalar(var)
numpy.f2py.cb_rules.issigned_array(var)
numpy.f2py.cb_rules.issigned_chararray(var)
numpy.f2py.cb_rules.issigned_long_longarray(var)
numpy.f2py.cb_rules.issigned_shortarray(var)
numpy.f2py.cb_rules.isstring(var)
numpy.f2py.cb_rules.isstringarray(var)
numpy.f2py.cb_rules.isstringfunction(rout)
numpy.f2py.cb_rules.issubroutine(rout)
numpy.f2py.cb_rules.issubroutine_wrap(rout)
numpy.f2py.cb_rules.isthreadsafe(rout)
numpy.f2py.cb_rules.istrue(var)
numpy.f2py.cb_rules.isunsigned(var)
numpy.f2py.cb_rules.isunsigned_char(var)
numpy.f2py.cb_rules.isunsigned_chararray(var)
numpy.f2py.cb_rules.isunsigned_long_long(var)
numpy.f2py.cb_rules.isunsigned_long_longarray(var)
numpy.f2py.cb_rules.isunsigned_short(var)
numpy.f2py.cb_rules.isunsigned_shortarray(var)
numpy.f2py.cb_rules.isunsignedarray(var)
numpy.f2py.cb_rules.l_not(f)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.reduce
(
function, sequence, initial
numpy.f2py.cb_rules.replace(str, d, defaultsep)
numpy.f2py.cb_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.cb_rules.stripcomma(s)

 
 
numpy.f2py.cfuncs.append_needs(need, flag)
numpy.f2py.cfuncs.write(self, string)

 
 
numpy.f2py.common_rules.applyrules(rules, d, var)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.containscommon(rout)
numpy.f2py.common_rules.containsmodule(block)
numpy.f2py.common_rules.debugcapi(var)
numpy.f2py.common_rules.dictappend(rd, ar)
numpy.f2py.common_rules.write(self, string)
numpy.f2py.common_rules.findcommonblocks(block, top)
numpy.f2py.common_rules.flatlist(l)
numpy.f2py.common_rules.gentitle(name)
numpy.f2py.common_rules.get_kind(var)
numpy.f2py.common_rules.getargs(rout)
numpy.f2py.common_rules.getargs2(rout)
numpy.f2py.common_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.common_rules.getcallstatement(rout)
numpy.f2py.common_rules.getfortranname(rout)
numpy.f2py.common_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.common_rules.getpymethoddef(rout)
numpy.f2py.common_rules.getrestdoc(rout)
numpy.f2py.common_rules.getusercode(rout)
numpy.f2py.common_rules.getusercode1(rout)
numpy.f2py.common_rules.hasassumedshape(rout)
numpy.f2py.common_rules.hasbody(rout)
numpy.f2py.common_rules.hascallstatement(rout)
numpy.f2py.common_rules.hascommon(rout)
numpy.f2py.common_rules.hasexternals(rout)
numpy.f2py.common_rules.hasinitvalue(var)
numpy.f2py.common_rules.hasinitvalueasstring(var)
numpy.f2py.common_rules.hasnote(var)
numpy.f2py.common_rules.hasresultnote(rout)
numpy.f2py.common_rules.hasvariables(rout)
numpy.f2py.common_rules.isallocatable(var)
numpy.f2py.common_rules.isarray(var)
numpy.f2py.common_rules.isarrayofstrings(var)
numpy.f2py.common_rules.ischaracter(var)
numpy.f2py.common_rules.iscomplex(var)
numpy.f2py.common_rules.iscomplexarray(var)
numpy.f2py.common_rules.iscomplexfunction(rout)
numpy.f2py.common_rules.iscomplexfunction_warn(rout)
numpy.f2py.common_rules.isdouble(var)
numpy.f2py.common_rules.isdummyroutine(rout)
numpy.f2py.common_rules.isexternal(var)
numpy.f2py.common_rules.isfalse(var)
numpy.f2py.common_rules.isfunction(rout)
numpy.f2py.common_rules.isfunction_wrap(rout)
numpy.f2py.common_rules.isint1array(var)
numpy.f2py.common_rules.isinteger(var)
numpy.f2py.common_rules.isintent_aligned16(var)
numpy.f2py.common_rules.isintent_aligned4(var)
numpy.f2py.common_rules.isintent_aligned8(var)
numpy.f2py.common_rules.isintent_aux(var)
numpy.f2py.common_rules.isintent_c(var)
numpy.f2py.common_rules.isintent_cache(var)
numpy.f2py.common_rules.isintent_callback(var)
numpy.f2py.common_rules.isintent_copy(var)
numpy.f2py.common_rules.isintent_hide(var)
numpy.f2py.common_rules.isintent_in(var)
numpy.f2py.common_rules.isintent_inout(var)
numpy.f2py.common_rules.isintent_inplace(var)
numpy.f2py.common_rules.isintent_nothide(var)
numpy.f2py.common_rules.isintent_out(var)
numpy.f2py.common_rules.isintent_overwrite(var)
numpy.f2py.common_rules.islogical(var)
numpy.f2py.common_rules.islogicalfunction(rout)
numpy.f2py.common_rules.islong_complex(var)
numpy.f2py.common_rules.islong_double(var)
numpy.f2py.common_rules.islong_doublefunction(rout)
numpy.f2py.common_rules.islong_long(var)
numpy.f2py.common_rules.islong_longfunction(rout)
numpy.f2py.common_rules.ismodule(rout)
numpy.f2py.common_rules.ismoduleroutine(rout)
numpy.f2py.common_rules.ismutable(var)
numpy.f2py.common_rules.isoptional(var)
numpy.f2py.common_rules.isprivate(var)
numpy.f2py.common_rules.isreal(var)
numpy.f2py.common_rules.isrequired(var)
numpy.f2py.common_rules.isroutine(rout)
numpy.f2py.common_rules.isscalar(var)
numpy.f2py.common_rules.issigned_array(var)
numpy.f2py.common_rules.issigned_chararray(var)
numpy.f2py.common_rules.issigned_long_longarray(var)
numpy.f2py.common_rules.issigned_shortarray(var)
numpy.f2py.common_rules.isstring(var)
numpy.f2py.common_rules.isstringarray(var)
numpy.f2py.common_rules.isstringfunction(rout)
numpy.f2py.common_rules.issubroutine(rout)
numpy.f2py.common_rules.issubroutine_wrap(rout)
numpy.f2py.common_rules.isthreadsafe(rout)
numpy.f2py.common_rules.istrue(var)
numpy.f2py.common_rules.isunsigned(var)
numpy.f2py.common_rules.isunsigned_char(var)
numpy.f2py.common_rules.isunsigned_chararray(var)
numpy.f2py.common_rules.isunsigned_long_long(var)
numpy.f2py.common_rules.isunsigned_long_longarray(var)
numpy.f2py.common_rules.isunsigned_short(var)
numpy.f2py.common_rules.isunsigned_shortarray(var)
numpy.f2py.common_rules.isunsignedarray(var)
numpy.f2py.common_rules.l_not(f)
numpy.f2py.common_rules.outmess(t)
numpy.f2py.common_rules.reduce
(
function, sequence, initial
numpy.f2py.common_rules.replace(str, d, defaultsep)
numpy.f2py.common_rules.rmbadname(names)
numpy.f2py.common_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.common_rules.stripcomma(s)

 
 
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length, params)
numpy.f2py.crackfortran._eval_scalar(value, params)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._get_depend_dict(name, vars, deps)
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p, r, radix)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block, args, tab)
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m, case, line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl, decl2, force)
numpy.f2py.crackfortran.appendmultiline(group, context_name, ml)
numpy.f2py.crackfortran.applyrules(rules, d, var)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common, tab)
numpy.f2py.crackfortran.containscommon(rout)
numpy.f2py.crackfortran.containsmodule(block)
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block, tab, as_interface)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line, reset)
numpy.f2py.crackfortran.cracktypespec(typespec, selector)
numpy.f2py.crackfortran.cracktypespec0(typespec, ll)
numpy.f2py.crackfortran.debugcapi(var)
numpy.f2py.crackfortran.determineexprtype(expr, vars, rules)
numpy.f2py.crackfortran.dictappend(rd, ar)
numpy.f2py.crackfortran.write(self, string)
numpy.f2py.crackfortran.expr2name(a, block, args)
numpy.f2py.crackfortran.flatlist(l)
numpy.f2py.crackfortran.gentitle(name)
numpy.f2py.crackfortran.get_kind(var)
numpy.f2py.crackfortran.get_parameters(vars, global_params)
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block, param_map)
numpy.f2py.crackfortran.getargs(rout)
numpy.f2py.crackfortran.getargs2(rout)
numpy.f2py.crackfortran.getarrlen(dl, args, star)
numpy.f2py.crackfortran.getblockname(block, unknown)
numpy.f2py.crackfortran.getcallprotoargument(rout, cb_map)
numpy.f2py.crackfortran.getcallstatement(rout)
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getfortranname(rout)
numpy.f2py.crackfortran.getlincoef(e, xset)
numpy.f2py.crackfortran.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.crackfortran.getpymethoddef(rout)
numpy.f2py.crackfortran.getrestdoc(rout)
numpy.f2py.crackfortran.getusercode(rout)
numpy.f2py.crackfortran.getusercode1(rout)
numpy.f2py.crackfortran.hasassumedshape(rout)
numpy.f2py.crackfortran.hasbody(rout)
numpy.f2py.crackfortran.hascallstatement(rout)
numpy.f2py.crackfortran.hascommon(rout)
numpy.f2py.crackfortran.hasexternals(rout)
numpy.f2py.crackfortran.hasinitvalue(var)
numpy.f2py.crackfortran.hasinitvalueasstring(var)
numpy.f2py.crackfortran.hasnote(var)
numpy.f2py.crackfortran.hasresultnote(rout)
numpy.f2py.crackfortran.hasvariables(rout)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.isallocatable(var)
numpy.f2py.crackfortran.isarray(var)
numpy.f2py.crackfortran.isarrayofstrings(var)
numpy.f2py.crackfortran.ischaracter(var)
numpy.f2py.crackfortran.iscomplex(var)
numpy.f2py.crackfortran.iscomplexarray(var)
numpy.f2py.crackfortran.iscomplexfunction(rout)
numpy.f2py.crackfortran.iscomplexfunction_warn(rout)
numpy.f2py.crackfortran.isdouble(var)
numpy.f2py.crackfortran.isdummyroutine(rout)
numpy.f2py.crackfortran.isexternal(var)
numpy.f2py.crackfortran.isfalse(var)
numpy.f2py.crackfortran.isfunction(rout)
numpy.f2py.crackfortran.isfunction_wrap(rout)
numpy.f2py.crackfortran.isint1array(var)
numpy.f2py.crackfortran.isinteger(var)
numpy.f2py.crackfortran.isintent_aligned16(var)
numpy.f2py.crackfortran.isintent_aligned4(var)
numpy.f2py.crackfortran.isintent_aligned8(var)
numpy.f2py.crackfortran.isintent_aux(var)
numpy.f2py.crackfortran.isintent_c(var)
numpy.f2py.crackfortran.isintent_cache(var)
numpy.f2py.crackfortran.isintent_callback(var)
numpy.f2py.crackfortran.isintent_copy(var)
numpy.f2py.crackfortran.isintent_hide(var)
numpy.f2py.crackfortran.isintent_in(var)
numpy.f2py.crackfortran.isintent_inout(var)
numpy.f2py.crackfortran.isintent_inplace(var)
numpy.f2py.crackfortran.isintent_nothide(var)
numpy.f2py.crackfortran.isintent_out(var)
numpy.f2py.crackfortran.isintent_overwrite(var)
numpy.f2py.crackfortran.islogical(var)
numpy.f2py.crackfortran.islogicalfunction(rout)
numpy.f2py.crackfortran.islong_complex(var)
numpy.f2py.crackfortran.islong_double(var)
numpy.f2py.crackfortran.islong_doublefunction(rout)
numpy.f2py.crackfortran.islong_long(var)
numpy.f2py.crackfortran.islong_longfunction(rout)
numpy.f2py.crackfortran.ismodule(rout)
numpy.f2py.crackfortran.ismoduleroutine(rout)
numpy.f2py.crackfortran.ismutable(var)
numpy.f2py.crackfortran.isoptional(var)
numpy.f2py.crackfortran.isprivate(var)
numpy.f2py.crackfortran.isreal(var)
numpy.f2py.crackfortran.isrequired(var)
numpy.f2py.crackfortran.isroutine(rout)
numpy.f2py.crackfortran.isscalar(var)
numpy.f2py.crackfortran.issigned_array(var)
numpy.f2py.crackfortran.issigned_chararray(var)
numpy.f2py.crackfortran.issigned_long_longarray(var)
numpy.f2py.crackfortran.issigned_shortarray(var)
numpy.f2py.crackfortran.isstring(var)
numpy.f2py.crackfortran.isstringarray(var)
numpy.f2py.crackfortran.isstringfunction(rout)
numpy.f2py.crackfortran.issubroutine(rout)
numpy.f2py.crackfortran.issubroutine_wrap(rout)
numpy.f2py.crackfortran.isthreadsafe(rout)
numpy.f2py.crackfortran.istrue(var)
numpy.f2py.crackfortran.isunsigned(var)
numpy.f2py.crackfortran.isunsigned_char(var)
numpy.f2py.crackfortran.isunsigned_chararray(var)
numpy.f2py.crackfortran.isunsigned_long_long(var)
numpy.f2py.crackfortran.isunsigned_long_longarray(var)
numpy.f2py.crackfortran.isunsigned_short(var)
numpy.f2py.crackfortran.isunsigned_shortarray(var)
numpy.f2py.crackfortran.isunsignedarray(var)
numpy.f2py.crackfortran.l_not(f)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line, comma)
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e, g, l)
numpy.f2py.crackfortran.outmess(line, flag)
numpy.f2py.crackfortran.postcrack(block, args, tab)
numpy.f2py.crackfortran.postcrack2(block, tab, param_map)
numpy.f2py.crackfortran.readfortrancode(ffile, dowithline, istop)
numpy.f2py.crackfortran.reduce
(
function, sequence, initial
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.replace(str, d, defaultsep)
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl, attr, force)
numpy.f2py.crackfortran.setcharselector(decl, sel, force)
numpy.f2py.crackfortran.setkindselector(decl, sel, force)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.show(o, f)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.stripcomma(s)

 
 
numpy.f2py.diagnose.run_command(cmd)

 
 
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files, options)
numpy.f2py.f2py2e.dict_append(d_out, d_in)
numpy.f2py.f2py2e.write(self, string)
numpy.f2py.f2py2e.filter_files(prefix, suffix, files, remove_prefix)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.outmess(t)
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)
numpy.f2py.f2py2e.pprint(object, stream, indent, width, depth)

 
 
numpy.f2py.f2py_testing.jiffies(_load_time)
numpy.f2py.f2py_testing.memusage(processName, instance)
numpy.f2py.f2py_testing.run(runtest, test_functions, repeat)

 
 
numpy.f2py.f90mod_rules.applyrules(rules, d, var)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.containscommon(rout)
numpy.f2py.f90mod_rules.containsmodule(block)
numpy.f2py.f90mod_rules.debugcapi(var)
numpy.f2py.f90mod_rules.dictappend(rd, ar)
numpy.f2py.f90mod_rules.write(self, string)
numpy.f2py.f90mod_rules.findf90modules(m)
numpy.f2py.f90mod_rules.flatlist(l)
numpy.f2py.f90mod_rules.gentitle(name)
numpy.f2py.f90mod_rules.get_kind(var)
numpy.f2py.f90mod_rules.getargs(rout)
numpy.f2py.f90mod_rules.getargs2(rout)
numpy.f2py.f90mod_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.f90mod_rules.getcallstatement(rout)
numpy.f2py.f90mod_rules.getfortranname(rout)
numpy.f2py.f90mod_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.f90mod_rules.getpymethoddef(rout)
numpy.f2py.f90mod_rules.getrestdoc(rout)
numpy.f2py.f90mod_rules.getusercode(rout)
numpy.f2py.f90mod_rules.getusercode1(rout)
numpy.f2py.f90mod_rules.hasassumedshape(rout)
numpy.f2py.f90mod_rules.hasbody(rout)
numpy.f2py.f90mod_rules.hascallstatement(rout)
numpy.f2py.f90mod_rules.hascommon(rout)
numpy.f2py.f90mod_rules.hasexternals(rout)
numpy.f2py.f90mod_rules.hasinitvalue(var)
numpy.f2py.f90mod_rules.hasinitvalueasstring(var)
numpy.f2py.f90mod_rules.hasnote(var)
numpy.f2py.f90mod_rules.hasresultnote(rout)
numpy.f2py.f90mod_rules.hasvariables(rout)
numpy.f2py.f90mod_rules.isallocatable(var)
numpy.f2py.f90mod_rules.isarray(var)
numpy.f2py.f90mod_rules.isarrayofstrings(var)
numpy.f2py.f90mod_rules.ischaracter(var)
numpy.f2py.f90mod_rules.iscomplex(var)
numpy.f2py.f90mod_rules.iscomplexarray(var)
numpy.f2py.f90mod_rules.iscomplexfunction(rout)
numpy.f2py.f90mod_rules.iscomplexfunction_warn(rout)
numpy.f2py.f90mod_rules.isdouble(var)
numpy.f2py.f90mod_rules.isdummyroutine(rout)
numpy.f2py.f90mod_rules.isexternal(var)
numpy.f2py.f90mod_rules.isfalse(var)
numpy.f2py.f90mod_rules.isfunction(rout)
numpy.f2py.f90mod_rules.isfunction_wrap(rout)
numpy.f2py.f90mod_rules.isint1array(var)
numpy.f2py.f90mod_rules.isinteger(var)
numpy.f2py.f90mod_rules.isintent_aligned16(var)
numpy.f2py.f90mod_rules.isintent_aligned4(var)
numpy.f2py.f90mod_rules.isintent_aligned8(var)
numpy.f2py.f90mod_rules.isintent_aux(var)
numpy.f2py.f90mod_rules.isintent_c(var)
numpy.f2py.f90mod_rules.isintent_cache(var)
numpy.f2py.f90mod_rules.isintent_callback(var)
numpy.f2py.f90mod_rules.isintent_copy(var)
numpy.f2py.f90mod_rules.isintent_hide(var)
numpy.f2py.f90mod_rules.isintent_in(var)
numpy.f2py.f90mod_rules.isintent_inout(var)
numpy.f2py.f90mod_rules.isintent_inplace(var)
numpy.f2py.f90mod_rules.isintent_nothide(var)
numpy.f2py.f90mod_rules.isintent_out(var)
numpy.f2py.f90mod_rules.isintent_overwrite(var)
numpy.f2py.f90mod_rules.islogical(var)
numpy.f2py.f90mod_rules.islogicalfunction(rout)
numpy.f2py.f90mod_rules.islong_complex(var)
numpy.f2py.f90mod_rules.islong_double(var)
numpy.f2py.f90mod_rules.islong_doublefunction(rout)
numpy.f2py.f90mod_rules.islong_long(var)
numpy.f2py.f90mod_rules.islong_longfunction(rout)
numpy.f2py.f90mod_rules.ismodule(rout)
numpy.f2py.f90mod_rules.ismoduleroutine(rout)
numpy.f2py.f90mod_rules.ismutable(var)
numpy.f2py.f90mod_rules.isoptional(var)
numpy.f2py.f90mod_rules.isprivate(var)
numpy.f2py.f90mod_rules.isreal(var)
numpy.f2py.f90mod_rules.isrequired(var)
numpy.f2py.f90mod_rules.isroutine(rout)
numpy.f2py.f90mod_rules.isscalar(var)
numpy.f2py.f90mod_rules.issigned_array(var)
numpy.f2py.f90mod_rules.issigned_chararray(var)
numpy.f2py.f90mod_rules.issigned_long_longarray(var)
numpy.f2py.f90mod_rules.issigned_shortarray(var)
numpy.f2py.f90mod_rules.isstring(var)
numpy.f2py.f90mod_rules.isstringarray(var)
numpy.f2py.f90mod_rules.isstringfunction(rout)
numpy.f2py.f90mod_rules.issubroutine(rout)
numpy.f2py.f90mod_rules.issubroutine_wrap(rout)
numpy.f2py.f90mod_rules.isthreadsafe(rout)
numpy.f2py.f90mod_rules.istrue(var)
numpy.f2py.f90mod_rules.isunsigned(var)
numpy.f2py.f90mod_rules.isunsigned_char(var)
numpy.f2py.f90mod_rules.isunsigned_chararray(var)
numpy.f2py.f90mod_rules.isunsigned_long_long(var)
numpy.f2py.f90mod_rules.isunsigned_long_longarray(var)
numpy.f2py.f90mod_rules.isunsigned_short(var)
numpy.f2py.f90mod_rules.isunsigned_shortarray(var)
numpy.f2py.f90mod_rules.isunsignedarray(var)
numpy.f2py.f90mod_rules.l_not(f)
numpy.f2py.f90mod_rules.outmess(t)
numpy.f2py.f90mod_rules.reduce
(
function, sequence, initial
numpy.f2py.f90mod_rules.replace(str, d, defaultsep)
numpy.f2py.f90mod_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.f90mod_rules.stripcomma(s)

 
 
numpy.f2py.func2subr.applyrules(rules, d, var)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.containscommon(rout)
numpy.f2py.func2subr.containsmodule(block)
numpy.f2py.func2subr.createfuncwrapper(rout, signature)
numpy.f2py.func2subr.createsubrwrapper(rout, signature)
numpy.f2py.func2subr.debugcapi(var)
numpy.f2py.func2subr.dictappend(rd, ar)
numpy.f2py.func2subr.write(self, string)
numpy.f2py.func2subr.flatlist(l)
numpy.f2py.func2subr.gentitle(name)
numpy.f2py.func2subr.get_kind(var)
numpy.f2py.func2subr.getargs(rout)
numpy.f2py.func2subr.getargs2(rout)
numpy.f2py.func2subr.getcallprotoargument(rout, cb_map)
numpy.f2py.func2subr.getcallstatement(rout)
numpy.f2py.func2subr.getfortranname(rout)
numpy.f2py.func2subr.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.func2subr.getpymethoddef(rout)
numpy.f2py.func2subr.getrestdoc(rout)
numpy.f2py.func2subr.getusercode(rout)
numpy.f2py.func2subr.getusercode1(rout)
numpy.f2py.func2subr.hasassumedshape(rout)
numpy.f2py.func2subr.hasbody(rout)
numpy.f2py.func2subr.hascallstatement(rout)
numpy.f2py.func2subr.hascommon(rout)
numpy.f2py.func2subr.hasexternals(rout)
numpy.f2py.func2subr.hasinitvalue(var)
numpy.f2py.func2subr.hasinitvalueasstring(var)
numpy.f2py.func2subr.hasnote(var)
numpy.f2py.func2subr.hasresultnote(rout)
numpy.f2py.func2subr.hasvariables(rout)
numpy.f2py.func2subr.isallocatable(var)
numpy.f2py.func2subr.isarray(var)
numpy.f2py.func2subr.isarrayofstrings(var)
numpy.f2py.func2subr.ischaracter(var)
numpy.f2py.func2subr.iscomplex(var)
numpy.f2py.func2subr.iscomplexarray(var)
numpy.f2py.func2subr.iscomplexfunction(rout)
numpy.f2py.func2subr.iscomplexfunction_warn(rout)
numpy.f2py.func2subr.isdouble(var)
numpy.f2py.func2subr.isdummyroutine(rout)
numpy.f2py.func2subr.isexternal(var)
numpy.f2py.func2subr.isfalse(var)
numpy.f2py.func2subr.isfunction(rout)
numpy.f2py.func2subr.isfunction_wrap(rout)
numpy.f2py.func2subr.isint1array(var)
numpy.f2py.func2subr.isinteger(var)
numpy.f2py.func2subr.isintent_aligned16(var)
numpy.f2py.func2subr.isintent_aligned4(var)
numpy.f2py.func2subr.isintent_aligned8(var)
numpy.f2py.func2subr.isintent_aux(var)
numpy.f2py.func2subr.isintent_c(var)
numpy.f2py.func2subr.isintent_cache(var)
numpy.f2py.func2subr.isintent_callback(var)
numpy.f2py.func2subr.isintent_copy(var)
numpy.f2py.func2subr.isintent_hide(var)
numpy.f2py.func2subr.isintent_in(var)
numpy.f2py.func2subr.isintent_inout(var)
numpy.f2py.func2subr.isintent_inplace(var)
numpy.f2py.func2subr.isintent_nothide(var)
numpy.f2py.func2subr.isintent_out(var)
numpy.f2py.func2subr.isintent_overwrite(var)
numpy.f2py.func2subr.islogical(var)
numpy.f2py.func2subr.islogicalfunction(rout)
numpy.f2py.func2subr.islong_complex(var)
numpy.f2py.func2subr.islong_double(var)
numpy.f2py.func2subr.islong_doublefunction(rout)
numpy.f2py.func2subr.islong_long(var)
numpy.f2py.func2subr.islong_longfunction(rout)
numpy.f2py.func2subr.ismodule(rout)
numpy.f2py.func2subr.ismoduleroutine(rout)
numpy.f2py.func2subr.ismutable(var)
numpy.f2py.func2subr.isoptional(var)
numpy.f2py.func2subr.isprivate(var)
numpy.f2py.func2subr.isreal(var)
numpy.f2py.func2subr.isrequired(var)
numpy.f2py.func2subr.isroutine(rout)
numpy.f2py.func2subr.isscalar(var)
numpy.f2py.func2subr.issigned_array(var)
numpy.f2py.func2subr.issigned_chararray(var)
numpy.f2py.func2subr.issigned_long_longarray(var)
numpy.f2py.func2subr.issigned_shortarray(var)
numpy.f2py.func2subr.isstring(var)
numpy.f2py.func2subr.isstringarray(var)
numpy.f2py.func2subr.isstringfunction(rout)
numpy.f2py.func2subr.issubroutine(rout)
numpy.f2py.func2subr.issubroutine_wrap(rout)
numpy.f2py.func2subr.isthreadsafe(rout)
numpy.f2py.func2subr.istrue(var)
numpy.f2py.func2subr.isunsigned(var)
numpy.f2py.func2subr.isunsigned_char(var)
numpy.f2py.func2subr.isunsigned_chararray(var)
numpy.f2py.func2subr.isunsigned_long_long(var)
numpy.f2py.func2subr.isunsigned_long_longarray(var)
numpy.f2py.func2subr.isunsigned_short(var)
numpy.f2py.func2subr.isunsigned_shortarray(var)
numpy.f2py.func2subr.isunsignedarray(var)
numpy.f2py.func2subr.l_not(f)
numpy.f2py.func2subr.outmess(t)
numpy.f2py.func2subr.reduce
(
function, sequence, initial
numpy.f2py.func2subr.replace(str, d, defaultsep)
numpy.f2py.func2subr.pprint(object, stream, indent, width, depth)
numpy.f2py.func2subr.stripcomma(s)

 
 

 
 
numpy.f2py.rules.applyrules(rules, d, var)
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m, um)
numpy.f2py.rules.cb_routsign2map(rout, um)
numpy.f2py.rules.cb_sign2map(a, var, index)
numpy.f2py.rules.common_sign2map(a, var)
numpy.f2py.rules.containscommon(rout)
numpy.f2py.rules.containsmodule(block)
numpy.f2py.rules.debugcapi(var)
numpy.f2py.rules.dictappend(rd, ar)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.flatlist(l)
numpy.f2py.rules.gentitle(name)
numpy.f2py.rules.get_kind(var)
numpy.f2py.rules.getargs(rout)
numpy.f2py.rules.getargs2(rout)
numpy.f2py.rules.getarrdims(a, var, verbose)
numpy.f2py.rules.getarrdocsign(a, var)
numpy.f2py.rules.getcallprotoargument(rout, cb_map)
numpy.f2py.rules.getcallstatement(rout)
numpy.f2py.rules.getctype(var)
numpy.f2py.rules.getfortranname(rout)
numpy.f2py.rules.getinit(a, var)
numpy.f2py.rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.rules.getpydocsign(a, var)
numpy.f2py.rules.getpymethoddef(rout)
numpy.f2py.rules.getrestdoc(rout)
numpy.f2py.rules.getstrlength(var)
numpy.f2py.rules.getusercode(rout)
numpy.f2py.rules.getusercode1(rout)
numpy.f2py.rules.hasassumedshape(rout)
numpy.f2py.rules.hasbody(rout)
numpy.f2py.rules.hascallstatement(rout)
numpy.f2py.rules.hascommon(rout)
numpy.f2py.rules.hasexternals(rout)
numpy.f2py.rules.hasinitvalue(var)
numpy.f2py.rules.hasinitvalueasstring(var)
numpy.f2py.rules.hasnote(var)
numpy.f2py.rules.hasresultnote(rout)
numpy.f2py.rules.hasvariables(rout)
numpy.f2py.rules.isallocatable(var)
numpy.f2py.rules.isarray(var)
numpy.f2py.rules.isarrayofstrings(var)
numpy.f2py.rules.ischaracter(var)
numpy.f2py.rules.iscomplex(var)
numpy.f2py.rules.iscomplexarray(var)
numpy.f2py.rules.iscomplexfunction(rout)
numpy.f2py.rules.iscomplexfunction_warn(rout)
numpy.f2py.rules.isdouble(var)
numpy.f2py.rules.isdummyroutine(rout)
numpy.f2py.rules.isexternal(var)
numpy.f2py.rules.isfalse(var)
numpy.f2py.rules.isfunction(rout)
numpy.f2py.rules.isfunction_wrap(rout)
numpy.f2py.rules.isint1array(var)
numpy.f2py.rules.isinteger(var)
numpy.f2py.rules.isintent_aligned16(var)
numpy.f2py.rules.isintent_aligned4(var)
numpy.f2py.rules.isintent_aligned8(var)
numpy.f2py.rules.isintent_aux(var)
numpy.f2py.rules.isintent_c(var)
numpy.f2py.rules.isintent_cache(var)
numpy.f2py.rules.isintent_callback(var)
numpy.f2py.rules.isintent_copy(var)
numpy.f2py.rules.isintent_hide(var)
numpy.f2py.rules.isintent_in(var)
numpy.f2py.rules.isintent_inout(var)
numpy.f2py.rules.isintent_inplace(var)
numpy.f2py.rules.isintent_nothide(var)
numpy.f2py.rules.isintent_out(var)
numpy.f2py.rules.isintent_overwrite(var)
numpy.f2py.rules.islogical(var)
numpy.f2py.rules.islogicalfunction(rout)
numpy.f2py.rules.islong_complex(var)
numpy.f2py.rules.islong_double(var)
numpy.f2py.rules.islong_doublefunction(rout)
numpy.f2py.rules.islong_long(var)
numpy.f2py.rules.islong_longfunction(rout)
numpy.f2py.rules.ismodule(rout)
numpy.f2py.rules.ismoduleroutine(rout)
numpy.f2py.rules.ismutable(var)
numpy.f2py.rules.isoptional(var)
numpy.f2py.rules.isprivate(var)
numpy.f2py.rules.isreal(var)
numpy.f2py.rules.isrequired(var)
numpy.f2py.rules.isroutine(rout)
numpy.f2py.rules.isscalar(var)
numpy.f2py.rules.issigned_array(var)
numpy.f2py.rules.issigned_chararray(var)
numpy.f2py.rules.issigned_long_longarray(var)
numpy.f2py.rules.issigned_shortarray(var)
numpy.f2py.rules.isstring(var)
numpy.f2py.rules.isstringarray(var)
numpy.f2py.rules.isstringfunction(rout)
numpy.f2py.rules.issubroutine(rout)
numpy.f2py.rules.issubroutine_wrap(rout)
numpy.f2py.rules.isthreadsafe(rout)
numpy.f2py.rules.istrue(var)
numpy.f2py.rules.isunsigned(var)
numpy.f2py.rules.isunsigned_char(var)
numpy.f2py.rules.isunsigned_chararray(var)
numpy.f2py.rules.isunsigned_long_long(var)
numpy.f2py.rules.isunsigned_long_longarray(var)
numpy.f2py.rules.isunsigned_short(var)
numpy.f2py.rules.isunsigned_shortarray(var)
numpy.f2py.rules.isunsignedarray(var)
numpy.f2py.rules.l_not(f)
numpy.f2py.rules.markoutercomma(line, comma)
numpy.f2py.rules.modsign2map(m)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.reduce
(
function, sequence, initial
numpy.f2py.rules.replace(str, d, defaultsep)
numpy.f2py.rules.routsign2map(rout)
numpy.f2py.rules.pprint(object, stream, indent, width, depth)
numpy.f2py.rules.sign2map(a, var)
numpy.f2py.rules.stripcomma(s)

 
 

 
 
numpy.f2py.use_rules.applyrules(rules, d, var)
numpy.f2py.use_rules.buildusevar(name, realname, vars, usemodulename)
numpy.f2py.use_rules.buildusevars(m, r)
numpy.f2py.use_rules.containscommon(rout)
numpy.f2py.use_rules.containsmodule(block)
numpy.f2py.use_rules.debugcapi(var)
numpy.f2py.use_rules.dictappend(rd, ar)
numpy.f2py.use_rules.write(self, string)
numpy.f2py.use_rules.flatlist(l)
numpy.f2py.use_rules.gentitle(name)
numpy.f2py.use_rules.get_kind(var)
numpy.f2py.use_rules.getargs(rout)
numpy.f2py.use_rules.getargs2(rout)
numpy.f2py.use_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.use_rules.getcallstatement(rout)
numpy.f2py.use_rules.getfortranname(rout)
numpy.f2py.use_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.use_rules.getpymethoddef(rout)
numpy.f2py.use_rules.getrestdoc(rout)
numpy.f2py.use_rules.getusercode(rout)
numpy.f2py.use_rules.getusercode1(rout)
numpy.f2py.use_rules.hasassumedshape(rout)
numpy.f2py.use_rules.hasbody(rout)
numpy.f2py.use_rules.hascallstatement(rout)
numpy.f2py.use_rules.hascommon(rout)
numpy.f2py.use_rules.hasexternals(rout)
numpy.f2py.use_rules.hasinitvalue(var)
numpy.f2py.use_rules.hasinitvalueasstring(var)
numpy.f2py.use_rules.hasnote(var)
numpy.f2py.use_rules.hasresultnote(rout)
numpy.f2py.use_rules.hasvariables(rout)
numpy.f2py.use_rules.isallocatable(var)
numpy.f2py.use_rules.isarray(var)
numpy.f2py.use_rules.isarrayofstrings(var)
numpy.f2py.use_rules.ischaracter(var)
numpy.f2py.use_rules.iscomplex(var)
numpy.f2py.use_rules.iscomplexarray(var)
numpy.f2py.use_rules.iscomplexfunction(rout)
numpy.f2py.use_rules.iscomplexfunction_warn(rout)
numpy.f2py.use_rules.isdouble(var)
numpy.f2py.use_rules.isdummyroutine(rout)
numpy.f2py.use_rules.isexternal(var)
numpy.f2py.use_rules.isfalse(var)
numpy.f2py.use_rules.isfunction(rout)
numpy.f2py.use_rules.isfunction_wrap(rout)
numpy.f2py.use_rules.isint1array(var)
numpy.f2py.use_rules.isinteger(var)
numpy.f2py.use_rules.isintent_aligned16(var)
numpy.f2py.use_rules.isintent_aligned4(var)
numpy.f2py.use_rules.isintent_aligned8(var)
numpy.f2py.use_rules.isintent_aux(var)
numpy.f2py.use_rules.isintent_c(var)
numpy.f2py.use_rules.isintent_cache(var)
numpy.f2py.use_rules.isintent_callback(var)
numpy.f2py.use_rules.isintent_copy(var)
numpy.f2py.use_rules.isintent_hide(var)
numpy.f2py.use_rules.isintent_in(var)
numpy.f2py.use_rules.isintent_inout(var)
numpy.f2py.use_rules.isintent_inplace(var)
numpy.f2py.use_rules.isintent_nothide(var)
numpy.f2py.use_rules.isintent_out(var)
numpy.f2py.use_rules.isintent_overwrite(var)
numpy.f2py.use_rules.islogical(var)
numpy.f2py.use_rules.islogicalfunction(rout)
numpy.f2py.use_rules.islong_complex(var)
numpy.f2py.use_rules.islong_double(var)
numpy.f2py.use_rules.islong_doublefunction(rout)
numpy.f2py.use_rules.islong_long(var)
numpy.f2py.use_rules.islong_longfunction(rout)
numpy.f2py.use_rules.ismodule(rout)
numpy.f2py.use_rules.ismoduleroutine(rout)
numpy.f2py.use_rules.ismutable(var)
numpy.f2py.use_rules.isoptional(var)
numpy.f2py.use_rules.isprivate(var)
numpy.f2py.use_rules.isreal(var)
numpy.f2py.use_rules.isrequired(var)
numpy.f2py.use_rules.isroutine(rout)
numpy.f2py.use_rules.isscalar(var)
numpy.f2py.use_rules.issigned_array(var)
numpy.f2py.use_rules.issigned_chararray(var)
numpy.f2py.use_rules.issigned_long_longarray(var)
numpy.f2py.use_rules.issigned_shortarray(var)
numpy.f2py.use_rules.isstring(var)
numpy.f2py.use_rules.isstringarray(var)
numpy.f2py.use_rules.isstringfunction(rout)
numpy.f2py.use_rules.issubroutine(rout)
numpy.f2py.use_rules.issubroutine_wrap(rout)
numpy.f2py.use_rules.isthreadsafe(rout)
numpy.f2py.use_rules.istrue(var)
numpy.f2py.use_rules.isunsigned(var)
numpy.f2py.use_rules.isunsigned_char(var)
numpy.f2py.use_rules.isunsigned_chararray(var)
numpy.f2py.use_rules.isunsigned_long_long(var)
numpy.f2py.use_rules.isunsigned_long_longarray(var)
numpy.f2py.use_rules.isunsigned_short(var)
numpy.f2py.use_rules.isunsigned_shortarray(var)
numpy.f2py.use_rules.isunsignedarray(var)
numpy.f2py.use_rules.l_not(f)
numpy.f2py.use_rules.outmess(t)
numpy.f2py.use_rules.reduce
(
function, sequence, initial
numpy.f2py.use_rules.replace(str, d, defaultsep)
numpy.f2py.use_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.use_rules.stripcomma(s)

 
 

 
 
numpy.fft.fftpack._cook_nd_args(a, s, axes, invreal)
numpy.fft.fftpack._raw_fft(a, n, axis, init_function, work_function, fft_cache)
numpy.fft.fftpack._raw_fftnd(a, s, axes, function)
numpy.fft.fftpack.asarray(a, dtype, order)
numpy.fft.fftpack.fft(a, n, axis)
numpy.fft.fftpack.fft2(a, s, axes)
numpy.fft.fftpack.fftn(a, s, axes)
numpy.fft.fftpack.hfft(a, n, axis)
numpy.fft.fftpack.ifft(a, n, axis)
numpy.fft.fftpack.ifft2(a, s, axes)
numpy.fft.fftpack.ifftn(a, s, axes)
numpy.fft.fftpack.ihfft(a, n, axis)
numpy.fft.fftpack.irfft(a, n, axis)
numpy.fft.fftpack.irfft2(a, s, axes)
numpy.fft.fftpack.irfftn(a, s, axes)
numpy.fft.fftpack.rfft(a, n, axis)
numpy.fft.fftpack.rfft2(a, s, axes)
numpy.fft.fftpack.rfftn(a, s, axes)
numpy.fft.fftpack.shape(a)
numpy.fft.fftpack.swapaxes(a, axis1, axis2)
numpy.fft.fftpack.take(a, indices, axis, out, mode)
numpy.fft.fftpack.zeros
(
shape, dtype=float, order=C

 
 
numpy.fft.fftpack_lite.cfftb
numpy.fft.fftpack_lite.cfftf
numpy.fft.fftpack_lite.cffti
numpy.fft.fftpack_lite.rfftb
numpy.fft.fftpack_lite.rfftf
numpy.fft.fftpack_lite.rffti

 
 
numpy.fft.helper.arange
(
start, stop, step,, dtype=None
numpy.fft.helper.asarray(a, dtype, order)
numpy.fft.helper.concatenate
(
(a1, a2, ...
numpy.fft.helper.empty
(
shape, dtype=float, order=C
numpy.fft.helper.fftfreq(n, d)
numpy.fft.helper.fftshift(x, axes)
numpy.fft.helper.ifftshift(x, axes)
numpy.fft.helper.rfftfreq(n, d)
numpy.fft.helper.take(a, indices, axis, out, mode)

 
 

 
 
numpy.fft.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.lib._compiled_base._insert
numpy.lib._compiled_base.add_docstring
(
obj, docstring
numpy.lib._compiled_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib._compiled_base.bincount
(
x, weights=None, minlength=None
numpy.lib._compiled_base.digitize
(
x, bins, right=False
numpy.lib._compiled_base.interp
numpy.lib._compiled_base.packbits
(
myarray, axis=None
numpy.lib._compiled_base.ravel_multi_index
(
multi_index, dims, mode=raise, order=C
numpy.lib._compiled_base.unpackbits
(
myarray, axis=None
numpy.lib._compiled_base.unravel_index
(
indices, dims, order=C

 
 

 
 

 
 

 
 
numpy.lib.arraypad._append_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._append_edge(arr, pad_amt, axis)
numpy.lib.arraypad._append_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._arange_ndarray(arr, shape, axis, reverse)
numpy.lib.arraypad._normalize_shape(narray, shape)
numpy.lib.arraypad._pad_ref(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_sym(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_wrap(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._prepend_edge(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._round_ifneeded(arr, dtype)
numpy.lib.arraypad._validate_lengths(narray, number_elements)
numpy.lib.arraypad.pad(array, pad_width, mode)

 
 
numpy.lib.arraysetops.ediff1d(ary, to_end, to_begin)
numpy.lib.arraysetops.in1d(ar1, ar2, assume_unique, invert)
numpy.lib.arraysetops.intersect1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setdiff1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setxor1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.union1d(ar1, ar2)
numpy.lib.arraysetops.unique(ar, return_index, return_inverse, return_counts)

 
 

 
 
numpy.lib.financial._convert_when(when)
numpy.lib.financial._g_div_gp(r, n, p, x, y, w)
numpy.lib.financial._rbl(rate, per, pmt, pv, when)
numpy.lib.financial.fv(rate, nper, pmt, pv, when)
numpy.lib.financial.ipmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.irr(values)
numpy.lib.financial.mirr(values, finance_rate, reinvest_rate)
numpy.lib.financial.nper(rate, pmt, pv, fv, when)
numpy.lib.financial.npv(rate, values)
numpy.lib.financial.pmt(rate, nper, pv, fv, when)
numpy.lib.financial.ppmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.pv(rate, nper, pmt, fv, when)
numpy.lib.financial.rate(nper, pmt, pv, fv, when, guess, tol, maxiter)

 
 
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._read_array_header(fp, version)
numpy.lib.format._read_bytes(fp, size, error_template)
numpy.lib.format._write_array_header(fp, d, version)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.isfileobj(f)
numpy.lib.format.magic(major, minor)
numpy.lib.format.open_memmap(filename, mode, dtype, shape, fortran_order, version)
numpy.lib.format.read_array(fp)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_array_header_2_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.safe_eval(source)
numpy.lib.format.write_array(fp, array, version)
numpy.lib.format.write_array_header_1_0(fp, d)
numpy.lib.format.write_array_header_2_0(fp, d)

 
 
numpy.lib.function_base._chbevl(x, vals)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base._insert
numpy.lib.function_base._median(a, axis, out, overwrite_input)
numpy.lib.function_base._percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base._ureduce(a, func)
numpy.lib.function_base.add_docstring
(
obj, docstring
numpy.lib.function_base.add_newdoc(place, obj, doc)
numpy.lib.function_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib.function_base.angle(z, deg)
numpy.lib.function_base.append(arr, values, axis)
numpy.lib.function_base.arange
(
start, stop, step,, dtype=None
numpy.lib.function_base.around(a, decimals, out)
numpy.lib.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.function_base.asanyarray(a, dtype, order)
numpy.lib.function_base.asarray(a, dtype, order)
numpy.lib.function_base.asarray_chkfinite(a, dtype, order)
numpy.lib.function_base.average(a, axis, weights, returned)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.bincount
(
x, weights=None, minlength=None
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.interp
numpy.lib.function_base.concatenate
(
(a1, a2, ...
numpy.lib.function_base.copy(a, order)
numpy.lib.function_base.corrcoef(x, y, rowvar, bias, ddof)
numpy.lib.function_base.cov(m, y, rowvar, bias, ddof)
numpy.lib.function_base.delete(arr, obj, axis)
numpy.lib.function_base.diag(v, k)
numpy.lib.function_base.diff(a, n, axis)
numpy.lib.function_base.digitize
(
x, bins, right=False
numpy.lib.function_base.disp(mesg, device, linefeed)
numpy.lib.function_base.dot
(
a, b, out=None
numpy.lib.function_base.empty
(
shape, dtype=float, order=C
numpy.lib.function_base.empty_like
(
a, dtype=None, order=K, subok=True
numpy.lib.function_base.extract(condition, arr)
numpy.lib.function_base.frompyfunc
(
func, nin, nout
numpy.lib.function_base.gradient(f)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.histogram(a, bins, range, normed, weights, density)
numpy.lib.function_base.histogramdd(sample, bins, range, normed, weights)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr, obj, values, axis)
numpy.lib.function_base.interp(x, xp, fp, left, right)
numpy.lib.function_base.isscalar(num)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M, beta)
numpy.lib.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.lib.function_base.mean(a, axis, dtype, out, keepdims)
numpy.lib.function_base.median(a, axis, out, overwrite_input, keepdims)
numpy.lib.function_base.msort(a)
numpy.lib.function_base.nonzero(a)
numpy.lib.function_base.ones(shape, dtype, order)
numpy.lib.function_base.partition(a, kth, axis, kind, order)
numpy.lib.function_base.percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base.piecewise(x, condlist, funclist)
numpy.lib.function_base.place(arr, mask, vals)
numpy.lib.function_base.ravel(a, order)
numpy.lib.function_base.select(condlist, choicelist, default)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort(a, axis, kind, order)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.take(a, indices, axis, out, mode)
numpy.lib.function_base.trapz(y, x, dx, axis)
numpy.lib.function_base.trim_zeros(filt, trim)
numpy.lib.function_base.unwrap(p, discont, axis)

 
 

 
 

 
 
numpy.lib.nanfunctions._copyto(a, val, mask)
numpy.lib.nanfunctions._divide_by_count(a, b, out)
numpy.lib.nanfunctions._nanmedian(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanmedian1d(arr1d, overwrite_input)
numpy.lib.nanfunctions._nanmedian_small(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions._nanpercentile1d(arr1d, q, overwrite_input, interpolation)
numpy.lib.nanfunctions._replace_nan(a, val)
numpy.lib.nanfunctions._ureduce(a, func)
numpy.lib.nanfunctions.nanargmax(a, axis)
numpy.lib.nanfunctions.nanargmin(a, axis)
numpy.lib.nanfunctions.nanmax(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanmean(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanmedian(a, axis, out, overwrite_input, keepdims)
numpy.lib.nanfunctions.nanmin(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions.nanstd(a, axis, dtype, out, ddof, keepdims)
numpy.lib.nanfunctions.nansum(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanvar(a, axis, dtype, out, ddof, keepdims)

 
 

 
 
numpy.lib.polynomial._raise_power(astr, wrap)
numpy.lib.polynomial.diag(v, k)
numpy.lib.polynomial.dot
(
a, b, out=None
numpy.lib.polynomial.eigvals(a)

 
 

 
 
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath.any(a, axis, out, keepdims)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.asarray(a, dtype, order)
numpy.lib.scimath.isreal(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n, x)
numpy.lib.scimath.power(x, p)
numpy.lib.scimath.sqrt(x)

 
 
numpy.lib.setup.configuration(parent_package, top_path)
numpy.lib.setup.join(path)

 
 
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base.apply_along_axis(func1d, axis, arr)
numpy.lib.shape_base.apply_over_axes(func, a, axes)
numpy.lib.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.shape_base.array_split(ary, indices_or_sections, axis)
numpy.lib.shape_base.asanyarray(a, dtype, order)
numpy.lib.shape_base.asarray(a, dtype, order)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.concatenate
(
(a1, a2, ...
numpy.lib.shape_base.dsplit(ary, indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a, axis)
numpy.lib.shape_base.hsplit(ary, indices_or_sections)
numpy.lib.shape_base.isscalar(num)
numpy.lib.shape_base.kron(a, b)
numpy.lib.shape_base.outer(a, b, out)
numpy.lib.shape_base.product(a, axis, dtype, out, keepdims)
numpy.lib.shape_base.reshape(a, newshape, order)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.split(ary, indices_or_sections, axis)
numpy.lib.shape_base.tile(A, reps)
numpy.lib.shape_base.vsplit(ary, indices_or_sections)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.zeros
(
shape, dtype=float, order=C

 
 

 
 
numpy.lib.twodim_base._min_int(low, high)
numpy.lib.twodim_base.arange
(
start, stop, step,, dtype=None
numpy.lib.twodim_base.asanyarray(a, dtype, order)
numpy.lib.twodim_base.asarray(a, dtype, order)
numpy.lib.twodim_base.diag(v, k)
numpy.lib.twodim_base.diagflat(v, k)
numpy.lib.twodim_base.empty
(
shape, dtype=float, order=C
numpy.lib.twodim_base.eye(N, M, k, dtype)
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x, y, bins, range, normed, weights)

 
 
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.type_check.asanyarray(a, dtype, order)
numpy.lib.type_check.asarray(a, dtype, order)
numpy.lib.type_check.asfarray(a, dtype)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isneginf(x, y)
numpy.lib.type_check.isposinf(x, y)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars, typeset, default)
numpy.lib.type_check.nan_to_num(x)
numpy.lib.type_check.obj2sctype(rep, default)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a, tol)
numpy.lib.type_check.typename(char)
numpy.lib.type_check.zeros
(
shape, dtype=float, order=C

 
 
numpy.lib.ufunclike.fix(x, y)
numpy.lib.ufunclike.isneginf(x, y)
numpy.lib.ufunclike.isposinf(x, y)

 
 
numpy.lib.user_array.arange
(
start, stop, step,, dtype=None
numpy.lib.user_array.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.user_array.asarray(a, dtype, order)

 
 

 
 

 
 

 
 

 
 
numpy.linalg.lapack_lite.dgelsd
numpy.linalg.lapack_lite.dgeqrf
numpy.linalg.lapack_lite.dorgqr
numpy.linalg.lapack_lite.xerbla
numpy.linalg.lapack_lite.zgelsd
numpy.linalg.lapack_lite.zgeqrf
numpy.linalg.lapack_lite.zungqr

 
 
numpy.linalg.linalg._complexType(t, default)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._fastCopyAndTranspose
(
a
numpy.linalg.linalg._fastCopyAndTranspose(type)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._multi_svd_norm(x, row_axis, col_axis, op)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err, flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err, flag)
numpy.linalg.linalg._raise_linalgerror_singular(err, flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err, flag)
numpy.linalg.linalg._realType(t, default)
numpy.linalg.linalg.all(a, axis, out, keepdims)
numpy.linalg.linalg.amax(a, axis, out, keepdims)
numpy.linalg.linalg.amin(a, axis, out, keepdims)
numpy.linalg.linalg.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.linalg.linalg.asarray(a, dtype, order)
numpy.linalg.linalg.asfarray(a, dtype)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.cond(x, p)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.dot
(
a, b, out=None
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a, UPLO)
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a, UPLO)
numpy.linalg.linalg.empty
(
shape, dtype=float, order=C
numpy.linalg.linalg.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.linalg.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.ma.bench.compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
numpy.ma.bench.compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
numpy.ma.bench.compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
numpy.ma.bench.timer(s, v, nloop, nrep)

 
 

 
 

 
 

 
 
numpy.ma.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._eval(astr)
numpy.matrixlib.defmatrix._from_string(str, gdict, ldict)
numpy.matrixlib.defmatrix.asanyarray(a, dtype, order)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)
numpy.matrixlib.defmatrix.binary_repr(num, width)
numpy.matrixlib.defmatrix.bmat(obj, ldict, gdict)
numpy.matrixlib.defmatrix.concatenate
(
(a1, a2, ...
numpy.matrixlib.defmatrix.identity(n, dtype)
numpy.matrixlib.defmatrix.isscalar(num)
numpy.matrixlib.defmatrix.issubdtype(arg1, arg2)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)

 
 
numpy.matrixlib.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.polynomial.polyutils.as_series(alist, trim)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x, old, new)
numpy.polynomial.polyutils.mapparms(old, new)
numpy.polynomial.polyutils.trimcoef(c, tol)
numpy.polynomial.polyutils.trimseq(seq)

 
 
numpy.polynomial.setup.configuration(parent_package, top_path)

 
 
numpy.random.allocate_lock

 
 

 
 
numpy.random.mtrand.allocate_lock
numpy.random.mtrand._shape_from_size
numpy.random.mtrand.beta
numpy.random.mtrand.binomial
numpy.random.mtrand.bytes
numpy.random.mtrand.chisquare
numpy.random.mtrand.choice
numpy.random.mtrand.dirichlet
numpy.random.mtrand.exponential
numpy.random.mtrand.f
numpy.random.mtrand.gamma
numpy.random.mtrand.geometric
numpy.random.mtrand.get_state
numpy.random.mtrand.gumbel
numpy.random.mtrand.hypergeometric
numpy.random.mtrand.laplace
numpy.random.mtrand.logistic
numpy.random.mtrand.lognormal
numpy.random.mtrand.logseries
numpy.random.mtrand.multinomial
numpy.random.mtrand.multivariate_normal
numpy.random.mtrand.negative_binomial
numpy.random.mtrand.noncentral_chisquare
numpy.random.mtrand.noncentral_f
numpy.random.mtrand.normal
numpy.random.mtrand.pareto
numpy.random.mtrand.permutation
numpy.random.mtrand.poisson
numpy.random.mtrand.power
numpy.random.mtrand.rand
numpy.random.mtrand.randint
numpy.random.mtrand.randn
numpy.random.mtrand.random_integers
numpy.random.mtrand.random_sample
numpy.random.mtrand.rayleigh
numpy.random.mtrand.seed
numpy.random.mtrand.set_state
numpy.random.mtrand.shuffle
numpy.random.mtrand.standard_cauchy
numpy.random.mtrand.standard_exponential
numpy.random.mtrand.standard_gamma
numpy.random.mtrand.standard_normal
numpy.random.mtrand.standard_t
numpy.random.mtrand.triangular
numpy.random.mtrand.uniform
numpy.random.mtrand.vonmises
numpy.random.mtrand.wald
numpy.random.mtrand.weibull
numpy.random.mtrand.zipf

 
 
numpy.random.setup.configuration(parent_package, top_path)
numpy.random.setup.dirname(p)
numpy.random.setup.join(path)
numpy.random.setup.newer(source, target)
numpy.random.setup.split(p)

 
 
numpy.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.testing.decorators.deprecated(conditional)
numpy.testing.decorators.knownfailureif(fail_condition, msg)
numpy.testing.decorators.setastest(tf)
numpy.testing.decorators.skipif(skip_condition, msg)
numpy.testing.decorators.slow(t)

 
 

 
 

 
 

 
 
numpy.testing.setup.configuration(parent_package, top_path)

 
 
numpy.testing.utils.GetPerformanceAttributes(object, counter, instance, inum, format, machine)

 
 

 
 
 
 -----------------------------------------------------------------------------

 
Module: numpy.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy._import_tools-------------------------------------------------
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: PackageLoaderDebug
          +  _execcmd(self, cmdstr)

 
Module: numpy.add_newdocs-------------------------------------------------
      +Func: add_newdoc(place, obj, doc)

 
Module: numpy.compat-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargspec(func)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat._inspect-------------------------------------------------
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3DBA8>), (formatvarkw, <function <lambda> at 0x0000000002E3DC18>), (formatvalue, <function <lambda> at 0x0000000002E3DC88>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargs(co)
      +Func: getargspec(func)
      +Func: getargvalues(frame)
      +Func: iscode(object)
      +Func: isfunction(object)
      +Func: ismethod(object)
      +Func: joinseq(seq)
      +Func: strseq(object, convert, join)
    	  	  Default_Args:(join, <function joinseq at 0x0000000002E3D898>)

 
Module: numpy.compat.py3k-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.core-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _ufunc_reconstruct(module, name)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: hstack(tup)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core._dotblas-------------------------------------------------
    +Built-in Function: alterdot
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: inner
    	-Method Arguments:
a, b
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: vdot
    	-Method Arguments:
a, b

 
Module: numpy.core._dummy-------------------------------------------------
    (No members)

 
Module: numpy.core._internal-------------------------------------------------
      +Func: _add_trailing_padding(value, padding)
      +Func: _array_descr(descriptor)
      +Func: _commastring(astr)
    
   +Class: _ctypes
          +  data_as(self, obj)
          +  get_shape(self)
          +  get_strides(self)
          +  get_data(self)
          +  shape_as(self, obj)
          +  strides_as(self, obj)
          +  __init__(self, array, ptr)
        	  	  Default_Args:(ptr, None)
          +  get_as_parameter(self)
      +Func: _dtype_from_pep3118(spec, byteorder, is_subdtype)
    	  	  Default_Args:(byteorder, @), (is_subdtype, False)
      +Func: _gcd(a, b)
      +Func: _index_fields(ary, fields)
      +Func: _makenames_list(adict, align)
    
   +Class: _missing_ctypes
          +  c_void_p(self, num)
          +  cast(self, num, obj)
      +Func: _newnames(datatype, order)
      +Func: _prod(a)
      +Func: _reconstruct(subtype, shape, dtype)
      +Func: _usefields(adict, align)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)

 
Module: numpy.core._methods-------------------------------------------------
      +Func: _all(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _any(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _count_reduce_items(arr, axis)
      +Func: _mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: _sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False

 
Module: numpy.core.arrayprint-------------------------------------------------
    
   +Class: ComplexFormat
          +  __call__(self, x)
          +  __init__(self, x, precision, suppress_small)
    
   +Class: DatetimeFormat
          +  __call__(self, x)
          +  __init__(self, x, unit, timezone, casting)
        	  	  Default_Args:(unit, None), (timezone, None), (casting, same_kind)
    
   +Class: FloatFormat
          +  fillFormat(self, data)
          +  __call__(self, x, strip_zeros)
        	  	  Default_Args:(strip_zeros, True)
          +  __init__(self, data, precision, suppress_small, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: IntegerFormat
          +  __call__(self, x)
          +  __init__(self, data)
    
   +Class: LongComplexFormat
          +  __call__(self, x)
          +  __init__(self, precision)
    
   +Class: LongFloatFormat
          +  __call__(self, x)
          +  __init__(self, precision, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: TimedeltaFormat
          +  __call__(self, x)
          +  __init__(self, data)
      +Func: _array2string(a, max_line_width, precision, suppress_small, separator, prefix, formatter)
    	  	  Default_Args:(separator,  ), (prefix, ), (formatter, None)
      +Func: _boolFormatter(x)
      +Func: _convert_arrays(obj)
      +Func: _digits(x, precision, format)
      +Func: _extendLine(s, line, word, max_line_len, next_line_prefix)
      +Func: _formatArray(a, format_function, rank, max_line_len, next_line_prefix, separator, edge_items, summary_insert)
      +Func: _leading_trailing(a)
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: format_longfloat
    	-Method Arguments: None
      +Func: product(x, y)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: repr_format(x)
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)

 
Module: numpy.core.defchararray-------------------------------------------------
    
   +Class: str
        (No members)
    	   Positional_Args: args
      +Func: _get_num_chars(a)
    +Built-in Function: len
    	-Method Arguments:
object
      +Func: _to_string_or_unicode_array(result)
    
   +Class: unicode
        (No members)
    	   Positional_Args: args
    +Built-in Function: _vec_string
    	-Method Arguments: None
      +Func: add(x1, x2)
      +Func: array(obj, itemsize, copy, unicode, order)
    	  	  Default_Args:(itemsize, None), (copy, True), (unicode, None), (order, None)
      +Func: asarray(obj, itemsize, unicode, order)
    	  	  Default_Args:(itemsize, None), (unicode, None), (order, None)
    
   +Class: str
        (No members)
    
   +Class: bool_
        (No members)
      +Func: capitalize(a)
      +Func: center(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
      +Func: count(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: decode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: encode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: endswith(a, suffix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: equal(x1, x2)
      +Func: expandtabs(a, tabsize)
    	  	  Default_Args:(tabsize, 8)
      +Func: find(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: greater(x1, x2)
      +Func: greater_equal(x1, x2)
      +Func: index(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
    
   +Class: integer
        (No members)
      +Func: isalnum(a)
      +Func: isalpha(a)
      +Func: isdecimal(a)
      +Func: isdigit(a)
      +Func: islower(a)
      +Func: isnumeric(a)
      +Func: isspace(a)
      +Func: istitle(a)
      +Func: isupper(a)
      +Func: join(sep, seq)
      +Func: less(x1, x2)
      +Func: less_equal(x1, x2)
      +Func: ljust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: long
        (No members)
      +Func: lower(a)
      +Func: lstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: mod(a, values)
      +Func: multiply(a, i)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: not_equal(x1, x2)
    
   +Class: object_
        (No members)
      +Func: partition(a, sep)
      +Func: replace(a, old, new, count)
    	  	  Default_Args:(count, None)
      +Func: rfind(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rindex(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rjust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
      +Func: rpartition(a, sep)
      +Func: rsplit(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: rstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: split(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: splitlines(a, keepends)
    	  	  Default_Args:(keepends, None)
      +Func: startswith(a, prefix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: str_len(a)
    
   +Class: string_
        (No members)
      +Func: strip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: swapcase(a)
      +Func: title(a)
      +Func: translate(a, table, deletechars)
    	  	  Default_Args:(deletechars, None)
    
   +Class: unicode_
        (No members)
      +Func: upper(a)
      +Func: zfill(a, width)

 
Module: numpy.core.fromnumeric-------------------------------------------------
    
   +Class: VisibleDeprecationWarning
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: generator
        (No members)
    +Built-in Function: sum
    	-Method Arguments:
sequence, start
      +Func: _wrapit(obj, method)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ndim(a)
      +Func: nonzero(a)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: shape(a)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.core.function_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes

 
Module: numpy.core.getlimits-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: _frz(a)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)

 
Module: numpy.core.info-------------------------------------------------
    (No members)

 
Module: numpy.core.machar-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs

 
Module: numpy.core.memmap-------------------------------------------------
    
   +Class: basestring
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: long
        (No members)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    
   +Class: ndarray
        (No members)
    
   +Class: uint8
        (No members)

 
Module: numpy.core.multiarray-------------------------------------------------
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    +Built-in Function: _get_ndarray_c_version
    	-Method Arguments: None
    +Built-in Function: _reconstruct
    	-Method Arguments:
subtype, shape, dtype
    +Built-in Function: _vec_string
    	-Method Arguments: None
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
    +Built-in Function: correlate
    	-Method Arguments:
a,v, mode=0
    +Built-in Function: correlate2
    	-Method Arguments: None
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments: None
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: Exception
        (No members)
    
   +Class: flagsobj
        (No members)
    
   +Class: flatiter
        (No members)
    +Built-in Function: format_longfloat
    	-Method Arguments: None
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: inner
    	-Method Arguments: None
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
    +Built-in Function: may_share_memory
    	-Method Arguments: None
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
    +Built-in Function: scalar
    	-Method Arguments:
dtype, obj
    +Built-in Function: set_datetimeparse_function
    	-Method Arguments: None
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
    +Built-in Function: set_string_function
    	-Method Arguments:
f, repr=1
    +Built-in Function: set_typeDict
    	-Method Arguments:
dict
    +Built-in Function: test_interrupt
    	-Method Arguments: None
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.core.multiarray_tests-------------------------------------------------
    +Built-in Function: array_indexing
    	-Method Arguments: None
    +Built-in Function: get_buffer_info
    	-Method Arguments: None
    +Built-in Function: test_as_c_array
    	-Method Arguments: None
    +Built-in Function: test_inplace_increment
    	-Method Arguments: None
    +Built-in Function: test_int_subclass
    	-Method Arguments: None
    +Built-in Function: test_nditer_too_large
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator_oob
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_end
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_start
    	-Method Arguments: None

 
Module: numpy.core.numeric-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
      +Func: _maketup(descr, val)
      +Func: _mode_from_name(mode)
      +Func: _move_axis_to_0(a, axis)
    
   +Class: _unspecified
        (No members)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: extend_all(module)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core.numerictypes-------------------------------------------------
      +Func: _add_array_type(typename, bits)
      +Func: _can_coerce_all(dtypelist, start)
    	  	  Default_Args:(start, 0)
      +Func: _evalname(name)
      +Func: _find_common_coerce(a, b)
      +Func: _python_type(t)
    
   +Class: _typedict
          +  __getitem__(self, obj)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: bitname(obj)
    
   +Class: bool
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: buffer
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: english_capitalize(s)
      +Func: english_lower(s)
      +Func: english_upper(s)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flexible
        (No members)
    
   +Class: float
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: generic
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: inexact
        (No members)
    
   +Class: int
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
    
   +Class: long
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    
   +Class: ndarray
        (No members)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object
        (No members)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: timedelta64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)

 
Module: numpy.core.operand_flag_tests-------------------------------------------------
    (No members)

 
Module: numpy.core.records-------------------------------------------------
      +Func: array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (strides, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (copy, True)
    
   +Class: str
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: find_duplicate(list)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromfile(fd, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromstring(datastring, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: get_remaining_size(fd)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
    
   +Class: ndarray
        (No members)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)

 
Module: numpy.core.scalarmath-------------------------------------------------
    +Built-in Function: alter_pythonmath
    	-Method Arguments: None
    +Built-in Function: restore_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_scalarmath
    	-Method Arguments: None

 
Module: numpy.core.setup-------------------------------------------------
    
   +Class: CallOnceOnly
          +  check_complex(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_ieee_macros(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_types(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  __init__(self)
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_complex(config, mathlibs)
      +Func: check_ieee_macros(config)
      +Func: check_long_double_representation(cmd)
      +Func: check_math_capabilities(config, moredefs, mathlibs)
      +Func: check_mathlib(config_cmd)
      +Func: check_types(config_cmd, ext, build_dir)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: get_config_var(name)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: newer(source, target)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)
      +Func: visibility_define(config)
      +Func: win32_checks(deflist)

 
Module: numpy.core.setup_common-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_long_double_representation(cmd)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)

 
Module: numpy.core.shape_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: hstack(tup)
      +Func: vstack(tup)

 
Module: numpy.core.struct_ufunc_test-------------------------------------------------
    (No members)

 
Module: numpy.core.test_rational-------------------------------------------------
    
   +Class: rational
        (No members)

 
Module: numpy.core.umath-------------------------------------------------
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: geterrobj
    	-Method Arguments: None
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj

 
Module: numpy.core.umath_tests-------------------------------------------------
    +Built-in Function: test_signature
    	-Method Arguments: None

 
Module: numpy.ctypeslib-------------------------------------------------
    
   +Class: PyCArrayType
        (No members)
    
   +Class: dtype
        (No members)
      +Func: _flags_fromnum(num)
    
   +Class: _ndptr
          +  from_param(cls, obj)
          +  _check_retval_(self)
    
   +Class: c_void_p
        (No members)
      +Func: _num_fromflags(flaglist)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_array(obj, shape)
    	  	  Default_Args:(shape, None)
      +Func: as_ctypes(obj)
    
   +Class: c_longlong
        (No members)
    	   Positional_Args: args
    	   Keyword_Args: kwds
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    
   +Class: flagsobj
        (No members)
    
   +Class: integer
        (No members)
      +Func: load_library(libname, loader_path)
    
   +Class: ndarray
        (No members)
      +Func: ndpointer(dtype, ndim, shape, flags)
    	  	  Default_Args:(dtype, None), (ndim, None), (shape, None), (flags, None)
      +Func: prep_array(array_type)
      +Func: prep_pointer(pointer_obj, shape)
      +Func: prep_simple(simple_type, dtype)
    
   +Class: c_double
        (No members)

 
Module: numpy.distutils-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: parse_flags(line)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy.distutils.__version__-------------------------------------------------
    (No members)

 
Module: numpy.distutils.ccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
      +Func: CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
    	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
      +Func: CCompiler_customize(self, dist, need_cxx)
    	  	  Default_Args:(need_cxx, 0)
      +Func: CCompiler_customize_cmd(self, cmd, ignore)
    	  	  Default_Args:(ignore, ())
      +Func: CCompiler_cxx_compiler(self)
      +Func: CCompiler_get_version(self, force, ok_status)
    	  	  Default_Args:(force, False), (ok_status, 0)
      +Func: CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
    	  	  Default_Args:(strip_dir, 0), (output_dir, )
      +Func: CCompiler_show_customization(self)
      +Func: CCompiler_spawn(self, cmd, display)
    	  	  Default_Args:(display, None)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: LooseVersion
          +  __str__(self)
          +  parse(self, vstring)
          +  __repr__(self)
          +  __cmp__(self, other)
          +  __init__(self, vstring)
        	  	  Default_Args:(vstring, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: _compiler_to_string(compiler)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: copy(x)
      +Func: customize_compiler(compiler)
      +Func: cyg2win32(path)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: execute(func, args, msg, verbose, dry_run)
    	  	  Default_Args:(msg, None), (verbose, 0), (dry_run, 0)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: get_default_compiler(osname, platform)
    	  	  Default_Args:(osname, None), (platform, None)
      +Func: is_sequence(seq)
      +Func: mkpath(name, mode, verbose, dry_run)
    	  	  Default_Args:(mode, 511), (verbose, 1), (dry_run, 0)
      +Func: move_file(src, dst, verbose, dry_run)
    	  	  Default_Args:(verbose, 1), (dry_run, 0)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: quote_args(args)
      +Func: replace_method(klass, method_name, func)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )
      +Func: spawn(cmd, search_path, verbose, dry_run)
    	  	  Default_Args:(search_path, 1), (verbose, 0), (dry_run, 0)
      +Func: split_quoted(s)

 
Module: numpy.distutils.command-------------------------------------------------

 
Module: numpy.distutils.command.autodist-------------------------------------------------
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)

 
Module: numpy.distutils.command.bdist_rpm-------------------------------------------------
    
   +Class: bdist_rpm
          +  _make_spec_file(self)
    
   +Class: bdist_rpm
          +  run(self)
          +  initialize_options(self)
          +  _make_spec_file(self)
          +  _dist_path(self, path)
          +  _format_changelog(self, changelog)
          +  finalize_options(self)
          +  finalize_package_data(self)

 
Module: numpy.distutils.command.build-------------------------------------------------
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  has_scripts(self)
          +  has_pure_modules(self)
          +  has_c_libraries(self)
          +  has_ext_modules(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_clib-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
      +Func: all_strings(lst)
    
   +Class: build_clib
          +  build_libraries(self, libraries)
          +  run(self)
          +  initialize_options(self)
          +  build_a_library(self, build_info, lib_name, libraries)
          +  have_cxx_sources(self)
          +  have_f_sources(self)
          +  get_source_files(self)
      +Func: filter_sources(sources)
      +Func: get_lib_source_files(lib)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_clib
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  build_libraries(self, libraries)
          +  check_library_list(self, libraries)
          +  get_library_names(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.build_ext-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: build_ext
          +  run(self)
          +  initialize_options(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  get_outputs(self)
          +  finalize_options(self)
          +  _libs_with_msvc_and_fortran(self, fcompiler, c_libraries, c_library_dirs)
          +  _add_dummy_mingwex_sym(self, c_sources)
          +  swig_sources(self, sources)
    	   Positional_Args: args
    	   Keyword_Args: kws
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: filter_sources(sources)
      +Func: get_ext_source_files(ext)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: msvc_version(compiler)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_ext
          +  get_ext_filename(self, ext_name)
          +  get_ext_fullpath(self, ext_name)
          +  get_export_symbols(self, ext)
          +  swig_sources(self, sources, extension)
          +  initialize_options(self)
          +  get_ext_fullname(self, ext_name)
          +  get_outputs(self)
          +  run(self)
          +  check_extensions_list(self, extensions)
          +  build_extensions(self)
          +  find_swig(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  finalize_options(self)
          +  get_libraries(self, ext)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_py-------------------------------------------------
    
   +Class: build_py
          +  find_modules(self)
          +  run(self)
          +  find_package_modules(self, package, package_dir)
      +Func: is_string(s)
    
   +Class: build_py
          +  check_package(self, package, package_dir)
          +  build_packages(self)
          +  check_module(self, module, module_file)
          +  build_package_data(self)
          +  initialize_options(self)
          +  get_package_dir(self, package)
          +  byte_compile(self, files)
          +  get_outputs(self, include_bytecode)
        	  	  Default_Args:(include_bytecode, 1)
          +  find_all_modules(self)
          +  run(self)
          +  get_module_outfile(self, build_dir, package, module)
          +  finalize_options(self)
          +  build_modules(self)
          +  find_modules(self)
          +  find_data_files(self, package, src_dir)
          +  get_source_files(self)
          +  get_data_files(self)
          +  build_module(self, module, module_file, package)
          +  find_package_modules(self, package, package_dir)

 
Module: numpy.distutils.command.build_scripts-------------------------------------------------
    
   +Class: build_scripts
          +  generate_scripts(self, scripts)
          +  get_source_files(self)
          +  run(self)
      +Func: is_string(s)
    
   +Class: build_scripts
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
          +  copy_scripts(self)

 
Module: numpy.distutils.command.build_src-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _find_swig_target(target_dir, name)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: appendpath(prefix, path)
    
   +Class: build_src
          +  filter_py_files(self, sources)
          +  build_extension_sources(self, ext)
          +  _build_npy_pkg_config(self, info, gd)
          +  build_npy_pkg_config(self)
          +  swig_sources(self, sources, extension)
          +  f2py_sources(self, sources, extension)
          +  initialize_options(self)
          +  template_sources(self, sources, extension)
          +  pyrex_sources(self, sources, extension)
          +  filter_files(self, sources, exts)
        	  	  Default_Args:(exts, )
          +  build_py_modules_sources(self)
          +  run(self)
          +  finalize_options(self)
          +  build_library_sources(self, lib_name, build_info)
          +  generate_sources(self, sources, extension)
          +  build_sources(self)
          +  build_data_files_sources(self)
          +  generate_a_pyrex_source(self, base, ext_name, source, extension)
          +  filter_h_files(self, sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_f2py_modulename(source)
      +Func: get_swig_modulename(source)
      +Func: get_swig_target(source)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: newer(source, target)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: process_file(source)
      +Func: process_file(source)
      +Func: subst_vars(target, source, d)

 
Module: numpy.distutils.command.config-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: GrabStdout
          +  restore(self)
          +  write(self, data)
          +  flush(self)
          +  __init__(self)
    
   +Class: LinkError
        (No members)
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: generate_manifest(config)
    
   +Class: config
          +  search_cpp(self, pattern, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)
          +  _compile(self, body, headers, include_dirs, lang)
          +  run(self)
          +  try_link(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, 0), (call, 0)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_lib(self, library, library_dirs, headers, include_dirs, other_libraries)
        	  	  Default_Args:(library_dirs, None), (headers, None), (include_dirs, None), (other_libraries, )
          +  _clean(self)
        	   Positional_Args: filenames
          +  try_compile(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (lang, c)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  finalize_options(self)
          +  _gen_temp_sourcefile(self, body, headers, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  _preprocess(self, body, headers, include_dirs, lang)
          +  try_cpp(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)

 
Module: numpy.distutils.command.config_compiler-------------------------------------------------
    
   +Class: Command
          +  _ensure_tested_string(self, option, tester, what, error_fmt, default)
        	  	  Default_Args:(default, None)
          +  spawn(self, cmd, search_path, level)
        	  	  Default_Args:(search_path, 1), (level, 1)
          +  ensure_finalized(self)
          +  __init__(self, dist)
          +  initialize_options(self)
          +  dump_options(self, header, indent)
        	  	  Default_Args:(header, None), (indent, )
          +  __getattr__(self, attr)
          +  get_sub_commands(self)
          +  copy_tree(self, infile, outfile, preserve_mode, preserve_times, preserve_symlinks, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (preserve_symlinks, 0), (level, 1)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  run_command(self, command)
          +  set_undefined_options(self, src_cmd)
        	   Positional_Args: option_pairs
          +  run(self)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  copy_file(self, infile, outfile, preserve_mode, preserve_times, link, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (link, None), (level, 1)
          +  warn(self, msg)
          +  ensure_dirname(self, option)
          +  move_file(self, src, dst, level)
        	  	  Default_Args:(level, 1)
          +  ensure_string_list(self, option)
          +  _ensure_stringlike(self, option, what, default)
        	  	  Default_Args:(default, None)
          +  get_finalized_command(self, command, create)
        	  	  Default_Args:(create, 1)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  ensure_string(self, option, default)
        	  	  Default_Args:(default, None)
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  make_archive(self, base_name, format, root_dir, base_dir, owner, group)
        	  	  Default_Args:(root_dir, None), (base_dir, None), (owner, None), (group, None)
          +  get_command_name(self)
          +  make_file(self, infiles, outfile, func, args, exec_msg, skip_msg, level)
        	  	  Default_Args:(exec_msg, None), (skip_msg, None), (level, 1)
          +  finalize_options(self)
          +  ensure_filename(self, option)
          +  debug_print(self, msg)
    
   +Class: config_cc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: config_fc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.develop-------------------------------------------------
    
   +Class: develop
          +  install_for_development(self)
    
   +Class: develop
          +  install_for_development(self)
          +  run(self)
          +  initialize_options(self)
          +  install_egg_scripts(self, dist)
          +  uninstall_link(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.egg_info-------------------------------------------------
    
   +Class: egg_info
          +  run(self)
          +  initialize_options(self)
          +  save_version_info(self, filename)
          +  tags(self)
          +  check_broken_egg_info(self)
          +  tagged_version(self)
          +  write_or_delete_file(self, what, filename, data, force)
        	  	  Default_Args:(force, False)
          +  delete_file(self, filename)
          +  find_sources(self)
          +  write_file(self, what, filename, data)
          +  finalize_options(self)
    
   +Class: egg_info
          +  run(self)

 
Module: numpy.distutils.command.install-------------------------------------------------
    
   +Class: install
          +  setuptools_run(self)
          +  run(self)
          +  finalize_options(self)
    
   +Class: install
          +  handle_extra_path(self)
          +  initialize_options(self)
          +  do_egg_install(self)
          +  run(self)
          +  finalize_options(self)
      +Func: write_file(filename, contents)

 
Module: numpy.distutils.command.install_clib-------------------------------------------------
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
    
   +Class: install_clib
          +  run(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)

 
Module: numpy.distutils.command.install_data-------------------------------------------------
    
   +Class: install_data
          +  finalize_options(self)
          +  run(self)
    
   +Class: install_data
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.install_headers-------------------------------------------------
    
   +Class: install_headers
          +  run(self)
    
   +Class: install_headers
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.sdist-------------------------------------------------
      +Func: get_data_files(data)
    
   +Class: sdist
          +  make_release_tree(self, base_dir, files)
          +  check_readme(self)
          +  run(self)
          +  _manifest_is_not_generated(self)
          +  read_manifest(self)
          +  add_defaults(self)
          +  __read_template_hack(self)
    
   +Class: sdist
          +  add_defaults(self)

 
Module: numpy.distutils.compat-------------------------------------------------

 
Module: numpy.distutils.conv_template-------------------------------------------------
      +Func: paren_repl(obj)
      +Func: parse_loop_header(loophead)
      +Func: parse_string(astr, env, level, line)
      +Func: parse_structure(astr, level)
      +Func: parse_values(astr)
      +Func: process_file(source)
      +Func: process_str(astr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.core-------------------------------------------------
    
   +Class: CCompilerError
        (No members)
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: DistutilsArgError
        (No members)
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
    
   +Class: PyPIRCCommand
          +  initialize_options(self)
          +  _store_pypirc(self, username, password)
          +  finalize_options(self)
          +  _read_pypirc(self)
          +  _get_rc_file(self)
      +Func: _check_append_ext_library(libraries, lib_name, build_info)
      +Func: _check_append_library(libraries, item)
      +Func: _command_line_ok(_cache)
    	  	  Default_Args:(_cache, )
      +Func: _dict_append(d)
    	   Keyword_Args: kws
      +Func: gen_usage(script_name)
      +Func: get_data_files(data)
      +Func: get_distribution(always)
    	  	  Default_Args:(always, False)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    	   Keyword_Args: attrs
      +Func: run_setup(script_name, script_args, stop_after)
    	  	  Default_Args:(script_args, None), (stop_after, run)
    	   Keyword_Args: attr

 
Module: numpy.distutils.cpuinfo-------------------------------------------------
    
   +Class: CPUInfoBase
          +  _is_64bit(self)
          +  _getNCPUs(self)
          +  __getattr__(self, name)
          +  _try_call(self, func)
          +  __get_nbits(self)
          +  _is_32bit(self)
    
   +Class: DarwinCPUInfo
          +  _is_ppc604e(self)
          +  _is_ppc860(self)
          +  _is_ppc801(self)
          +  _is_ppc603e(self)
          +  __machine(self, n)
          +  _is_Power_Macintosh(self)
          +  _is_ppc7400(self)
          +  _is_ppc7450(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ppc505(self)
          +  _is_ppc(self)
          +  _getNCPUs(self)
          +  _is_ppc620(self)
          +  _is_i386(self)
          +  _is_ppc602(self)
          +  _is_ppc601(self)
          +  _is_ppc750(self)
          +  _is_ppc740(self)
          +  _is_ppc604(self)
          +  _is_ppc603(self)
          +  _is_ppc630(self)
          +  _is_ppc403(self)
          +  _is_ppc823(self)
          +  _is_ppc821(self)
    
   +Class: IRIXCPUInfo
          +  _is_r4600(self)
          +  _is_IP22_4k(self)
          +  _is_r4400(self)
          +  _is_r8000(self)
          +  _is_r4300(self)
          +  _is_r12000(self)
          +  __init__(self)
          +  _is_IP27(self)
          +  _is_IP26(self)
          +  _is_IP25(self)
          +  _is_IP24(self)
          +  _getNCPUs(self)
          +  _is_IP21(self)
          +  _is_r10000(self)
          +  _is_r6000(self)
          +  _is_IP28(self)
          +  _is_rorion(self)
          +  _is_r2000(self)
          +  _is_r4650(self)
          +  _not_impl(self)
          +  _is_r3000(self)
          +  _is_IP32_5k(self)
          +  __machine(self, n)
          +  get_ip(self)
          +  _is_r4100(self)
          +  _is_r3900(self)
          +  _is_r4000(self)
          +  _is_IP19(self)
          +  _is_IP22_5k(self)
          +  _is_r5000(self)
          +  _is_IP22(self)
          +  __cputype(self, n)
          +  _is_IP30(self)
          +  _is_IP32(self)
          +  _is_IP32_10k(self)
          +  _is_IP20(self)
          +  _is_singleCPU(self)
    
   +Class: LinuxCPUInfo
          +  _is_Itanium(self)
          +  _is_Intel(self)
          +  _is_AthlonK7(self)
          +  _is_AthlonK6(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_sse3(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _is_Opteron(self)
          +  _getNCPUs(self)
          +  _not_impl(self)
          +  _is_Nocona(self)
          +  _is_Core2(self)
          +  _has_ssse3(self)
          +  _is_Athlon64(self)
          +  _is_EV56(self)
          +  _has_f00f_bug(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _is_XEON(self)
          +  _is_Prescott(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_i486(self)
          +  _is_AMD(self)
          +  _is_Alpha(self)
          +  _has_fdiv_bug(self)
          +  _is_PentiumII(self)
          +  _not_impl(self)
          +  _is_EV4(self)
          +  _is_Celeron(self)
          +  _is_XEON(self)
          +  _is_AthlonMP(self)
          +  _is_Pentium(self)
          +  _is_AthlonK6_2(self)
          +  _is_AthlonK6_3(self)
          +  _has_3dnowext(self)
          +  _is_EV5(self)
          +  _is_Hammer(self)
          +  _is_PCA56(self)
          +  _is_AthlonHX(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
    
   +Class: SunOSCPUInfo
          +  _is_ultra(self)
          +  _is_ultraenterprice(self)
          +  _is_sunfire(self)
          +  _is_ultra1(self)
          +  _is_ultra5_10(self)
          +  _is_sparc(self)
          +  _is_ultra80(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ultra2(self)
          +  _getNCPUs(self)
          +  _is_ultra4(self)
          +  _is_ultra5(self)
          +  _is_i386(self)
          +  _is_sparcstation5(self)
          +  _is_ultra250(self)
          +  _is_ultra60(self)
          +  _is_ultraenterprice10k(self)
          +  _is_cpusparcv9(self)
          +  _is_cpusparcv8(self)
          +  _is_cpusparcv7(self)
          +  _is_ultra30(self)
          +  _is_sun4(self)
          +  _is_sparcv9(self)
          +  _is_SUNW(self)
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: command_by_line(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: command_info(successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
    	   Keyword_Args: kw
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: getoutput(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: getstatusoutput(cmd)
      +Func: key_value_from_command(cmd, sep, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)

 
Module: numpy.distutils.environment-------------------------------------------------
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: type

 
Module: numpy.distutils.exec_command-------------------------------------------------
      +Func: _exec_command(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_posix(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_python(command, exec_command_dir)
    	  	  Default_Args:(exec_command_dir, )
    	   Keyword_Args: env
      +Func: _preserve_environment(names)
      +Func: _supports_fileno(stream)
    	   Keyword_Args: env
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: is_sequence(seq)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: quote_arg(arg)
      +Func: splitcmdline(line)
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws

 
Module: numpy.distutils.extension-------------------------------------------------
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    
   +Class: Extension
          +  _convert_pyx_sources_to_lang(self)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw

 
Module: numpy.distutils.fcompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: CompilerNotFound
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: FancyGetopt
          +  print_help(self, header, file)
        	  	  Default_Args:(header, None), (file, None)
          +  _grok_option_table(self)
          +  has_option(self, long_option)
          +  generate_help(self, header)
        	  	  Default_Args:(header, None)
          +  get_attr_name(self, long_option)
          +  _check_alias_dict(self, aliases, what)
          +  get_option_order(self)
          +  set_option_table(self, option_table)
          +  _build_index(self)
          +  add_option(self, long_option, short_option, help_string)
        	  	  Default_Args:(short_option, None), (help_string, None)
          +  set_aliases(self, alias)
          +  getopt(self, args, object)
        	  	  Default_Args:(args, None), (object, None)
          +  set_negative_aliases(self, negative_alias)
          +  __init__(self, option_table)
        	  	  Default_Args:(option_table, None)
    
   +Class: LinkError
        (No members)
    
   +Class: type

 
Module: numpy.distutils.fcompiler.absoft-------------------------------------------------
    
   +Class: AbsoftFCompiler
          +  get_library_dirs(self)
          +  get_flags_fix(self)
          +  get_flags(self)
          +  update_executables(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags_f77(self)
          +  get_libraries(self)
          +  library_dir_option(self, dir)
          +  get_flags_f90(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
      +Func: cyg2win32(path)

 
Module: numpy.distutils.fcompiler.compaq-------------------------------------------------
    
   +Class: CompaqFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)
    
   +Class: CompaqVisualFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags(self)
          +  get_flags_arch(self)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)

 
Module: numpy.distutils.fcompiler.g95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: G95FCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.gnu-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: Gnu95FCompiler
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  _universal_flags(self, cmd)
          +  version_match(self, version_string)
          +  get_flags_opt(self)
          +  get_target(self)
          +  get_libraries(self)
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: Popen
          +  _make_inheritable(self, handle)
          +  __del__(self, _maxint)
        	  	  Default_Args:(_maxint, 2147483647)
          +  communicate(self, input)
        	  	  Default_Args:(input, None)
          +  terminate(self)
          +  _readerthread(self, fh, buffer)
          +  terminate(self)
          +  _internal_poll(self, _deadstate, _WaitForSingleObject, _WAIT_OBJECT_0, _GetExitCodeProcess)
        	  	  Default_Args:(_deadstate, None), (_WaitForSingleObject, <built-in function WaitForSingleObject>), (_WAIT_OBJECT_0, 0), (_GetExitCodeProcess, <built-in function GetExitCodeProcess>)
          +  _get_handles(self, stdin, stdout, stderr)
          +  _execute_child(self, args, executable, preexec_fn, close_fds, cwd, env, universal_newlines, startupinfo, creationflags, shell, to_close, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite)
          +  poll(self)
          +  __init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags)
        	  	  Default_Args:(bufsize, 0), (executable, None), (stdin, None), (stdout, None), (stderr, None), (preexec_fn, None), (close_fds, False), (shell, False), (cwd, None), (env, None), (universal_newlines, False), (startupinfo, None), (creationflags, 0)
          +  wait(self)
          +  _find_w9xpopen(self)
          +  _translate_newlines(self, data)
          +  _communicate(self, input)
          +  send_signal(self, sig)
      +Func: _can_target(cmd, arch)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env

 
Module: numpy.distutils.fcompiler.hpux-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: HPUXFCompiler
          +  get_library_dirs(self)
          +  get_flags(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, 0), (ok_status, 256, 0, 1)
          +  get_flags_opt(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.ibm-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IBMFCompiler
          +  get_flags(self)
          +  get_version(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)

 
Module: numpy.distutils.fcompiler.intel-------------------------------------------------
    
   +Class: BaseIntelFCompiler
          +  update_executables(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IntelEM64TFCompiler
          +  get_flags_opt(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelEM64VisualFCompiler
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelFCompiler
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_free(self)
          +  get_flags_arch(self)
    
   +Class: IntelItaniumFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelItaniumVisualFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelVisualFCompiler
          +  update_executables(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_free(self)
          +  get_flags_debug(self)
      +Func: intel_version_match(type)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.lahey-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: LaheyFCompiler
          +  get_library_dirs(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.mips-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: MIPSFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_arch_f77(self)
          +  get_flags_arch_f90(self)

 
Module: numpy.distutils.fcompiler.nag-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NAGFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.fcompiler.none-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NoneFCompiler
          +  find_executables(self)

 
Module: numpy.distutils.fcompiler.pathf95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PathScaleFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.pg-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PGroupFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.sun-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: SunFCompiler
          +  get_arch(self)
          +  get_flags_f77(self)
          +  matcher(self, version_string)
          +  get_libraries(self)
          +  get_opt(self)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.vast-------------------------------------------------
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: VastFCompiler
          +  find_executables(self)
          +  get_version_cmd(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.from_template-------------------------------------------------
      +Func: conv(astr)
      +Func: expand_sub(substr, names)
      +Func: find_repl_patterns(astr)
      +Func: parse_structure(astr)
      +Func: process_file(source)
      +Func: process_str(allstr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.info-------------------------------------------------
    (No members)

 
Module: numpy.distutils.intelccompiler-------------------------------------------------
    
   +Class: IntelCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelEM64TCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelItaniumCCompiler
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})

 
Module: numpy.distutils.lib2def-------------------------------------------------
      +Func: getnm(nm_cmd)
    	  	  Default_Args:(nm_cmd, nm, -Cs, python27.lib)
      +Func: output_def(dlist, flist, header, file)
    	  	  Default_Args:(file, <IPython.kernel.zmq.iostream.OutStream object at 0x0000000019534358>)
      +Func: parse_nm(nm_output)

 
Module: numpy.distutils.line_endings-------------------------------------------------
      +Func: dos2unix(file)
      +Func: dos2unix_dir(dir_name)
      +Func: dos2unix_one_dir(modified_files, dir_name, file_names)
      +Func: unix2dos(file)
      +Func: unix2dos_dir(dir_name)
      +Func: unix2dos_one_dir(modified_files, dir_name, file_names)

 
Module: numpy.distutils.log-------------------------------------------------
    
   +Class: Log
          +  good(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
      +Func: _fix_args(args, flag)
    	  	  Default_Args:(flag, 1)
      +Func: cyan_text(s)
      +Func: debug(self, msg)
    	   Positional_Args: args
      +Func: default_text(s)
      +Func: error(self, msg)
    	   Positional_Args: args
      +Func: fatal(self, msg)
    	   Positional_Args: args
      +Func: good(self, msg)
    	   Positional_Args: args
      +Func: green_text(s)
      +Func: info(self, msg)
    	   Positional_Args: args
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: log(self, level, msg)
    	   Positional_Args: args
    
   +Class: Log
          +  info(self, msg)
        	   Positional_Args: args
          +  log(self, level, msg)
        	   Positional_Args: args
          +  error(self, msg)
        	   Positional_Args: args
          +  warn(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
          +  debug(self, msg)
        	   Positional_Args: args
          +  fatal(self, msg)
        	   Positional_Args: args
          +  __init__(self, threshold)
        	  	  Default_Args:(threshold, 3)
      +Func: red_text(s)
      +Func: set_threshold(level, force)
    	  	  Default_Args:(force, False)
      +Func: set_verbosity(v, force)
    	  	  Default_Args:(force, False)
      +Func: warn(self, msg)
    	   Positional_Args: args

 
Module: numpy.distutils.mingw32ccompiler-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: Mingw32CCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
    
   +Class: StrictVersion
          +  __str__(self)
          +  __cmp__(self, other)
          +  parse(self, vstring)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: build_msvcr_library(debug)
    	  	  Default_Args:(debug, False)
      +Func: check_embedded_msvcr_match_linked(msver)
      +Func: configtest_name(config)
      +Func: dump_table(dll)
      +Func: find_dll(dll_name)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: generate_def(dll, dfile)
      +Func: generate_manifest(config)
      +Func: manifest_name(config)
      +Func: manifest_rc(name, type)
    	  	  Default_Args:(type, dll)
      +Func: msvc_manifest_xml(maj, min)
      +Func: rc_name(config)

 
Module: numpy.distutils.misc_util-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
    
   +Class: DistutilsError
        (No members)
    
   +Class: InstallableLib
          +  __init__(self, name, build_info, target_dir)
      +Func: _fix_paths(paths, local_path, include_non_existing)
      +Func: _get_directories(list_of_sources)
      +Func: _get_f90_modules(source)
      +Func: _get_headers(directory_list)
      +Func: all_strings(lst)
      +Func: allpath(name)
      +Func: appendpath(prefix, path)
      +Func: as_list(seq)
      +Func: blue_text(s)
      +Func: colour_text(s, fg, bg)
    	  	  Default_Args:(fg, None), (bg, None)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: cyan_text(s)
      +Func: cyg2win32(path)
      +Func: default_config_dict(name, parent_name, local_path)
    	  	  Default_Args:(name, None), (parent_name, None), (local_path, None)
      +Func: default_text(s)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    	   Positional_Args: args
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: filter_sources(sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: general_source_directories_files(top_path)
      +Func: general_source_files(top_path)
      +Func: generate_config_py(target)
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_data_files(data)
      +Func: get_dependencies(sources)
      +Func: get_ext_source_files(ext)
      +Func: get_frame(level)
    	  	  Default_Args:(level, 0)
      +Func: get_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_language(sources)
      +Func: get_lib_source_files(lib)
      +Func: get_mathlibs(path)
    	  	  Default_Args:(path, None)
      +Func: get_path_from_frame(frame, parent_path)
    	  	  Default_Args:(parent_path, None)
      +Func: get_pkg_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_script_files(scripts)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: gpaths(paths, local_path, include_non_existing)
    	  	  Default_Args:(local_path, ), (include_non_existing, True)
      +Func: green_text(s)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_glob_pattern(s)
      +Func: is_local_src_dir(directory)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: minrelpath(path)
      +Func: msvc_version(compiler)
    	   Positional_Args: path
      +Func: quote_args(args)
      +Func: red_text(s)
      +Func: rel_path(path, parent_path)
      +Func: yellow_text(s)

 
Module: numpy.distutils.npy_pkg_config-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: SafeConfigParser
          +  set(self, section, option, value)
        	  	  Default_Args:(value, None)
          +  _interpolate_some(self, option, accum, rest, section, map, depth)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: _escape_backslash(val)
      +Func: _read_config_imp(filenames, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_config(filename, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_flags(line)
      +Func: parse_meta(config)
      +Func: parse_sections(config)
      +Func: parse_variables(config)
      +Func: pkg_to_filename(pkg_name)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.numpy_distribution-------------------------------------------------
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)

 
Module: numpy.distutils.pathccompiler-------------------------------------------------
    
   +Class: PathScaleCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)

 
Module: numpy.distutils.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.distutils.system_info-------------------------------------------------
    
   +Class: AtlasNotFoundError
        (No members)
    
   +Class: BlasNotFoundError
        (No members)
    
   +Class: BlasSrcNotFoundError
        (No members)
    
   +Class: ConfigParser
          +  get(self, section, option, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolation_replace(self, match)
          +  items(self, section, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: DJBFFTNotFoundError
        (No members)
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: DistutilsError
        (No members)
    
   +Class: FFTWNotFoundError
        (No members)
    
   +Class: LapackNotFoundError
        (No members)
    
   +Class: LapackSrcNotFoundError
        (No members)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: NotFoundError
        (No members)
    
   +Class: NumericNotFoundError
        (No members)
    
   +Class: Numeric_info
        (No members)
    
   +Class: UmfpackNotFoundError
        (No members)
    
   +Class: X11NotFoundError
        (No members)
    
   +Class: _numpy_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: _pkg_config_info
          +  calc_info(self)
          +  get_config_exe(self)
          +  get_config_output(self, config_exe, option)
    
   +Class: agg2_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: amd_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_threads_info
        (No members)
    
   +Class: atlas_3_10_info
        (No members)
    
   +Class: atlas_3_10_threads_info
        (No members)
    
   +Class: atlas_blas_info
          +  calc_info(self)
    
   +Class: atlas_blas_threads_info
        (No members)
    
   +Class: atlas_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: atlas_threads_info
        (No members)
    
   +Class: blas_info
          +  calc_info(self)
    
   +Class: blas_mkl_info
        (No members)
    
   +Class: blas_opt_info
          +  calc_info(self)
    
   +Class: blas_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: boost_python_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
    	   Positional_Args: args
    	   Keyword_Args: kws
    
   +Class: dfftw_info
        (No members)
    
   +Class: dfftw_threads_info
        (No members)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    
   +Class: djbfft_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
    
   +Class: f2py_info
          +  calc_info(self)
    
   +Class: fft_opt_info
          +  calc_info(self)
    
   +Class: fftw2_info
        (No members)
    
   +Class: fftw3_info
        (No members)
    
   +Class: fftw_info
          +  calc_ver_info(self, ver_param)
          +  calc_info(self)
    
   +Class: fftw_threads_info
        (No members)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
    
   +Class: freetype2_info
        (No members)
    
   +Class: gdk_2_info
        (No members)
    
   +Class: gdk_info
        (No members)
    
   +Class: gdk_pixbuf_2_info
        (No members)
    
   +Class: gdk_pixbuf_xlib_2_info
        (No members)
    
   +Class: gdk_x11_2_info
        (No members)
    	   Keyword_Args: config
      +Func: get_info(name, notfound_action)
    	  	  Default_Args:(notfound_action, 0)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: get_standard_file(fname)
      +Func: glob(pathname)
    
   +Class: gtkp_2_info
        (No members)
    
   +Class: gtkp_x11_2_info
        (No members)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    
   +Class: lapack_atlas_3_10_info
        (No members)
    
   +Class: lapack_atlas_3_10_threads_info
        (No members)
    
   +Class: lapack_atlas_info
        (No members)
    
   +Class: lapack_atlas_threads_info
        (No members)
    
   +Class: lapack_info
          +  calc_info(self)
    
   +Class: lapack_mkl_info
          +  calc_info(self)
    
   +Class: lapack_opt_info
          +  calc_info(self)
    
   +Class: lapack_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: libpaths(paths, bits)
    
   +Class: mkl_info
          +  calc_info(self)
          +  get_mkl_rootdir(self)
          +  __init__(self)
    
   +Class: numarray_info
        (No members)
    
   +Class: numerix_info
          +  calc_info(self)
    
   +Class: numpy_info
        (No members)
    
   +Class: openblas_info
          +  calc_info(self)
          +  check_embedded_lapack(self, info)
    
   +Class: openblas_lapack_info
          +  check_embedded_lapack(self, info)
      +Func: parseCmdLine(argv)
    	  	  Default_Args:(argv, (None,))
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
    
   +Class: sfftw_info
        (No members)
    
   +Class: sfftw_threads_info
        (No members)
      +Func: show_all(argv)
    	  	  Default_Args:(argv, None)
    
   +Class: system_info
          +  get_lib_dirs(self, key)
        	  	  Default_Args:(key, library_dirs)
          +  check_libs(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  has_info(self)
          +  get_info(self, notfound_action)
        	  	  Default_Args:(notfound_action, 0)
          +  get_libs(self, key, default)
          +  __init__(self, default_lib_dirs, default_include_dirs, verbosity)
        	  	  Default_Args:(default_lib_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib, C:\\, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\libs), (default_include_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\include), (verbosity, 1)
          +  combine_paths(self)
        	   Positional_Args: args
          +  _lib_list(self, lib_dir, libs, exts)
          +  _check_libs(self, lib_dirs, libs, opt_libs, exts)
          +  parse_config_files(self)
          +  get_include_dirs(self, key)
        	  	  Default_Args:(key, include_dirs)
          +  get_paths(self, section, key)
          +  check_libs2(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  get_libraries(self, key)
        	  	  Default_Args:(key, libraries)
          +  library_extensions(self)
          +  set_info(self)
        	   Keyword_Args: info
          +  calc_libraries_info(self)
          +  get_src_dirs(self, key)
        	  	  Default_Args:(key, src_dirs)
    
   +Class: umfpack_info
          +  calc_info(self)
    
   +Class: wx_info
        (No members)
    
   +Class: x11_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: xft_info
        (No members)

 
Module: numpy.distutils.unixccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: LibError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: NoneType
        (No members)
    
   +Class: str
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
      +Func: UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
    	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: newer(source, target)
      +Func: replace_method(klass, method_name, func)

 
Module: numpy.doc-------------------------------------------------
    (No members)

 
Module: numpy.doc.basics-------------------------------------------------
    (No members)

 
Module: numpy.doc.broadcasting-------------------------------------------------
    (No members)

 
Module: numpy.doc.byteswapping-------------------------------------------------
    (No members)

 
Module: numpy.doc.constants-------------------------------------------------
    (No members)

 
Module: numpy.doc.creation-------------------------------------------------
    (No members)

 
Module: numpy.doc.glossary-------------------------------------------------
    (No members)

 
Module: numpy.doc.howtofind-------------------------------------------------
    (No members)

 
Module: numpy.doc.indexing-------------------------------------------------
    (No members)

 
Module: numpy.doc.internals-------------------------------------------------
    (No members)

 
Module: numpy.doc.io-------------------------------------------------
    (No members)

 
Module: numpy.doc.jargon-------------------------------------------------
    (No members)

 
Module: numpy.doc.methods_vs_functions-------------------------------------------------
    (No members)

 
Module: numpy.doc.misc-------------------------------------------------
    (No members)

 
Module: numpy.doc.performance-------------------------------------------------
    (No members)

 
Module: numpy.doc.structured_arrays-------------------------------------------------
    (No members)

 
Module: numpy.doc.subclassing-------------------------------------------------
    (No members)

 
Module: numpy.doc.ufuncs-------------------------------------------------
    (No members)

 
Module: numpy.dual-------------------------------------------------
      +Func: cholesky(a, lower, overwrite_a, check_finite)
    	  	  Default_Args:(lower, False), (overwrite_a, False), (check_finite, True)
      +Func: det(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(b, None), (left, False), (right, True), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (eigvals_only, False), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: eigvals(a, b, overwrite_a, check_finite)
    	  	  Default_Args:(b, None), (overwrite_a, False), (check_finite, True)
      +Func: eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: inv(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(cond, None), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: norm(a, ord)
    	  	  Default_Args:(ord, None)
      +Func: pinv2(a, cond, rcond, return_rank, check_finite)
    	  	  Default_Args:(cond, None), (rcond, None), (return_rank, False), (check_finite, True)
      +Func: register_func(name, func)
      +Func: restore_func(name)
      +Func: solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
    	  	  Default_Args:(sym_pos, False), (lower, False), (overwrite_a, False), (overwrite_b, False), (debug, False), (check_finite, True)
      +Func: svd(a, full_matrices, compute_uv, overwrite_a, check_finite)
    	  	  Default_Args:(full_matrices, True), (compute_uv, True), (overwrite_a, False), (check_finite, True)

 
Module: numpy.f2py-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: compile(source, modulename, extra_args, verbose, source_fn)
    	  	  Default_Args:(modulename, untitled), (extra_args, ), (verbose, 1), (source_fn, None)
      +Func: run_main(comline_list)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.f2py.__version__-------------------------------------------------
    (No members)

 
Module: numpy.f2py.auxfuncs-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _isstring(var)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.capi_maps-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cb_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildcallback(rout, um)
      +Func: buildcallbacks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cfuncs-------------------------------------------------
      +Func: append_needs(need, flag)
    	  	  Default_Args:(flag, 1)
      +Func: write(self, string)

 
Module: numpy.f2py.common_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findcommonblocks(block, top)
    	  	  Default_Args:(top, 1)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.crackfortran-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _calc_depend_dict(vars)
      +Func: _ensure_exprdict(r)
      +Func: _eval_length(length, params)
      +Func: _eval_scalar(value, params)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _get_depend_dict(name, vars, deps)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
      +Func: _is_intent_callback(vdecl)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _kind_func(string)
      +Func: _resolvenameargspattern(line)
      +Func: _selected_int_kind_func(r)
      +Func: _selected_real_kind_func(p, r, radix)
    	  	  Default_Args:(r, 0), (radix, 0)
      +Func: _simplifyargs(argsline)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: analyzeargs(block)
      +Func: analyzebody(block, args, tab)
    	  	  Default_Args:(tab, )
      +Func: analyzecommon(block)
      +Func: analyzeline(m, case, line)
      +Func: analyzevars(block)
      +Func: appenddecl(decl, decl2, force)
    	  	  Default_Args:(force, 1)
      +Func: appendmultiline(group, context_name, ml)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildimplicitrules(block)
      +Func: common2fortran(common, tab)
    	  	  Default_Args:(tab, )
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: crack2fortran(block)
      +Func: crack2fortrangen(block, tab, as_interface)
    	  	  Default_Args:(tab, \n), (as_interface, False)
      +Func: crackfortran(files)
      +Func: crackline(line, reset)
    	  	  Default_Args:(reset, 0)
      +Func: cracktypespec(typespec, selector)
      +Func: cracktypespec0(typespec, ll)
      +Func: debugcapi(var)
      +Func: determineexprtype(expr, vars, rules)
    	  	  Default_Args:(rules, {})
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: expr2name(a, block, args)
    	  	  Default_Args:(args, )
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: get_parameters(vars, global_params)
    	  	  Default_Args:(global_params, {})
      +Func: get_sorted_names(vars)
      +Func: get_usedict(block)
      +Func: get_useparameters(block, param_map)
    	  	  Default_Args:(param_map, None)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrlen(dl, args, star)
    	  	  Default_Args:(star, *)
      +Func: getblockname(block, unknown)
    	  	  Default_Args:(unknown, unknown)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getextension(name)
      +Func: getfortranname(rout)
      +Func: getlincoef(e, xset)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: is_free_format(file)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markinnerspaces(line)
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: markouterparen(line)
      +Func: myeval(e, g, l)
    	  	  Default_Args:(g, None), (l, None)
      +Func: outmess(line, flag)
    	  	  Default_Args:(flag, 1)
      +Func: postcrack(block, args, tab)
    	  	  Default_Args:(args, None), (tab, )
      +Func: postcrack2(block, tab, param_map)
    	  	  Default_Args:(tab, ), (param_map, None)
      +Func: readfortrancode(ffile, dowithline, istop)
    	  	  Default_Args:(dowithline, <function show at 0x00000000221C0A58>), (istop, 1)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: removespaces(expr)
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: rmbadname1(name)
      +Func: setattrspec(decl, attr, force)
    	  	  Default_Args:(force, 0)
      +Func: setcharselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setkindselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setmesstext(block)
      +Func: show(o, f)
    	  	  Default_Args:(f, 0)
      +Func: sortvarnames(vars)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: true_intent_list(var)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)
      +Func: unmarkouterparen(line)
      +Func: updatevars(typespec, selector, attrspec, entitydecl)
      +Func: use2fortran(use, tab)
    	  	  Default_Args:(tab, )
      +Func: vars2fortran(block, vars, args, tab, as_interface)
    	  	  Default_Args:(tab, ), (as_interface, False)

 
Module: numpy.f2py.diagnose-------------------------------------------------
      +Func: run_command(cmd)

 
Module: numpy.f2py.f2py2e-------------------------------------------------
      +Func: buildmodules(lst)
      +Func: callcrackfortran(files, options)
      +Func: dict_append(d_out, d_in)
      +Func: write(self, string)
      +Func: filter_files(prefix, suffix, files, remove_prefix)
    	  	  Default_Args:(remove_prefix, None)
      +Func: get_prefix(module)
      +Func: outmess(t)
      +Func: run_main(comline_list)
      +Func: scaninputline(inputline)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)

 
Module: numpy.f2py.f2py_testing-------------------------------------------------
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: run(runtest, test_functions, repeat)
    	  	  Default_Args:(repeat, 1)

 
Module: numpy.f2py.f90mod_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(pymod)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findf90modules(m)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)

 
Module: numpy.f2py.func2subr-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: assubr(rout)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: createfuncwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: createsubrwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: var2fixfortran(vars, a, fa, f90mode)
    	  	  Default_Args:(fa, None), (f90mode, None)

 
Module: numpy.f2py.info-------------------------------------------------
    (No members)

 
Module: numpy.f2py.rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildapi(rout)
      +Func: buildmodule(m, um)
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.setup-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: newer(source, target)
    	   Keyword_Args: attr

 
Module: numpy.f2py.use_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildusevar(name, realname, vars, usemodulename)
      +Func: buildusevars(m, r)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.fft-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.fft.fftpack-------------------------------------------------
      +Func: _cook_nd_args(a, s, axes, invreal)
    	  	  Default_Args:(s, None), (axes, None), (invreal, 0)
      +Func: _raw_fft(a, n, axis, init_function, work_function, fft_cache)
    	  	  Default_Args:(n, None), (axis, -1), (init_function, <built-in function cffti>), (work_function, <built-in function cfftf>), (fft_cache, {})
      +Func: _raw_fftnd(a, s, axes, function)
    	  	  Default_Args:(s, None), (axes, None), (function, <function fft at 0x00000000031A5D68>)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: shape(a)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.fft.fftpack_lite-------------------------------------------------
    +Built-in Function: cfftb
    	-Method Arguments: None
    +Built-in Function: cfftf
    	-Method Arguments: None
    +Built-in Function: cffti
    	-Method Arguments: None
    
   +Class: error
        (No members)
    +Built-in Function: rfftb
    	-Method Arguments: None
    +Built-in Function: rfftf
    	-Method Arguments: None
    +Built-in Function: rffti
    	-Method Arguments: None

 
Module: numpy.fft.helper-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: integer
        (No members)
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)

 
Module: numpy.fft.info-------------------------------------------------
    (No members)

 
Module: numpy.fft.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.lib-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: RankWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    	   Positional_Args: args
      +Func: byte_bounds(a)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: fromregex(file, regexp, dtype)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: i0(x)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sinc(x)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: tile(A, reps)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
      +Func: vsplit(ary, indices_or_sections)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.lib._compiled_base-------------------------------------------------
    +Built-in Function: _insert
    	-Method Arguments: None
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
    
   +Class: Exception
        (No members)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib._datasource-------------------------------------------------
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: Repository
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  listdir(self)
          +  _fullpath(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, baseurl, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: _FileOpeners
          +  _load(self)
          +  __getitem__(self, key)
          +  keys(self)
          +  __init__(self)
    +Built-in Function: open
    	-Method Arguments:
name, mode, buffering
      +Func: open(path, mode, destpath)
    	  	  Default_Args:(mode, r), (destpath, .)

 
Module: numpy.lib._iotools-------------------------------------------------
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: complex
        (No members)
    
   +Class: str
        (No members)
      +Func: _is_bytes_like(obj)
      +Func: _is_string_like(obj)
      +Func: _to_filehandle(fname, flag, return_opened)
    	  	  Default_Args:(flag, r), (return_opened, False)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: bool
        (No members)
    
   +Class: str
        (No members)
    
   +Class: complex
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
    
   +Class: float
        (No members)
      +Func: has_nested_fields(ndtype)
    
   +Class: int
        (No members)
    
   +Class: object
        (No members)
    
   +Class: str
        (No members)
      +Func: str2bool(value)
    
   +Class: unicode
        (No members)

 
Module: numpy.lib._version-------------------------------------------------
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: basestring
        (No members)

 
Module: numpy.lib.arraypad-------------------------------------------------
      +Func: _append_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _arange_ndarray(arr, shape, axis, reverse)
    	  	  Default_Args:(reverse, False)
      +Func: _normalize_shape(narray, shape)
      +Func: _pad_ref(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_sym(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_wrap(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _round_ifneeded(arr, dtype)
      +Func: _validate_lengths(narray, number_elements)
    
   +Class: long
        (No members)
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs

 
Module: numpy.lib.arraysetops-------------------------------------------------
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)

 
Module: numpy.lib.arrayterator-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: long
        (No members)
    +Built-in Function: mul
    	-Method Arguments:
a, b
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial

 
Module: numpy.lib.financial-------------------------------------------------
      +Func: _convert_when(when)
      +Func: _g_div_gp(r, n, p, x, y, w)
      +Func: _rbl(rate, per, pmt, pv, when)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)

 
Module: numpy.lib.format-------------------------------------------------
      +Func: _check_version(version)
      +Func: _filter_header(s)
      +Func: _read_array_header(fp, version)
      +Func: _read_bytes(fp, size, error_template)
    	  	  Default_Args:(error_template, ran out of data)
      +Func: _write_array_header(fp, d, version)
    	  	  Default_Args:(version, None)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
      +Func: dtype_to_descr(dtype)
      +Func: header_data_from_array_1_0(array)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: magic(major, minor)
      +Func: open_memmap(filename, mode, dtype, shape, fortran_order, version)
    	  	  Default_Args:(mode, r+), (dtype, None), (shape, None), (fortran_order, False), (version, None)
      +Func: read_array(fp)
      +Func: read_array_header_1_0(fp)
      +Func: read_array_header_2_0(fp)
      +Func: read_magic(fp)
      +Func: safe_eval(source)
      +Func: write_array(fp, array, version)
    	  	  Default_Args:(version, None)
      +Func: write_array_header_1_0(fp, d)
      +Func: write_array_header_2_0(fp, d)

 
Module: numpy.lib.function_base-------------------------------------------------
      +Func: _chbevl(x, vals)
      +Func: _i0_1(x)
      +Func: _i0_2(x)
    +Built-in Function: _insert
    	-Method Arguments: None
      +Func: _median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
      +Func: extract(condition, arr)
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: i0(x)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
    
   +Class: int64
        (No members)
      +Func: isscalar(num)
      +Func: iterable(y)
      +Func: kaiser(M, beta)
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
    
   +Class: long
        (No members)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: msort(a)
    
   +Class: ndarray
        (No members)
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
    
   +Class: xrange
        (No members)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: sinc(x)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.index_tricks-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: CClass
          +  __init__(self)
    
   +Class: IndexExpression
          +  __getitem__(self, item)
          +  __init__(self, maketuple)
    
   +Class: RClass
          +  __init__(self)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    	   Positional_Args: args
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: nd_grid
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  __init__(self, sparse)
        	  	  Default_Args:(sparse, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib.info-------------------------------------------------
    (No members)

 
Module: numpy.lib.nanfunctions-------------------------------------------------
      +Func: _copyto(a, val, mask)
      +Func: _divide_by_count(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: _nanmedian(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanmedian1d(arr1d, overwrite_input)
    	  	  Default_Args:(overwrite_input, False)
      +Func: _nanmedian_small(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _nanpercentile1d(arr1d, q, overwrite_input, interpolation)
    	  	  Default_Args:(overwrite_input, False), (interpolation, linear)
      +Func: _replace_nan(a, val)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.lib.npyio-------------------------------------------------
    
   +Class: BagObj
          +  __getattribute__(self, key)
          +  __init__(self, obj)
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: NpzFile
          +  __exit__(self, exc_type, exc_value, traceback)
          +  __getitem__(self, key)
          +  __contains__(self, key)
          +  __del__(self)
          +  items(self)
          +  __enter__(self)
          +  keys(self)
          +  __iter__(self)
          +  __init__(self, fid, own_fid)
        	  	  Default_Args:(own_fid, False)
          +  iteritems(self)
          +  close(self)
          +  iterkeys(self)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: str
        (No members)
      +Func: _getconv(dtype)
      +Func: _is_string_like(obj)
      +Func: _savez(file, args, kwds, compress)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
      +Func: fromregex(file, regexp, dtype)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
      +Func: has_nested_fields(ndtype)
    
   +Class: itemgetter
        (No members)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: imap
        (No members)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: seek_gzip_factory(f)
    
   +Class: unicode
        (No members)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    	   Positional_Args: args
    	   Keyword_Args: kwargs

 
Module: numpy.lib.polynomial-------------------------------------------------
    
   +Class: RankWarning
        (No members)
      +Func: _raise_power(astr, wrap)
    	  	  Default_Args:(wrap, 70)
    	   Positional_Args: arys
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
      +Func: eigvals(a)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: hstack(tup)
      +Func: imag(val)
      +Func: inv(a)
      +Func: iscomplex(x)
      +Func: isscalar(num)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: real(val)
      +Func: roots(p)
      +Func: sort_complex(a)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)

 
Module: numpy.lib.recfunctions-------------------------------------------------
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _fix_defaults(output, defaults)
    	  	  Default_Args:(defaults, None)
      +Func: _fix_output(output, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: _is_string_like(obj)
      +Func: _izip_fields(iterable)
      +Func: _izip_fields_flat(iterable)
      +Func: append_fields(base, names, data, dtypes, fill_value, usemask, asrecarray)
    	  	  Default_Args:(dtypes, None), (fill_value, -1), (usemask, True), (asrecarray, False)
    
   +Class: basestring
        (No members)
      +Func: drop_fields(base, drop_names, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: find_duplicates(a, key, ignoremask, return_index)
    	  	  Default_Args:(key, None), (ignoremask, True), (return_index, False)
      +Func: flatten_descr(ndtype)
      +Func: get_fieldstructure(adtype, lastname, parents)
    	  	  Default_Args:(lastname, None), (parents, None)
      +Func: get_names(adtype)
      +Func: get_names_flat(adtype)
      +Func: izip_records(seqarrays, fill_value, flatten)
    	  	  Default_Args:(fill_value, None), (flatten, True)
      +Func: join_by(key, r1, r2, jointype, r1postfix, r2postfix, defaults, usemask, asrecarray)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None), (usemask, True), (asrecarray, False)
      +Func: merge_arrays(seqarrays, fill_value, flatten, usemask, asrecarray)
    	  	  Default_Args:(fill_value, -1), (flatten, False), (usemask, False), (asrecarray, False)
    
   +Class: ndarray
        (No members)
      +Func: rec_append_fields(base, names, data, dtypes)
    	  	  Default_Args:(dtypes, None)
      +Func: rec_drop_fields(base, drop_names)
      +Func: rec_join(key, r1, r2, jointype, r1postfix, r2postfix, defaults)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recursive_fill_fields(input, output)
      +Func: rename_fields(base, namemapper)
      +Func: stack_arrays(arrays, defaults, usemask, asrecarray, autoconvert)
    	  	  Default_Args:(defaults, None), (usemask, True), (asrecarray, False), (autoconvert, False)
    
   +Class: izip
        (No members)
      +Func: zip_descr(seqarrays, flatten)
    	  	  Default_Args:(flatten, False)

 
Module: numpy.lib.scimath-------------------------------------------------
      +Func: _fix_int_lt_zero(x)
      +Func: _fix_real_abs_gt_1(x)
      +Func: _fix_real_lt_zero(x)
      +Func: _tocomplex(arr)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: arccos(x)
      +Func: arcsin(x)
      +Func: arctanh(x)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: isreal(x)
      +Func: log(x)
      +Func: log10(x)
      +Func: log2(x)
      +Func: logn(n, x)
      +Func: power(x, p)
      +Func: sqrt(x)

 
Module: numpy.lib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: join(path)
    	   Positional_Args: paths

 
Module: numpy.lib.shape_base-------------------------------------------------
      +Func: _replace_zero_by_x_arrays(sub_arys)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
      +Func: column_stack(tup)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: expand_dims(a, axis)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: hsplit(ary, indices_or_sections)
      +Func: isscalar(num)
      +Func: kron(a, b)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: vstack(tup)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: tile(A, reps)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.stride_tricks-------------------------------------------------
    
   +Class: DummyArray
          +  __init__(self, interface, base)
        	  	  Default_Args:(base, None)
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
    	   Positional_Args: args

 
Module: numpy.lib.twodim_base-------------------------------------------------
      +Func: _min_int(low, high)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.type_check-------------------------------------------------
      +Func: _getmaxmin(t)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
    	   Positional_Args: arrays
      +Func: imag(val)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: nan_to_num(x)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: typename(char)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.ufunclike-------------------------------------------------
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)

 
Module: numpy.lib.user_array-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: container
          +  __int__(self)
          +  __ror__(self, other)
          +  __getslice__(self, i, j)
          +  __rsub__(self, other)
          +  astype(self, typecode)
          +  __rdiv__(self, other)
          +  __and__(self, other)
          +  __rmod__(self, other)
          +  __complex__(self)
          +  __rshift__(self, other)
          +  _rc(self, a)
          +  __abs__(self)
          +  __divmod__(self, other)
          +  __ixor__(self, other)
          +  __len__(self)
          +  __isub__(self, other)
          +  __rdivmod__(self, other)
          +  __invert__(self)
          +  tostring(self)
          +  __pow__(self, other)
          +  __lshift__(self, other)
          +  __gt__(self, other)
          +  __oct__(self)
          +  copy(self)
          +  __eq__(self, other)
          +  __rxor__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __mod__(self, other)
          +  __iadd__(self, other)
          +  __le__(self, other)
          +  _scalarfunc(self, func)
          +  byteswap(self)
          +  __irshift__(self, other)
          +  __long__(self)
          +  __ge__(self, other)
          +  __ne__(self, other)
          +  __add__(self, other)
          +  __mul__(self, other)
          +  __rrshift__(self, other)
          +  __imod__(self, other)
          +  __lt__(self, other)
          +  __init__(self, data, dtype, copy)
        	  	  Default_Args:(dtype, None), (copy, True)
          +  __array_wrap__(self)
        	   Positional_Args: args
          +  __rand__(self, other)
          +  __setattr__(self, attr, value)
          +  __iand__(self, other)
          +  __getitem__(self, index)
          +  __ipow__(self, other)
          +  __getattr__(self, attr)
          +  __pos__(self)
          +  __float__(self)
          +  __neg__(self)
          +  __rpow__(self, other)
          +  __idiv__(self, other)
          +  __setitem__(self, index, value)
          +  __or__(self, other)
          +  __add__(self, other)
          +  __sub__(self, other)
          +  __hex__(self)
          +  __ilshift__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  __xor__(self, other)
          +  __ior__(self, other)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __rlshift__(self, other)
    
   +Class: long
        (No members)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: shape(a)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)

 
Module: numpy.lib.utils-------------------------------------------------
    
   +Class: SafeEval
          +  visitExpression(self, node)
        	   Keyword_Args: kw
          +  visitDict(self, node)
        	   Keyword_Args: kw
          +  visitTuple(self, node)
        	   Keyword_Args: kw
          +  default(self, node)
        	   Keyword_Args: kw
          +  visitName(self, node)
        	   Keyword_Args: kw
          +  visit(self, node)
        	   Keyword_Args: kw
          +  visitUnarySub(self, node)
        	   Keyword_Args: kw
          +  visitConst(self, node)
        	   Keyword_Args: kw
          +  visitList(self, node)
        	   Keyword_Args: kw
          +  visitUnaryAdd(self, node)
        	   Keyword_Args: kw
    
   +Class: _Deprecate
          +  __call__(self, func)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, old_name, new_name, message)
        	  	  Default_Args:(old_name, None), (new_name, None), (message, None)
      +Func: _getmembers(item)
      +Func: _info(obj, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: _lookfor_generate_cache(module, import_modules, regenerate)
      +Func: _makenamedict(module)
    	  	  Default_Args:(module, numpy)
      +Func: _set_function_name(func, name)
      +Func: _split_line(name, arguments, width)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: byte_bounds(a)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
    
   +Class: ndarray
        (No members)
      +Func: safe_eval(source)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
    
   +Class: ufunc
        (No members)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: cholesky(a)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
      +Func: det(a)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: inv(a)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.linalg._umath_linalg-------------------------------------------------
    (No members)

 
Module: numpy.linalg.info-------------------------------------------------
    (No members)

 
Module: numpy.linalg.lapack_lite-------------------------------------------------
    
   +Class: LapackError
        (No members)
    +Built-in Function: dgelsd
    	-Method Arguments: None
    +Built-in Function: dgeqrf
    	-Method Arguments: None
    +Built-in Function: dorgqr
    	-Method Arguments: None
    +Built-in Function: xerbla
    	-Method Arguments: None
    +Built-in Function: zgelsd
    	-Method Arguments: None
    +Built-in Function: zgeqrf
    	-Method Arguments: None
    +Built-in Function: zungqr
    	-Method Arguments: None

 
Module: numpy.linalg.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
      +Func: _complexType(t, default)
    	  	  Default_Args:(default, <type numpy.complex128>)
      +Func: _convertarray(a)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: _fastCopyAndTranspose(type)
    	   Positional_Args: arrays
      +Func: _linalgRealType(t)
      +Func: _makearray(a)
      +Func: _multi_svd_norm(x, row_axis, col_axis, op)
      +Func: _raise_linalgerror_eigenvalues_nonconvergence(err, flag)
      +Func: _raise_linalgerror_nonposdef(err, flag)
      +Func: _raise_linalgerror_singular(err, flag)
      +Func: _raise_linalgerror_svd_nonconvergence(err, flag)
      +Func: _realType(t, default)
    	  	  Default_Args:(default, <type numpy.float64>)
    	   Positional_Args: arrays
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: str
        (No members)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
    
   +Class: broadcast
        (No members)
    
   +Class: complex128
        (No members)
      +Func: cholesky(a)
    
   +Class: complexfloating
        (No members)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
    
   +Class: complex64
        (No members)
      +Func: det(a)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: int32
        (No members)
      +Func: get_linalg_error_extobj(callback)
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: inexact
        (No members)
    
   +Class: int32
        (No members)
      +Func: inv(a)
      +Func: isComplexType(t)
    
   +Class: float64
        (No members)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
    
   +Class: float32
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.linalg.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: common_fill_value(a, b)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)

 
Module: numpy.ma.bench-------------------------------------------------
      +Func: compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(nloop, 500), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
    	  	  Default_Args:(nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (ys, array( 0.34843229, -0.10939329,  0.62696634,
        0.94232586, -0.06726402,  0.03514856)), (nmys, masked_array(data =
 -- -0.10939329482826499 --
 0.9423258562761581 -0.06726401964733753 --,
             mask =
  True False  True
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
), (yl, array(-0.46249881, -0.05874306, -0.71484842, ...,  0.14061846,
         0.80100493,  0.53842998,
        0.7129914 , -0.90300466,  0.34166902, ..., -0.57858636,
        -0.52616738, -0.57006057,
       -0.56423836,  0.23460203, -0.43691832, ..., -0.47697874,
         0.29446437, -0.16488538,
       ..., 
        0.22230502,  0.86568315,  0.55734931, ..., -0.44402869,
        -0.2260675 , -0.69556173,
       -0.29070712,  0.73921475,  0.84455725, ...,  0.19090893,
        -0.90885152,  0.07729246,
       -0.70177409,  0.89406624, -0.35730562, ...,  0.85289606,
         0.1499418 ,  0.2239394 )), (nmyl, masked_array(data =
 -0.46249880999122217 -0.05874305688659032 -0.7148484224177971 ...,
  0.14061846335518458 0.8010049305123075 0.5384299756239201
 0.7129914005708506 -- 0.3416690187654263 ..., -0.5785863592262126
  -0.5261673775494202 -0.5700605652599355
 -0.5642383618298537 0.23460203408249392 -0.43691832119092533 ...,
  -0.476978743419465 0.2944643705191894 -0.1648853752385866
 ..., 
 0.22230502142300446 0.8656831471608304 0.5573493121728217 ...,
  -0.4440286904623043 -0.2260675040010951 -0.6955617327401138
 -0.29070711701496377 0.7392147529732043 0.8445572458954209 ...,
  0.19090893426129263 -- 0.0772924634518748
 -0.7017740927812843 0.8940662389667464 -0.3573056186125081 ...,
  0.852896064928353 0.149941795161332 0.22393939941941365,
             mask =
 False False False ..., False False False
 False  True False ..., False False False
 False False False ..., False False False
 ..., 
 False False False ..., False False False
 False False False ..., False  True False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(vars, x), (nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: timer(s, v, nloop, nrep)
    	  	  Default_Args:(v, ), (nloop, 500), (nrep, 3)

 
Module: numpy.ma.core-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedConstant
          +  __array_wrap__(self, obj)
          +  __str__(self)
          +  __reduce__(self)
          +  __array_finalize__(self, obj)
          +  __repr__(self)
          +  flatten(self)
    
   +Class: MaskedIterator
          +  __getitem__(self, indx)
          +  __next__(self)
          +  __setitem__(self, index, value)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, ma)
    
   +Class: _DomainCheckInterval
          +  __call__(self, x)
          +  __init__(self, a, b)
    
   +Class: _DomainGreater
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainGreaterEqual
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainSafeDivide
          +  __call__(self, a, b)
          +  __init__(self, tolerance)
        	  	  Default_Args:(tolerance, None)
    
   +Class: _DomainTan
          +  __call__(self, x)
          +  __init__(self, eps)
    
   +Class: _DomainedBinaryOperation
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, dbfunc, domain, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedBinaryOperation
          +  outer(self, a, b)
          +  __str__(self)
          +  reduce(self, target, axis, dtype)
        	  	  Default_Args:(axis, 0), (dtype, None)
          +  accumulate(self, target, axis)
        	  	  Default_Args:(axis, 0)
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, mbfunc, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedPrintOption
          +  enable(self, shrink)
        	  	  Default_Args:(shrink, 1)
          +  __str__(self)
          +  enabled(self)
          +  display(self)
          +  set_display(self, s)
          +  __str__(self)
          +  __init__(self, display)
    
   +Class: _MaskedUnaryOperation
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, mufunc, fill, domain)
        	  	  Default_Args:(fill, 0), (domain, None)
    
   +Class: _arraymethod
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, onmask)
        	  	  Default_Args:(onmask, True)
          +  __get__(self, obj, objtype)
        	  	  Default_Args:(objtype, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _check_mask_axis(mask, axis)
    
   +Class: _convert2ma
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, params)
        	  	  Default_Args:(params, None)
    
   +Class: _extrema_operation
          +  outer(self, a, b)
          +  reduce(self, target, axis)
        	  	  Default_Args:(axis, None)
          +  __call__(self, a, b)
        	  	  Default_Args:(b, None)
    
   +Class: _frommethod
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, methodname, reversed)
        	  	  Default_Args:(reversed, False)
      +Func: _mareconstruct(subtype, baseclass, baseshape, basetype)
    
   +Class: _maximum_operation
          +  __init__(self)
    
   +Class: _minimum_operation
          +  __init__(self)
      +Func: _recursive_extremum_fill_value(ndtype, extremum)
      +Func: _recursive_filled(a, mask, fill_value)
      +Func: _recursive_make_descr(datatype, newtype)
    	  	  Default_Args:(newtype, <type numpy.bool_>)
      +Func: _recursive_printoption(result, mask, printopt)
      +Func: _recursive_set_default_fill_value(dtypedescr)
      +Func: _recursive_set_fill_value(fillvalue, dtypedescr)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: common_fill_value(a, b)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: doc_note(initialdoc, note)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: fromfile(file, dtype, count, sep)
    	  	  Default_Args:(dtype, <type float>), (count, -1), (sep, )
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: get_fill_value(a)
      +Func: getmask(a)
    	   Positional_Args: arrays
      +Func: get_object_signature(obj)
      +Func: getargspec(func)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: iscomplexobj(x)
    
   +Class: float64
        (No members)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
    
   +Class: long
        (No members)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: expand_dims(a, axis)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.ma.extras-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: MAError
        (No members)
    
   +Class: MAxisConcatenator
          +  __init__(self, axis)
        	  	  Default_Args:(axis, 0)
          +  __getitem__(self, key)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: _covhelper(x, y, rowvar, allow_masked)
    	  	  Default_Args:(y, None), (rowvar, True), (allow_masked, True)
      +Func: _ezclump(mask)
    
   +Class: _fromnxfunction
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_inplace(seq)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: issequence(seq)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: make_mask_descr(ndtype)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
    
   +Class: mr_class
          +  __init__(self)
    
   +Class: ndarray
        (No members)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)

 
Module: numpy.ma.mrecords-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _checknames(descr, names)
    	  	  Default_Args:(names, None)
      +Func: _get_fieldmask(self)
      +Func: _getformats(data)
      +Func: _guessvartypes(arr)
      +Func: _mrreconstruct(subtype, baseclass, baseshape, basetype)
      +Func: addfield(mrecord, newfield, newfieldname)
    	  	  Default_Args:(newfieldname, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: dtype
        (No members)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fromarrays(arraylist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None)
      +Func: fromrecords(reclist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value, mask)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None), (mask, False)
      +Func: fromtextfile(fname, delimitor, commentchar, missingchar, varnames, vartypes)
    	  	  Default_Args:(delimitor, None), (commentchar, #), (missingchar, ), (varnames, None), (vartypes, None)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmaskarray(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: openfile(fname)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)

 
Module: numpy.ma.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma.testutils-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _assert_equal_on_sequences(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: almost(a, b, decimal, fill_value)
    	  	  Default_Args:(decimal, 6), (fill_value, True)
      +Func: approx(a, b, fill_value, rtol, atol)
    	  	  Default_Args:(fill_value, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_approx_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, fill_value)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (fill_value, True)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_equal_records(a, b)
      +Func: assert_mask_equal(m1, m2, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: fail_if_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
    
   +Class: float64
        (No members)
      +Func: getmask(a)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
    
   +Class: ndarray
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matlib-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: RankWarning
        (No members)
    
   +Class: VisibleDeprecationWarning
        (No members)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asscalar(a)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    	   Positional_Args: args
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
      +Func: byte_bounds(a)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
    
   +Class: dtype
        (No members)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
      +Func: empty(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(n, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
      +Func: fliplr(m)
      +Func: flipud(m)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: fromregex(file, regexp, dtype)
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
    
   +Class: generic
        (No members)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
    
   +Class: float16
        (No members)
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: hstack(tup)
      +Func: i0(x)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
    +Built-in Function: inner
    	-Method Arguments:
a, b
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
    
   +Class: int64
        (No members)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isfortran(a)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndarray
        (No members)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: ndim(a)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: packages
    	   Keyword_Args: options
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: rank(a)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: repmat(a, m, n)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
      +Func: sinc(x)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: tile(A, reps)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
    
   +Class: unsignedinteger
        (No members)
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: uint16
        (No members)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)
      +Func: zeros(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.matrixlib-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matrixlib.defmatrix-------------------------------------------------
      +Func: _convert_from_string(data)
      +Func: _eval(astr)
      +Func: _from_string(str, gdict, ldict)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: isscalar(num)
      +Func: issubdtype(arg1, arg2)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: matrix_power(M, n)

 
Module: numpy.matrixlib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.polynomial-------------------------------------------------
    
   +Class: Chebyshev
        (No members)
    
   +Class: Hermite
        (No members)
    
   +Class: HermiteE
        (No members)
    
   +Class: Laguerre
        (No members)
    
   +Class: Legendre
        (No members)
    
   +Class: Polynomial
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.polynomial._polybase-------------------------------------------------
    
   +Class: ABCMeta
          +  __instancecheck__(cls, instance)
          +  register(cls, subclass)
          +  __subclasscheck__(cls, subclass)
          +  _dump_registry(cls, file)
        	  	  Default_Args:(file, None)
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Number
        (No members)
      +Func: abstractmethod(funcobj)
    
   +Class: abstractproperty
        (No members)

 
Module: numpy.polynomial.chebyshev-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Chebyshev
        (No members)
      +Func: _cseries_to_zseries(c)
      +Func: _zseries_der(zs)
      +Func: _zseries_div(z1, z2)
      +Func: _zseries_int(zs)
      +Func: _zseries_mul(z1, z2)
      +Func: _zseries_to_cseries(zs)
      +Func: cheb2poly(c)
      +Func: chebadd(c1, c2)
      +Func: chebcompanion(c)
      +Func: chebder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: chebdiv(c1, c2)
      +Func: chebfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: chebfromroots(roots)
      +Func: chebgauss(deg)
      +Func: chebgrid2d(x, y, c)
      +Func: chebgrid3d(x, y, z, c)
      +Func: chebint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: chebline(off, scl)
      +Func: chebmul(c1, c2)
      +Func: chebmulx(c)
      +Func: chebpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: chebpts1(npts)
      +Func: chebpts2(npts)
      +Func: chebroots(c)
      +Func: chebsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: chebval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: chebval2d(x, y, c)
      +Func: chebval3d(x, y, z, c)
      +Func: chebvander(x, deg)
      +Func: chebvander2d(x, y, deg)
      +Func: chebvander3d(x, y, z, deg)
      +Func: chebweight(x)
      +Func: poly2cheb(pol)

 
Module: numpy.polynomial.hermite-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Hermite
        (No members)
      +Func: herm2poly(c)
      +Func: hermadd(c1, c2)
      +Func: hermcompanion(c)
      +Func: hermder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermdiv(c1, c2)
      +Func: hermfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermfromroots(roots)
      +Func: hermgauss(deg)
      +Func: hermgrid2d(x, y, c)
      +Func: hermgrid3d(x, y, z, c)
      +Func: hermint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermline(off, scl)
      +Func: hermmul(c1, c2)
      +Func: hermmulx(c)
      +Func: hermpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermroots(c)
      +Func: hermsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermval2d(x, y, c)
      +Func: hermval3d(x, y, z, c)
      +Func: hermvander(x, deg)
      +Func: hermvander2d(x, y, deg)
      +Func: hermvander3d(x, y, z, deg)
      +Func: hermweight(x)
      +Func: poly2herm(pol)

 
Module: numpy.polynomial.hermite_e-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: HermiteE
        (No members)
      +Func: herme2poly(c)
      +Func: hermeadd(c1, c2)
      +Func: hermecompanion(c)
      +Func: hermeder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermediv(c1, c2)
      +Func: hermefit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermefromroots(roots)
      +Func: hermegauss(deg)
      +Func: hermegrid2d(x, y, c)
      +Func: hermegrid3d(x, y, z, c)
      +Func: hermeint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermeline(off, scl)
      +Func: hermemul(c1, c2)
      +Func: hermemulx(c)
      +Func: hermepow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermeroots(c)
      +Func: hermesub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermeval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermeval2d(x, y, c)
      +Func: hermeval3d(x, y, z, c)
      +Func: hermevander(x, deg)
      +Func: hermevander2d(x, y, deg)
      +Func: hermevander3d(x, y, z, deg)
      +Func: hermeweight(x)
      +Func: poly2herme(pol)

 
Module: numpy.polynomial.laguerre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Laguerre
        (No members)
      +Func: lag2poly(c)
      +Func: lagadd(c1, c2)
      +Func: lagcompanion(c)
      +Func: lagder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: lagdiv(c1, c2)
      +Func: lagfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: lagfromroots(roots)
      +Func: laggauss(deg)
      +Func: laggrid2d(x, y, c)
      +Func: laggrid3d(x, y, z, c)
      +Func: lagint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: lagline(off, scl)
      +Func: lagmul(c1, c2)
      +Func: lagmulx(c)
      +Func: lagpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: lagroots(c)
      +Func: lagsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: lagval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: lagval2d(x, y, c)
      +Func: lagval3d(x, y, z, c)
      +Func: lagvander(x, deg)
      +Func: lagvander2d(x, y, deg)
      +Func: lagvander3d(x, y, z, deg)
      +Func: lagweight(x)
      +Func: poly2lag(pol)

 
Module: numpy.polynomial.legendre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Legendre
        (No members)
      +Func: leg2poly(c)
      +Func: legadd(c1, c2)
      +Func: legcompanion(c)
      +Func: legder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: legdiv(c1, c2)
      +Func: legfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: legfromroots(roots)
      +Func: leggauss(deg)
      +Func: leggrid2d(x, y, c)
      +Func: leggrid3d(x, y, z, c)
      +Func: legint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: legline(off, scl)
      +Func: legmul(c1, c2)
      +Func: legmulx(c)
      +Func: legpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: legroots(c)
      +Func: legsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: legval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: legval2d(x, y, c)
      +Func: legval3d(x, y, z, c)
      +Func: legvander(x, deg)
      +Func: legvander2d(x, y, deg)
      +Func: legvander3d(x, y, z, deg)
      +Func: legweight(x)
      +Func: poly2leg(pol)

 
Module: numpy.polynomial.polynomial-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Polynomial
        (No members)
      +Func: polyadd(c1, c2)
      +Func: polycompanion(c)
      +Func: polyder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: polydiv(c1, c2)
      +Func: polyfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: polyfromroots(roots)
      +Func: polygrid2d(x, y, c)
      +Func: polygrid3d(x, y, z, c)
      +Func: polyint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: polyline(off, scl)
      +Func: polymul(c1, c2)
      +Func: polymulx(c)
      +Func: polypow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, None)
      +Func: polyroots(c)
      +Func: polysub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: polyval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: polyval2d(x, y, c)
      +Func: polyval3d(x, y, z, c)
      +Func: polyvander(x, deg)
      +Func: polyvander2d(x, y, deg)
      +Func: polyvander3d(x, y, z, deg)

 
Module: numpy.polynomial.polyutils-------------------------------------------------
    
   +Class: PolyBase
        (No members)
    
   +Class: PolyDomainError
        (No members)
    
   +Class: PolyError
        (No members)
    
   +Class: RankWarning
        (No members)
      +Func: as_series(alist, trim)
    	  	  Default_Args:(trim, True)
      +Func: getdomain(x)
      +Func: mapdomain(x, old, new)
      +Func: mapparms(old, new)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: trimseq(seq)

 
Module: numpy.polynomial.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.random-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.info-------------------------------------------------
    (No members)

 
Module: numpy.random.mtrand-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    +Built-in Function: _shape_from_size
    	-Method Arguments: None
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: dirname(p)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: newer(source, target)
      +Func: split(p)

 
Module: numpy.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.testing.decorators-------------------------------------------------
      +Func: deprecated(conditional)
    	  	  Default_Args:(conditional, True)
      +Func: knownfailureif(fail_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: setastest(tf)
    	  	  Default_Args:(tf, True)
      +Func: skipif(skip_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: slow(t)

 
Module: numpy.testing.noseclasses-------------------------------------------------
    
   +Class: ErrorClass
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: errorClasses
        	   Keyword_Args: kw
    
   +Class: ErrorClassPlugin
          +  addError(self, test, err)
          +  patchResult(self, result)
          +  prepareTestResult(self, result)
    
   +Class: KnownFailure
          +  configure(self, options, conf)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
    
   +Class: KnownFailureTest
        (No members)
    
   +Class: NumpyDocTestCase
          +  __init__(self, test, optionflags, setUp, tearDown, checker, obj, result_var)
        	  	  Default_Args:(optionflags, 0), (setUp, None), (tearDown, None), (checker, None), (obj, None), (result_var, _)
    
   +Class: NumpyDocTestFinder
          +  _find(self, tests, obj, name, module, source_lines, globs, seen)
          +  _from_module(self, module, object)
    
   +Class: NumpyDoctest
          +  afterContext(self)
          +  loadTestsFromModule(self, module)
          +  wantFile(self, file)
          +  set_test_context(self, test)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
          +  configure(self, options, config)
    
   +Class: NumpyOutputChecker
          +  check_output(self, want, got, optionflags)
    
   +Class: NumpyTestProgram
          +  runTests(self)
    
   +Class: Plugin
          +  tolist(self, val)
          +  addOptions(self, parser, env)
        	  	  Default_Args:(env, None)
          +  configure(self, options, conf)
          +  add_options(self, parser, env)
        	  	  Default_Args:(env, None)
          +  options(self, parser, env)
          +  __init__(self)
          +  help(self)
    
   +Class: Unplugger
          +  options(self, parser, env)
          +  __init__(self, to_unplug)
        	  	  Default_Args:(to_unplug, doctest)
          +  configure(self, options, config)
      +Func: get_package_name(filepath)
      +Func: src(filename)

 
Module: numpy.testing.nosetester-------------------------------------------------
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    
   +Class: basestring
        (No members)
      +Func: get_package_name(filepath)
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)

 
Module: numpy.testing.print_coercion_tables-------------------------------------------------
    
   +Class: GenericObject
          +  __radd__(self, other)
          +  __add__(self, other)
          +  __init__(self, v)
      +Func: print_cancast_table(ntypes)
      +Func: print_coercion_table(ntypes, inputfirstvalue, inputsecondvalue, firstarray, use_promote_types)
    	  	  Default_Args:(use_promote_types, False)

 
Module: numpy.testing.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing.utils-------------------------------------------------
      +Func: GetPerformanceAttributes(object, counter, instance, inum, format, machine)
    	  	  Default_Args:(instance, None), (inum, -1), (format, None), (machine, None)
    
   +Class: IgnoreException
        (No members)
    
   +Class: StringIO
          +  isatty(self)
          +  truncate(self, size)
        	  	  Default_Args:(size, None)
          +  read(self, n)
        	  	  Default_Args:(n, -1)
          +  writelines(self, iterable)
          +  readlines(self, sizehint)
        	  	  Default_Args:(sizehint, 0)
          +  next(self)
          +  write(self, s)
          +  __iter__(self)
          +  tell(self)
          +  flush(self)
          +  close(self)
          +  readline(self, length)
        	  	  Default_Args:(length, None)
          +  getvalue(self)
          +  seek(self, pos, mode)
        	  	  Default_Args:(mode, 0)
          +  __init__(self, buf)
        	  	  Default_Args:(buf, )
    
   +Class: WarningManager
          +  __exit__(self)
          +  __enter__(self)
          +  __init__(self, record, module)
        	  	  Default_Args:(record, False), (module, None)
    
   +Class: WarningMessage
          +  __str__(self)
          +  __init__(self, message, category, filename, lineno, file, line)
        	  	  Default_Args:(file, None), (line, None)
      +Func: _assert_valid_refcount(op)
      +Func: _gen_alignment_data(dtype, type, max_size)
    	  	  Default_Args:(dtype, <type numpy.float32>), (type, binary), (max_size, 24)
      +Func: _integer_repr(x, vdt, comp)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, precision)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (precision, 6)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    
   +Class: float32
        (No members)
      +Func: gisfinite(x)
      +Func: gisinf(x)
      +Func: gisnan(x)
      +Func: integer_repr(x)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: mkdtemp(suffix, prefix, dir)
    	  	  Default_Args:(suffix, ), (prefix, tmp), (dir, None)
    
   +Class: ndarray
        (No members)
      +Func: nulp_diff(x, y, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: partial
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
    	   Positional_Args: args
    	   Keyword_Args: kwds

 
Module: numpy.version-------------------------------------------------
    (No members)
numpy.__config__
numpy._import_tools
numpy.add_newdocs
numpy.compat
numpy.compat._inspect
numpy.compat.py3k
numpy.compat.setup
numpy.core
numpy.core._dotblas
numpy.core._dummy
numpy.core._internal
numpy.core._methods
numpy.core.arrayprint
numpy.core.cversions
numpy.core.defchararray
numpy.core.fromnumeric
numpy.core.function_base
numpy.core.generate_numpy_api
numpy.core.getlimits
numpy.core.info
numpy.core.machar
numpy.core.memmap
numpy.core.multiarray
numpy.core.multiarray_tests
numpy.core.numeric
numpy.core.numerictypes
numpy.core.operand_flag_tests
numpy.core.records
numpy.core.scalarmath
numpy.core.setup
numpy.core.setup_common
numpy.core.shape_base
numpy.core.struct_ufunc_test
numpy.core.test_rational
numpy.core.umath
numpy.core.umath_tests
numpy.ctypeslib
numpy.distutils
numpy.distutils.__config__
numpy.distutils.__version__
numpy.distutils.ccompiler
numpy.distutils.command
numpy.distutils.command.autodist
numpy.distutils.command.bdist_rpm
numpy.distutils.command.build
numpy.distutils.command.build_clib
numpy.distutils.command.build_ext
numpy.distutils.command.build_py
numpy.distutils.command.build_scripts
numpy.distutils.command.build_src
numpy.distutils.command.config
numpy.distutils.command.config_compiler
numpy.distutils.command.develop
numpy.distutils.command.egg_info
numpy.distutils.command.install
numpy.distutils.command.install_clib
numpy.distutils.command.install_data
numpy.distutils.command.install_headers
numpy.distutils.command.sdist
numpy.distutils.compat
numpy.distutils.conv_template
numpy.distutils.core
numpy.distutils.cpuinfo
numpy.distutils.environment
numpy.distutils.exec_command
numpy.distutils.extension
numpy.distutils.fcompiler
numpy.distutils.fcompiler.absoft
numpy.distutils.fcompiler.compaq
numpy.distutils.fcompiler.g95
numpy.distutils.fcompiler.gnu
numpy.distutils.fcompiler.hpux
numpy.distutils.fcompiler.ibm
numpy.distutils.fcompiler.intel
numpy.distutils.fcompiler.lahey
numpy.distutils.fcompiler.mips
numpy.distutils.fcompiler.nag
numpy.distutils.fcompiler.none
numpy.distutils.fcompiler.pathf95
numpy.distutils.fcompiler.pg
numpy.distutils.fcompiler.sun
numpy.distutils.fcompiler.vast
numpy.distutils.from_template
numpy.distutils.info
numpy.distutils.intelccompiler
numpy.distutils.lib2def
numpy.distutils.line_endings
numpy.distutils.log
numpy.distutils.mingw32ccompiler
numpy.distutils.misc_util
numpy.distutils.npy_pkg_config
numpy.distutils.numpy_distribution
numpy.distutils.pathccompiler
numpy.distutils.setup
numpy.distutils.system_info
numpy.distutils.unixccompiler
numpy.doc
numpy.doc.basics
numpy.doc.broadcasting
numpy.doc.byteswapping
numpy.doc.constants
numpy.doc.creation
numpy.doc.glossary
numpy.doc.howtofind
numpy.doc.indexing
numpy.doc.internals
numpy.doc.io
numpy.doc.jargon
numpy.doc.methods_vs_functions
numpy.doc.misc
numpy.doc.performance
numpy.doc.structured_arrays
numpy.doc.subclassing
numpy.doc.ufuncs
numpy.dual
numpy.f2py
numpy.f2py.__version__
numpy.f2py.auxfuncs
numpy.f2py.capi_maps
numpy.f2py.cb_rules
numpy.f2py.cfuncs
numpy.f2py.common_rules
numpy.f2py.crackfortran
numpy.f2py.diagnose
numpy.f2py.f2py2e
numpy.f2py.f2py_testing
numpy.f2py.f90mod_rules
numpy.f2py.func2subr
numpy.f2py.info
numpy.f2py.rules
numpy.f2py.setup
numpy.f2py.use_rules
numpy.fft
numpy.fft.fftpack
numpy.fft.fftpack_lite
numpy.fft.helper
numpy.fft.info
numpy.fft.setup
numpy.lib
numpy.lib._compiled_base
numpy.lib._datasource
numpy.lib._iotools
numpy.lib._version
numpy.lib.arraypad
numpy.lib.arraysetops
numpy.lib.arrayterator
numpy.lib.financial
numpy.lib.format
numpy.lib.function_base
numpy.lib.index_tricks
numpy.lib.info
numpy.lib.nanfunctions
numpy.lib.npyio
numpy.lib.polynomial
numpy.lib.recfunctions
numpy.lib.scimath
numpy.lib.setup
numpy.lib.shape_base
numpy.lib.stride_tricks
numpy.lib.twodim_base
numpy.lib.type_check
numpy.lib.ufunclike
numpy.lib.user_array
numpy.lib.utils
numpy.linalg
numpy.linalg._umath_linalg
numpy.linalg.info
numpy.linalg.lapack_lite
numpy.linalg.linalg
numpy.linalg.setup
numpy.ma
numpy.ma.bench
numpy.ma.core
numpy.ma.extras
numpy.ma.mrecords
numpy.ma.setup
numpy.ma.testutils
numpy.ma.timer_comparison
numpy.ma.version
numpy.matlib
numpy.matrixlib
numpy.matrixlib.defmatrix
numpy.matrixlib.setup
numpy.polynomial
numpy.polynomial._polybase
numpy.polynomial.chebyshev
numpy.polynomial.hermite
numpy.polynomial.hermite_e
numpy.polynomial.laguerre
numpy.polynomial.legendre
numpy.polynomial.polynomial
numpy.polynomial.polytemplate
numpy.polynomial.polyutils
numpy.polynomial.setup
numpy.random
numpy.random.info
numpy.random.mtrand
numpy.random.setup
numpy.setup
numpy.testing
numpy.testing.decorators
numpy.testing.noseclasses
numpy.testing.nosetester
numpy.testing.print_coercion_tables
numpy.testing.setup
numpy.testing.utils
numpy.version

 
 
numpy.__config__.get_info(name)

 
 

 
 
numpy.add_newdocs.add_newdoc(place, obj, doc)

 
 
numpy.compat.asbytes_nested(x)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat.getargspec(func)
numpy.compat.isfileobj(f)
numpy.compat.open_latin1(filename, mode)
numpy.compat.sixu(s)

 
 
numpy.compat._inspect.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object, convert, join)

 
 
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.open_latin1(filename, mode)
numpy.compat.py3k.sixu(s)

 
 
numpy.compat.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.core._dotblas.alterdot
numpy.core._dotblas.dot
(
a, b, out=None
numpy.core._dotblas.inner
(
a, b
numpy.core._dotblas.restoredot
numpy.core._dotblas.vdot
(
a, b

 
 

 
 
numpy.core._internal._add_trailing_padding(value, padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)

 
 
numpy.core._methods._all(a, axis, dtype, out, keepdims)
numpy.core._methods._amax(a, axis, out, keepdims)
numpy.core._methods._amin(a, axis, out, keepdims)
numpy.core._methods._any(a, axis, dtype, out, keepdims)
numpy.core._methods._count_reduce_items(arr, axis)
numpy.core._methods._mean(a, axis, dtype, out, keepdims)
numpy.core._methods._prod(a, axis, dtype, out, keepdims)
numpy.core._methods._std(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods._sum(a, axis, dtype, out, keepdims)
numpy.core._methods._var(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods.asanyarray(a, dtype, order)
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False

 
 

 
 
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray.len
(
object
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._vec_string
numpy.core.defchararray.add(x1, x2)
numpy.core.defchararray.array(obj, itemsize, copy, unicode, order)
numpy.core.defchararray.asarray(obj, itemsize, unicode, order)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a, width, fillchar)

 
 
numpy.core.fromnumeric.sctype2char(sctype)
numpy.core.fromnumeric.sum
(
sequence, start
numpy.core.fromnumeric._wrapit(obj, method)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a, axis, out, keepdims)
numpy.core.fromnumeric.alltrue(a, axis, out, keepdims)
numpy.core.fromnumeric.amax(a, axis, out, keepdims)
numpy.core.fromnumeric.amin(a, axis, out, keepdims)
numpy.core.fromnumeric.any(a, axis, out, keepdims)
numpy.core.fromnumeric.argmax(a, axis)
numpy.core.fromnumeric.argmin(a, axis)
numpy.core.fromnumeric.argpartition(a, kth, axis, kind, order)
numpy.core.fromnumeric.argsort(a, axis, kind, order)
numpy.core.fromnumeric.around(a, decimals, out)
numpy.core.fromnumeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.fromnumeric.asanyarray(a, dtype, order)
numpy.core.fromnumeric.asarray(a, dtype, order)
numpy.core.fromnumeric.choose(a, choices, out, mode)
numpy.core.fromnumeric.clip(a, a_min, a_max, out)
numpy.core.fromnumeric.compress(condition, a, axis, out)
numpy.core.fromnumeric.concatenate
(
(a1, a2, ...
numpy.core.fromnumeric.cumprod(a, axis, dtype, out)
numpy.core.fromnumeric.cumproduct(a, axis, dtype, out)
numpy.core.fromnumeric.cumsum(a, axis, dtype, out)
numpy.core.fromnumeric.diagonal(a, offset, axis1, axis2)
numpy.core.fromnumeric.mean(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a, kth, axis, kind, order)
numpy.core.fromnumeric.prod(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.product(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ptp(a, axis, out)
numpy.core.fromnumeric.put(a, ind, v, mode)
numpy.core.fromnumeric.rank(a)
numpy.core.fromnumeric.ravel(a, order)
numpy.core.fromnumeric.repeat(a, repeats, axis)
numpy.core.fromnumeric.reshape(a, newshape, order)
numpy.core.fromnumeric.resize(a, new_shape)
numpy.core.fromnumeric.round_(a, decimals, out)
numpy.core.fromnumeric.searchsorted(a, v, side, sorter)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a, axis)
numpy.core.fromnumeric.sometrue(a, axis, out, keepdims)
numpy.core.fromnumeric.sort(a, axis, kind, order)
numpy.core.fromnumeric.squeeze(a, axis)
numpy.core.fromnumeric.std(a, axis, dtype, out, ddof, keepdims)
numpy.core.fromnumeric.sum(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.swapaxes(a, axis1, axis2)
numpy.core.fromnumeric.take(a, indices, axis, out, mode)
numpy.core.fromnumeric.trace(a, offset, axis1, axis2, dtype, out)
numpy.core.fromnumeric.transpose(a, axes)
numpy.core.fromnumeric.var(a, axis, dtype, out, ddof, keepdims)

 
 
numpy.core.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.core.function_base.logspace(start, stop, num, endpoint, base, dtype)
numpy.core.function_base.result_type
(
*arrays_and_dtypes

 
 

 
 

 
 

 
 

 
 
numpy.core.multiarray._fastCopyAndTranspose
(
a
numpy.core.multiarray._get_ndarray_c_version
numpy.core.multiarray._reconstruct
(
subtype, shape, dtype
numpy.core.multiarray._vec_string
numpy.core.multiarray.arange
(
start, stop, step,, dtype=None
numpy.core.multiarray.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.multiarray.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.multiarray.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.can_cast
(
from, totype, casting = safe
numpy.core.multiarray.compare_chararrays
numpy.core.multiarray.concatenate
(
(a1, a2, ...
numpy.core.multiarray.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.multiarray.correlate
(
a,v, mode=0
numpy.core.multiarray.correlate2
numpy.core.multiarray.count_nonzero
(
a
numpy.core.multiarray.datetime_as_string
numpy.core.multiarray.datetime_data
numpy.core.multiarray.dot
numpy.core.multiarray.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.multiarray.empty
(
shape, dtype=float, order=C
numpy.core.multiarray.empty_like
(
a, dtype=None, order=K, subok=True
numpy.core.multiarray.format_longfloat
numpy.core.multiarray.frombuffer
(
buffer, dtype=float, count=-1, offset=0
numpy.core.multiarray.fromfile
(
file, dtype=float, count=-1, sep=
numpy.core.multiarray.fromiter
(
iterable, dtype, count=-1
numpy.core.multiarray.fromstring
(
string, dtype=float, count=-1, sep=
numpy.core.multiarray.getbuffer
(
obj ,offset, size
numpy.core.multiarray.inner
numpy.core.multiarray.int_asbuffer
numpy.core.multiarray.is_busday
(
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.lexsort
(
keys, axis=-1
numpy.core.multiarray.may_share_memory
numpy.core.multiarray.min_scalar_type
(
a
numpy.core.multiarray.nested_iters
numpy.core.multiarray.newbuffer
(
size
numpy.core.multiarray.promote_types
(
type1, type2
numpy.core.multiarray.putmask
(
a, mask, values
numpy.core.multiarray.result_type
(
*arrays_and_dtypes
numpy.core.multiarray.scalar
(
dtype, obj
numpy.core.multiarray.set_datetimeparse_function
numpy.core.multiarray.set_numeric_ops
(
op1=func1, op2=func2, ...
numpy.core.multiarray.set_string_function
(
f, repr=1
numpy.core.multiarray.set_typeDict
(
dict
numpy.core.multiarray.test_interrupt
numpy.core.multiarray.where
(
condition, x, y
numpy.core.multiarray.zeros
(
shape, dtype=float, order=C

 
 
numpy.core.multiarray_tests.array_indexing
numpy.core.multiarray_tests.get_buffer_info
numpy.core.multiarray_tests.test_as_c_array
numpy.core.multiarray_tests.test_inplace_increment
numpy.core.multiarray_tests.test_int_subclass
numpy.core.multiarray_tests.test_nditer_too_large
numpy.core.multiarray_tests.test_neighborhood_iterator
numpy.core.multiarray_tests.test_neighborhood_iterator_oob
numpy.core.multiarray_tests.test_pydatamem_seteventhook_end
numpy.core.multiarray_tests.test_pydatamem_seteventhook_start

 
 
numpy.core.numeric._maketup(descr, val)
numpy.core.numeric._mode_from_name(mode)
numpy.core.numeric._move_axis_to_0(a, axis)
numpy.core.numeric.alen(a)
numpy.core.numeric.all(a, axis, out, keepdims)
numpy.core.numeric.allclose(a, b, rtol, atol)
numpy.core.numeric.alltrue(a, axis, out, keepdims)
numpy.core.numeric.alterdot
numpy.core.numeric.amax(a, axis, out, keepdims)
numpy.core.numeric.amin(a, axis, out, keepdims)
numpy.core.numeric.any(a, axis, out, keepdims)
numpy.core.numeric.arange
(
start, stop, step,, dtype=None
numpy.core.numeric.argmax(a, axis)
numpy.core.numeric.argmin(a, axis)
numpy.core.numeric.argpartition(a, kth, axis, kind, order)
numpy.core.numeric.argsort(a, axis, kind, order)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.around(a, decimals, out)
numpy.core.numeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.numeric.array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
numpy.core.numeric.array_equal(a1, a2)
numpy.core.numeric.array_equiv(a1, a2)
numpy.core.numeric.array_repr(arr, max_line_width, precision, suppress_small)
numpy.core.numeric.array_str(a, max_line_width, precision, suppress_small)
numpy.core.numeric.asanyarray(a, dtype, order)
numpy.core.numeric.asarray(a, dtype, order)
numpy.core.numeric.ascontiguousarray(a, dtype)
numpy.core.numeric.asfortranarray(a, dtype)
numpy.core.numeric.base_repr(number, base, padding)
numpy.core.numeric.binary_repr(num, width)
numpy.core.numeric.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.numeric.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.numeric.can_cast
(
from, totype, casting = safe
numpy.core.numeric.choose(a, choices, out, mode)
numpy.core.numeric.clip(a, a_min, a_max, out)
numpy.core.numeric.compare_chararrays
numpy.core.numeric.compress(condition, a, axis, out)
numpy.core.numeric.concatenate
(
(a1, a2, ...
numpy.core.numeric.convolve(a, v, mode)
numpy.core.numeric.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.numeric.correlate(a, v, mode, old_behavior)
numpy.core.numeric.count_nonzero
(
a
numpy.core.numeric.cross(a, b, axisa, axisb, axisc, axis)
numpy.core.numeric.cumprod(a, axis, dtype, out)
numpy.core.numeric.cumproduct(a, axis, dtype, out)
numpy.core.numeric.cumsum(a, axis, dtype, out)
numpy.core.numeric.datetime_as_string
numpy.core.numeric.datetime_data
numpy.core.numeric.diagonal(a, offset, axis1, axis2)
numpy.core.numeric.dot
(
a, b, out=None
numpy.core.numeric.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.numeric.empty
(
shape, dtype=float, order=C
numpy.core.numeric.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.core.numerictypes._add_array_type(typename, bits)
numpy.core.numerictypes._can_coerce_all(dtypelist, start)
numpy.core.numerictypes._evalname(name)
numpy.core.numerictypes._find_common_coerce(a, b)
numpy.core.numerictypes._python_type(t)

 
 

 
 
numpy.core.records.array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)

 
 
numpy.core.scalarmath.alter_pythonmath
numpy.core.scalarmath.restore_pythonmath
numpy.core.scalarmath.use_pythonmath
numpy.core.scalarmath.use_scalarmath

 
 

 
 
numpy.core.setup_common.check_api_version(apiversion, codegen_dir)
numpy.core.setup_common.check_long_double_representation(cmd)
numpy.core.setup_common.fname2def(name)
numpy.core.setup_common.get_api_versions(apiversion, codegen_dir)
numpy.core.setup_common.is_released(config)
numpy.core.setup_common.join(path)
numpy.core.setup_common.long_double_representation(lines)
numpy.core.setup_common.pyod(filename)
numpy.core.setup_common.sym2def(symbol)
numpy.core.setup_common.type2def(symbol)

 
 
numpy.core.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.shape_base.asanyarray(a, dtype, order)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.vstack(tup)

 
 

 
 

 
 
numpy.core.umath.frompyfunc
(
func, nin, nout
numpy.core.umath.geterrobj
numpy.core.umath.seterrobj
(
errobj

 
 
numpy.core.umath_tests.test_signature

 
 
numpy.ctypeslib._flags_fromnum(num)

 
 

 
 
numpy.distutils.__config__.get_info(name)

 
 

 
 

 
 

 
 
numpy.distutils.command.autodist.check_compiler_gcc4(cmd)
numpy.distutils.command.autodist.check_inline(cmd)

 
 

 
 

 
 
numpy.distutils.command.build_clib.all_strings(lst)

 
 

 
 

 
 

 
 
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src._find_swig_target(target_dir, name)
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.appendpath(prefix, path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.command.sdist.get_data_files(data)

 
 

 
 
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr, env, level, line)
numpy.distutils.conv_template.parse_structure(astr, level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)

 
 

 
 

 
 

 
 
numpy.distutils.exec_command._exec_command(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_posix(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_python(command, exec_command_dir)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._supports_fileno(stream)
numpy.distutils.exec_command.exec_command(command, execute_in, use_shell, use_tee, _with_python)
numpy.distutils.exec_command.find_executable(exe, path, _cache)
numpy.distutils.exec_command.is_sequence(seq)
numpy.distutils.exec_command.make_temp_file(suffix, prefix, text)
numpy.distutils.exec_command.open_latin1(filename, mode)
numpy.distutils.exec_command.quote_arg(arg)
numpy.distutils.exec_command.splitcmdline(line)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr, names)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)

 
 

 
 

 
 
numpy.distutils.lib2def.getnm(nm_cmd)
numpy.distutils.lib2def.output_def(dlist, flist, header, file)
numpy.distutils.lib2def.parse_nm(nm_output)

 
 
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files, dir_name, file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files, dir_name, file_names)

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.dual.cholesky(a, lower, overwrite_a, check_finite)
numpy.dual.det(a, overwrite_a, check_finite)
numpy.dual.eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
numpy.dual.eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.eigvals(a, b, overwrite_a, check_finite)
numpy.dual.eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.fft(a, n, axis)
numpy.dual.fft2(a, s, axes)
numpy.dual.fftn(a, s, axes)
numpy.dual.ifft(a, n, axis)
numpy.dual.ifft2(a, s, axes)
numpy.dual.ifftn(a, s, axes)
numpy.dual.inv(a, overwrite_a, check_finite)
numpy.dual.lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
numpy.dual.norm(a, ord)
numpy.dual.pinv2(a, cond, rcond, return_rank, check_finite)
numpy.dual.register_func(name, func)
numpy.dual.restore_func(name)
numpy.dual.solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
numpy.dual.svd(a, full_matrices, compute_uv, overwrite_a, check_finite)

 
 

 
 

 
 
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules, d, var)
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd, ar)
numpy.f2py.auxfuncs.write(self, string)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout, cb_map)
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.reduce
(
function, sequence, initial
numpy.f2py.auxfuncs.replace(str, d, defaultsep)
numpy.f2py.auxfuncs.pprint(object, stream, indent, width, depth)
numpy.f2py.auxfuncs.stripcomma(s)

 
 
numpy.f2py.capi_maps.applyrules(rules, d, var)
numpy.f2py.capi_maps.cb_routsign2map(rout, um)
numpy.f2py.capi_maps.cb_sign2map(a, var, index)
numpy.f2py.capi_maps.common_sign2map(a, var)
numpy.f2py.capi_maps.containscommon(rout)
numpy.f2py.capi_maps.containsmodule(block)
numpy.f2py.capi_maps.debugcapi(var)
numpy.f2py.capi_maps.dictappend(rd, ar)
numpy.f2py.capi_maps.write(self, string)
numpy.f2py.capi_maps.flatlist(l)
numpy.f2py.capi_maps.gentitle(name)
numpy.f2py.capi_maps.get_kind(var)
numpy.f2py.capi_maps.getargs(rout)
numpy.f2py.capi_maps.getargs2(rout)
numpy.f2py.capi_maps.getarrdims(a, var, verbose)
numpy.f2py.capi_maps.getarrdocsign(a, var)
numpy.f2py.capi_maps.getcallprotoargument(rout, cb_map)
numpy.f2py.capi_maps.getcallstatement(rout)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getfortranname(rout)
numpy.f2py.capi_maps.getinit(a, var)
numpy.f2py.capi_maps.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.capi_maps.getpydocsign(a, var)
numpy.f2py.capi_maps.getpymethoddef(rout)
numpy.f2py.capi_maps.getrestdoc(rout)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.getusercode(rout)
numpy.f2py.capi_maps.getusercode1(rout)
numpy.f2py.capi_maps.hasassumedshape(rout)
numpy.f2py.capi_maps.hasbody(rout)
numpy.f2py.capi_maps.hascallstatement(rout)
numpy.f2py.capi_maps.hascommon(rout)
numpy.f2py.capi_maps.hasexternals(rout)
numpy.f2py.capi_maps.hasinitvalue(var)
numpy.f2py.capi_maps.hasinitvalueasstring(var)
numpy.f2py.capi_maps.hasnote(var)
numpy.f2py.capi_maps.hasresultnote(rout)
numpy.f2py.capi_maps.hasvariables(rout)
numpy.f2py.capi_maps.isallocatable(var)
numpy.f2py.capi_maps.isarray(var)
numpy.f2py.capi_maps.isarrayofstrings(var)
numpy.f2py.capi_maps.ischaracter(var)
numpy.f2py.capi_maps.iscomplex(var)
numpy.f2py.capi_maps.iscomplexarray(var)
numpy.f2py.capi_maps.iscomplexfunction(rout)
numpy.f2py.capi_maps.iscomplexfunction_warn(rout)
numpy.f2py.capi_maps.isdouble(var)
numpy.f2py.capi_maps.isdummyroutine(rout)
numpy.f2py.capi_maps.isexternal(var)
numpy.f2py.capi_maps.isfalse(var)
numpy.f2py.capi_maps.isfunction(rout)
numpy.f2py.capi_maps.isfunction_wrap(rout)
numpy.f2py.capi_maps.isint1array(var)
numpy.f2py.capi_maps.isinteger(var)
numpy.f2py.capi_maps.isintent_aligned16(var)
numpy.f2py.capi_maps.isintent_aligned4(var)
numpy.f2py.capi_maps.isintent_aligned8(var)
numpy.f2py.capi_maps.isintent_aux(var)
numpy.f2py.capi_maps.isintent_c(var)
numpy.f2py.capi_maps.isintent_cache(var)
numpy.f2py.capi_maps.isintent_callback(var)
numpy.f2py.capi_maps.isintent_copy(var)
numpy.f2py.capi_maps.isintent_hide(var)
numpy.f2py.capi_maps.isintent_in(var)
numpy.f2py.capi_maps.isintent_inout(var)
numpy.f2py.capi_maps.isintent_inplace(var)
numpy.f2py.capi_maps.isintent_nothide(var)
numpy.f2py.capi_maps.isintent_out(var)
numpy.f2py.capi_maps.isintent_overwrite(var)
numpy.f2py.capi_maps.islogical(var)
numpy.f2py.capi_maps.islogicalfunction(rout)
numpy.f2py.capi_maps.islong_complex(var)
numpy.f2py.capi_maps.islong_double(var)
numpy.f2py.capi_maps.islong_doublefunction(rout)
numpy.f2py.capi_maps.islong_long(var)
numpy.f2py.capi_maps.islong_longfunction(rout)
numpy.f2py.capi_maps.ismodule(rout)
numpy.f2py.capi_maps.ismoduleroutine(rout)
numpy.f2py.capi_maps.ismutable(var)
numpy.f2py.capi_maps.isoptional(var)
numpy.f2py.capi_maps.isprivate(var)
numpy.f2py.capi_maps.isreal(var)
numpy.f2py.capi_maps.isrequired(var)
numpy.f2py.capi_maps.isroutine(rout)
numpy.f2py.capi_maps.isscalar(var)
numpy.f2py.capi_maps.issigned_array(var)
numpy.f2py.capi_maps.issigned_chararray(var)
numpy.f2py.capi_maps.issigned_long_longarray(var)
numpy.f2py.capi_maps.issigned_shortarray(var)
numpy.f2py.capi_maps.isstring(var)
numpy.f2py.capi_maps.isstringarray(var)
numpy.f2py.capi_maps.isstringfunction(rout)
numpy.f2py.capi_maps.issubroutine(rout)
numpy.f2py.capi_maps.issubroutine_wrap(rout)
numpy.f2py.capi_maps.isthreadsafe(rout)
numpy.f2py.capi_maps.istrue(var)
numpy.f2py.capi_maps.isunsigned(var)
numpy.f2py.capi_maps.isunsigned_char(var)
numpy.f2py.capi_maps.isunsigned_chararray(var)
numpy.f2py.capi_maps.isunsigned_long_long(var)
numpy.f2py.capi_maps.isunsigned_long_longarray(var)
numpy.f2py.capi_maps.isunsigned_short(var)
numpy.f2py.capi_maps.isunsigned_shortarray(var)
numpy.f2py.capi_maps.isunsignedarray(var)
numpy.f2py.capi_maps.l_not(f)
numpy.f2py.capi_maps.markoutercomma(line, comma)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.outmess(t)
numpy.f2py.capi_maps.reduce
(
function, sequence, initial
numpy.f2py.capi_maps.replace(str, d, defaultsep)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.pprint(object, stream, indent, width, depth)
numpy.f2py.capi_maps.sign2map(a, var)
numpy.f2py.capi_maps.stripcomma(s)

 
 
numpy.f2py.cb_rules.applyrules(rules, d, var)
numpy.f2py.cb_rules.buildcallback(rout, um)
numpy.f2py.cb_rules.buildcallbacks(m)
numpy.f2py.cb_rules.containscommon(rout)
numpy.f2py.cb_rules.containsmodule(block)
numpy.f2py.cb_rules.debugcapi(var)
numpy.f2py.cb_rules.dictappend(rd, ar)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.flatlist(l)
numpy.f2py.cb_rules.gentitle(name)
numpy.f2py.cb_rules.get_kind(var)
numpy.f2py.cb_rules.getargs(rout)
numpy.f2py.cb_rules.getargs2(rout)
numpy.f2py.cb_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.cb_rules.getcallstatement(rout)
numpy.f2py.cb_rules.getfortranname(rout)
numpy.f2py.cb_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.cb_rules.getpymethoddef(rout)
numpy.f2py.cb_rules.getrestdoc(rout)
numpy.f2py.cb_rules.getusercode(rout)
numpy.f2py.cb_rules.getusercode1(rout)
numpy.f2py.cb_rules.hasassumedshape(rout)
numpy.f2py.cb_rules.hasbody(rout)
numpy.f2py.cb_rules.hascallstatement(rout)
numpy.f2py.cb_rules.hascommon(rout)
numpy.f2py.cb_rules.hasexternals(rout)
numpy.f2py.cb_rules.hasinitvalue(var)
numpy.f2py.cb_rules.hasinitvalueasstring(var)
numpy.f2py.cb_rules.hasnote(var)
numpy.f2py.cb_rules.hasresultnote(rout)
numpy.f2py.cb_rules.hasvariables(rout)
numpy.f2py.cb_rules.isallocatable(var)
numpy.f2py.cb_rules.isarray(var)
numpy.f2py.cb_rules.isarrayofstrings(var)
numpy.f2py.cb_rules.ischaracter(var)
numpy.f2py.cb_rules.iscomplex(var)
numpy.f2py.cb_rules.iscomplexarray(var)
numpy.f2py.cb_rules.iscomplexfunction(rout)
numpy.f2py.cb_rules.iscomplexfunction_warn(rout)
numpy.f2py.cb_rules.isdouble(var)
numpy.f2py.cb_rules.isdummyroutine(rout)
numpy.f2py.cb_rules.isexternal(var)
numpy.f2py.cb_rules.isfalse(var)
numpy.f2py.cb_rules.isfunction(rout)
numpy.f2py.cb_rules.isfunction_wrap(rout)
numpy.f2py.cb_rules.isint1array(var)
numpy.f2py.cb_rules.isinteger(var)
numpy.f2py.cb_rules.isintent_aligned16(var)
numpy.f2py.cb_rules.isintent_aligned4(var)
numpy.f2py.cb_rules.isintent_aligned8(var)
numpy.f2py.cb_rules.isintent_aux(var)
numpy.f2py.cb_rules.isintent_c(var)
numpy.f2py.cb_rules.isintent_cache(var)
numpy.f2py.cb_rules.isintent_callback(var)
numpy.f2py.cb_rules.isintent_copy(var)
numpy.f2py.cb_rules.isintent_hide(var)
numpy.f2py.cb_rules.isintent_in(var)
numpy.f2py.cb_rules.isintent_inout(var)
numpy.f2py.cb_rules.isintent_inplace(var)
numpy.f2py.cb_rules.isintent_nothide(var)
numpy.f2py.cb_rules.isintent_out(var)
numpy.f2py.cb_rules.isintent_overwrite(var)
numpy.f2py.cb_rules.islogical(var)
numpy.f2py.cb_rules.islogicalfunction(rout)
numpy.f2py.cb_rules.islong_complex(var)
numpy.f2py.cb_rules.islong_double(var)
numpy.f2py.cb_rules.islong_doublefunction(rout)
numpy.f2py.cb_rules.islong_long(var)
numpy.f2py.cb_rules.islong_longfunction(rout)
numpy.f2py.cb_rules.ismodule(rout)
numpy.f2py.cb_rules.ismoduleroutine(rout)
numpy.f2py.cb_rules.ismutable(var)
numpy.f2py.cb_rules.isoptional(var)
numpy.f2py.cb_rules.isprivate(var)
numpy.f2py.cb_rules.isreal(var)
numpy.f2py.cb_rules.isrequired(var)
numpy.f2py.cb_rules.isroutine(rout)
numpy.f2py.cb_rules.isscalar(var)
numpy.f2py.cb_rules.issigned_array(var)
numpy.f2py.cb_rules.issigned_chararray(var)
numpy.f2py.cb_rules.issigned_long_longarray(var)
numpy.f2py.cb_rules.issigned_shortarray(var)
numpy.f2py.cb_rules.isstring(var)
numpy.f2py.cb_rules.isstringarray(var)
numpy.f2py.cb_rules.isstringfunction(rout)
numpy.f2py.cb_rules.issubroutine(rout)
numpy.f2py.cb_rules.issubroutine_wrap(rout)
numpy.f2py.cb_rules.isthreadsafe(rout)
numpy.f2py.cb_rules.istrue(var)
numpy.f2py.cb_rules.isunsigned(var)
numpy.f2py.cb_rules.isunsigned_char(var)
numpy.f2py.cb_rules.isunsigned_chararray(var)
numpy.f2py.cb_rules.isunsigned_long_long(var)
numpy.f2py.cb_rules.isunsigned_long_longarray(var)
numpy.f2py.cb_rules.isunsigned_short(var)
numpy.f2py.cb_rules.isunsigned_shortarray(var)
numpy.f2py.cb_rules.isunsignedarray(var)
numpy.f2py.cb_rules.l_not(f)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.reduce
(
function, sequence, initial
numpy.f2py.cb_rules.replace(str, d, defaultsep)
numpy.f2py.cb_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.cb_rules.stripcomma(s)

 
 
numpy.f2py.cfuncs.append_needs(need, flag)
numpy.f2py.cfuncs.write(self, string)

 
 
numpy.f2py.common_rules.applyrules(rules, d, var)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.containscommon(rout)
numpy.f2py.common_rules.containsmodule(block)
numpy.f2py.common_rules.debugcapi(var)
numpy.f2py.common_rules.dictappend(rd, ar)
numpy.f2py.common_rules.write(self, string)
numpy.f2py.common_rules.findcommonblocks(block, top)
numpy.f2py.common_rules.flatlist(l)
numpy.f2py.common_rules.gentitle(name)
numpy.f2py.common_rules.get_kind(var)
numpy.f2py.common_rules.getargs(rout)
numpy.f2py.common_rules.getargs2(rout)
numpy.f2py.common_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.common_rules.getcallstatement(rout)
numpy.f2py.common_rules.getfortranname(rout)
numpy.f2py.common_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.common_rules.getpymethoddef(rout)
numpy.f2py.common_rules.getrestdoc(rout)
numpy.f2py.common_rules.getusercode(rout)
numpy.f2py.common_rules.getusercode1(rout)
numpy.f2py.common_rules.hasassumedshape(rout)
numpy.f2py.common_rules.hasbody(rout)
numpy.f2py.common_rules.hascallstatement(rout)
numpy.f2py.common_rules.hascommon(rout)
numpy.f2py.common_rules.hasexternals(rout)
numpy.f2py.common_rules.hasinitvalue(var)
numpy.f2py.common_rules.hasinitvalueasstring(var)
numpy.f2py.common_rules.hasnote(var)
numpy.f2py.common_rules.hasresultnote(rout)
numpy.f2py.common_rules.hasvariables(rout)
numpy.f2py.common_rules.isallocatable(var)
numpy.f2py.common_rules.isarray(var)
numpy.f2py.common_rules.isarrayofstrings(var)
numpy.f2py.common_rules.ischaracter(var)
numpy.f2py.common_rules.iscomplex(var)
numpy.f2py.common_rules.iscomplexarray(var)
numpy.f2py.common_rules.iscomplexfunction(rout)
numpy.f2py.common_rules.iscomplexfunction_warn(rout)
numpy.f2py.common_rules.isdouble(var)
numpy.f2py.common_rules.isdummyroutine(rout)
numpy.f2py.common_rules.isexternal(var)
numpy.f2py.common_rules.isfalse(var)
numpy.f2py.common_rules.isfunction(rout)
numpy.f2py.common_rules.isfunction_wrap(rout)
numpy.f2py.common_rules.isint1array(var)
numpy.f2py.common_rules.isinteger(var)
numpy.f2py.common_rules.isintent_aligned16(var)
numpy.f2py.common_rules.isintent_aligned4(var)
numpy.f2py.common_rules.isintent_aligned8(var)
numpy.f2py.common_rules.isintent_aux(var)
numpy.f2py.common_rules.isintent_c(var)
numpy.f2py.common_rules.isintent_cache(var)
numpy.f2py.common_rules.isintent_callback(var)
numpy.f2py.common_rules.isintent_copy(var)
numpy.f2py.common_rules.isintent_hide(var)
numpy.f2py.common_rules.isintent_in(var)
numpy.f2py.common_rules.isintent_inout(var)
numpy.f2py.common_rules.isintent_inplace(var)
numpy.f2py.common_rules.isintent_nothide(var)
numpy.f2py.common_rules.isintent_out(var)
numpy.f2py.common_rules.isintent_overwrite(var)
numpy.f2py.common_rules.islogical(var)
numpy.f2py.common_rules.islogicalfunction(rout)
numpy.f2py.common_rules.islong_complex(var)
numpy.f2py.common_rules.islong_double(var)
numpy.f2py.common_rules.islong_doublefunction(rout)
numpy.f2py.common_rules.islong_long(var)
numpy.f2py.common_rules.islong_longfunction(rout)
numpy.f2py.common_rules.ismodule(rout)
numpy.f2py.common_rules.ismoduleroutine(rout)
numpy.f2py.common_rules.ismutable(var)
numpy.f2py.common_rules.isoptional(var)
numpy.f2py.common_rules.isprivate(var)
numpy.f2py.common_rules.isreal(var)
numpy.f2py.common_rules.isrequired(var)
numpy.f2py.common_rules.isroutine(rout)
numpy.f2py.common_rules.isscalar(var)
numpy.f2py.common_rules.issigned_array(var)
numpy.f2py.common_rules.issigned_chararray(var)
numpy.f2py.common_rules.issigned_long_longarray(var)
numpy.f2py.common_rules.issigned_shortarray(var)
numpy.f2py.common_rules.isstring(var)
numpy.f2py.common_rules.isstringarray(var)
numpy.f2py.common_rules.isstringfunction(rout)
numpy.f2py.common_rules.issubroutine(rout)
numpy.f2py.common_rules.issubroutine_wrap(rout)
numpy.f2py.common_rules.isthreadsafe(rout)
numpy.f2py.common_rules.istrue(var)
numpy.f2py.common_rules.isunsigned(var)
numpy.f2py.common_rules.isunsigned_char(var)
numpy.f2py.common_rules.isunsigned_chararray(var)
numpy.f2py.common_rules.isunsigned_long_long(var)
numpy.f2py.common_rules.isunsigned_long_longarray(var)
numpy.f2py.common_rules.isunsigned_short(var)
numpy.f2py.common_rules.isunsigned_shortarray(var)
numpy.f2py.common_rules.isunsignedarray(var)
numpy.f2py.common_rules.l_not(f)
numpy.f2py.common_rules.outmess(t)
numpy.f2py.common_rules.reduce
(
function, sequence, initial
numpy.f2py.common_rules.replace(str, d, defaultsep)
numpy.f2py.common_rules.rmbadname(names)
numpy.f2py.common_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.common_rules.stripcomma(s)

 
 
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length, params)
numpy.f2py.crackfortran._eval_scalar(value, params)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._get_depend_dict(name, vars, deps)
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p, r, radix)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block, args, tab)
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m, case, line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl, decl2, force)
numpy.f2py.crackfortran.appendmultiline(group, context_name, ml)
numpy.f2py.crackfortran.applyrules(rules, d, var)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common, tab)
numpy.f2py.crackfortran.containscommon(rout)
numpy.f2py.crackfortran.containsmodule(block)
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block, tab, as_interface)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line, reset)
numpy.f2py.crackfortran.cracktypespec(typespec, selector)
numpy.f2py.crackfortran.cracktypespec0(typespec, ll)
numpy.f2py.crackfortran.debugcapi(var)
numpy.f2py.crackfortran.determineexprtype(expr, vars, rules)
numpy.f2py.crackfortran.dictappend(rd, ar)
numpy.f2py.crackfortran.write(self, string)
numpy.f2py.crackfortran.expr2name(a, block, args)
numpy.f2py.crackfortran.flatlist(l)
numpy.f2py.crackfortran.gentitle(name)
numpy.f2py.crackfortran.get_kind(var)
numpy.f2py.crackfortran.get_parameters(vars, global_params)
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block, param_map)
numpy.f2py.crackfortran.getargs(rout)
numpy.f2py.crackfortran.getargs2(rout)
numpy.f2py.crackfortran.getarrlen(dl, args, star)
numpy.f2py.crackfortran.getblockname(block, unknown)
numpy.f2py.crackfortran.getcallprotoargument(rout, cb_map)
numpy.f2py.crackfortran.getcallstatement(rout)
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getfortranname(rout)
numpy.f2py.crackfortran.getlincoef(e, xset)
numpy.f2py.crackfortran.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.crackfortran.getpymethoddef(rout)
numpy.f2py.crackfortran.getrestdoc(rout)
numpy.f2py.crackfortran.getusercode(rout)
numpy.f2py.crackfortran.getusercode1(rout)
numpy.f2py.crackfortran.hasassumedshape(rout)
numpy.f2py.crackfortran.hasbody(rout)
numpy.f2py.crackfortran.hascallstatement(rout)
numpy.f2py.crackfortran.hascommon(rout)
numpy.f2py.crackfortran.hasexternals(rout)
numpy.f2py.crackfortran.hasinitvalue(var)
numpy.f2py.crackfortran.hasinitvalueasstring(var)
numpy.f2py.crackfortran.hasnote(var)
numpy.f2py.crackfortran.hasresultnote(rout)
numpy.f2py.crackfortran.hasvariables(rout)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.isallocatable(var)
numpy.f2py.crackfortran.isarray(var)
numpy.f2py.crackfortran.isarrayofstrings(var)
numpy.f2py.crackfortran.ischaracter(var)
numpy.f2py.crackfortran.iscomplex(var)
numpy.f2py.crackfortran.iscomplexarray(var)
numpy.f2py.crackfortran.iscomplexfunction(rout)
numpy.f2py.crackfortran.iscomplexfunction_warn(rout)
numpy.f2py.crackfortran.isdouble(var)
numpy.f2py.crackfortran.isdummyroutine(rout)
numpy.f2py.crackfortran.isexternal(var)
numpy.f2py.crackfortran.isfalse(var)
numpy.f2py.crackfortran.isfunction(rout)
numpy.f2py.crackfortran.isfunction_wrap(rout)
numpy.f2py.crackfortran.isint1array(var)
numpy.f2py.crackfortran.isinteger(var)
numpy.f2py.crackfortran.isintent_aligned16(var)
numpy.f2py.crackfortran.isintent_aligned4(var)
numpy.f2py.crackfortran.isintent_aligned8(var)
numpy.f2py.crackfortran.isintent_aux(var)
numpy.f2py.crackfortran.isintent_c(var)
numpy.f2py.crackfortran.isintent_cache(var)
numpy.f2py.crackfortran.isintent_callback(var)
numpy.f2py.crackfortran.isintent_copy(var)
numpy.f2py.crackfortran.isintent_hide(var)
numpy.f2py.crackfortran.isintent_in(var)
numpy.f2py.crackfortran.isintent_inout(var)
numpy.f2py.crackfortran.isintent_inplace(var)
numpy.f2py.crackfortran.isintent_nothide(var)
numpy.f2py.crackfortran.isintent_out(var)
numpy.f2py.crackfortran.isintent_overwrite(var)
numpy.f2py.crackfortran.islogical(var)
numpy.f2py.crackfortran.islogicalfunction(rout)
numpy.f2py.crackfortran.islong_complex(var)
numpy.f2py.crackfortran.islong_double(var)
numpy.f2py.crackfortran.islong_doublefunction(rout)
numpy.f2py.crackfortran.islong_long(var)
numpy.f2py.crackfortran.islong_longfunction(rout)
numpy.f2py.crackfortran.ismodule(rout)
numpy.f2py.crackfortran.ismoduleroutine(rout)
numpy.f2py.crackfortran.ismutable(var)
numpy.f2py.crackfortran.isoptional(var)
numpy.f2py.crackfortran.isprivate(var)
numpy.f2py.crackfortran.isreal(var)
numpy.f2py.crackfortran.isrequired(var)
numpy.f2py.crackfortran.isroutine(rout)
numpy.f2py.crackfortran.isscalar(var)
numpy.f2py.crackfortran.issigned_array(var)
numpy.f2py.crackfortran.issigned_chararray(var)
numpy.f2py.crackfortran.issigned_long_longarray(var)
numpy.f2py.crackfortran.issigned_shortarray(var)
numpy.f2py.crackfortran.isstring(var)
numpy.f2py.crackfortran.isstringarray(var)
numpy.f2py.crackfortran.isstringfunction(rout)
numpy.f2py.crackfortran.issubroutine(rout)
numpy.f2py.crackfortran.issubroutine_wrap(rout)
numpy.f2py.crackfortran.isthreadsafe(rout)
numpy.f2py.crackfortran.istrue(var)
numpy.f2py.crackfortran.isunsigned(var)
numpy.f2py.crackfortran.isunsigned_char(var)
numpy.f2py.crackfortran.isunsigned_chararray(var)
numpy.f2py.crackfortran.isunsigned_long_long(var)
numpy.f2py.crackfortran.isunsigned_long_longarray(var)
numpy.f2py.crackfortran.isunsigned_short(var)
numpy.f2py.crackfortran.isunsigned_shortarray(var)
numpy.f2py.crackfortran.isunsignedarray(var)
numpy.f2py.crackfortran.l_not(f)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line, comma)
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e, g, l)
numpy.f2py.crackfortran.outmess(line, flag)
numpy.f2py.crackfortran.postcrack(block, args, tab)
numpy.f2py.crackfortran.postcrack2(block, tab, param_map)
numpy.f2py.crackfortran.readfortrancode(ffile, dowithline, istop)
numpy.f2py.crackfortran.reduce
(
function, sequence, initial
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.replace(str, d, defaultsep)
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl, attr, force)
numpy.f2py.crackfortran.setcharselector(decl, sel, force)
numpy.f2py.crackfortran.setkindselector(decl, sel, force)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.show(o, f)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.stripcomma(s)

 
 
numpy.f2py.diagnose.run_command(cmd)

 
 
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files, options)
numpy.f2py.f2py2e.dict_append(d_out, d_in)
numpy.f2py.f2py2e.write(self, string)
numpy.f2py.f2py2e.filter_files(prefix, suffix, files, remove_prefix)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.outmess(t)
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)
numpy.f2py.f2py2e.pprint(object, stream, indent, width, depth)

 
 
numpy.f2py.f2py_testing.jiffies(_load_time)
numpy.f2py.f2py_testing.memusage(processName, instance)
numpy.f2py.f2py_testing.run(runtest, test_functions, repeat)

 
 
numpy.f2py.f90mod_rules.applyrules(rules, d, var)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.containscommon(rout)
numpy.f2py.f90mod_rules.containsmodule(block)
numpy.f2py.f90mod_rules.debugcapi(var)
numpy.f2py.f90mod_rules.dictappend(rd, ar)
numpy.f2py.f90mod_rules.write(self, string)
numpy.f2py.f90mod_rules.findf90modules(m)
numpy.f2py.f90mod_rules.flatlist(l)
numpy.f2py.f90mod_rules.gentitle(name)
numpy.f2py.f90mod_rules.get_kind(var)
numpy.f2py.f90mod_rules.getargs(rout)
numpy.f2py.f90mod_rules.getargs2(rout)
numpy.f2py.f90mod_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.f90mod_rules.getcallstatement(rout)
numpy.f2py.f90mod_rules.getfortranname(rout)
numpy.f2py.f90mod_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.f90mod_rules.getpymethoddef(rout)
numpy.f2py.f90mod_rules.getrestdoc(rout)
numpy.f2py.f90mod_rules.getusercode(rout)
numpy.f2py.f90mod_rules.getusercode1(rout)
numpy.f2py.f90mod_rules.hasassumedshape(rout)
numpy.f2py.f90mod_rules.hasbody(rout)
numpy.f2py.f90mod_rules.hascallstatement(rout)
numpy.f2py.f90mod_rules.hascommon(rout)
numpy.f2py.f90mod_rules.hasexternals(rout)
numpy.f2py.f90mod_rules.hasinitvalue(var)
numpy.f2py.f90mod_rules.hasinitvalueasstring(var)
numpy.f2py.f90mod_rules.hasnote(var)
numpy.f2py.f90mod_rules.hasresultnote(rout)
numpy.f2py.f90mod_rules.hasvariables(rout)
numpy.f2py.f90mod_rules.isallocatable(var)
numpy.f2py.f90mod_rules.isarray(var)
numpy.f2py.f90mod_rules.isarrayofstrings(var)
numpy.f2py.f90mod_rules.ischaracter(var)
numpy.f2py.f90mod_rules.iscomplex(var)
numpy.f2py.f90mod_rules.iscomplexarray(var)
numpy.f2py.f90mod_rules.iscomplexfunction(rout)
numpy.f2py.f90mod_rules.iscomplexfunction_warn(rout)
numpy.f2py.f90mod_rules.isdouble(var)
numpy.f2py.f90mod_rules.isdummyroutine(rout)
numpy.f2py.f90mod_rules.isexternal(var)
numpy.f2py.f90mod_rules.isfalse(var)
numpy.f2py.f90mod_rules.isfunction(rout)
numpy.f2py.f90mod_rules.isfunction_wrap(rout)
numpy.f2py.f90mod_rules.isint1array(var)
numpy.f2py.f90mod_rules.isinteger(var)
numpy.f2py.f90mod_rules.isintent_aligned16(var)
numpy.f2py.f90mod_rules.isintent_aligned4(var)
numpy.f2py.f90mod_rules.isintent_aligned8(var)
numpy.f2py.f90mod_rules.isintent_aux(var)
numpy.f2py.f90mod_rules.isintent_c(var)
numpy.f2py.f90mod_rules.isintent_cache(var)
numpy.f2py.f90mod_rules.isintent_callback(var)
numpy.f2py.f90mod_rules.isintent_copy(var)
numpy.f2py.f90mod_rules.isintent_hide(var)
numpy.f2py.f90mod_rules.isintent_in(var)
numpy.f2py.f90mod_rules.isintent_inout(var)
numpy.f2py.f90mod_rules.isintent_inplace(var)
numpy.f2py.f90mod_rules.isintent_nothide(var)
numpy.f2py.f90mod_rules.isintent_out(var)
numpy.f2py.f90mod_rules.isintent_overwrite(var)
numpy.f2py.f90mod_rules.islogical(var)
numpy.f2py.f90mod_rules.islogicalfunction(rout)
numpy.f2py.f90mod_rules.islong_complex(var)
numpy.f2py.f90mod_rules.islong_double(var)
numpy.f2py.f90mod_rules.islong_doublefunction(rout)
numpy.f2py.f90mod_rules.islong_long(var)
numpy.f2py.f90mod_rules.islong_longfunction(rout)
numpy.f2py.f90mod_rules.ismodule(rout)
numpy.f2py.f90mod_rules.ismoduleroutine(rout)
numpy.f2py.f90mod_rules.ismutable(var)
numpy.f2py.f90mod_rules.isoptional(var)
numpy.f2py.f90mod_rules.isprivate(var)
numpy.f2py.f90mod_rules.isreal(var)
numpy.f2py.f90mod_rules.isrequired(var)
numpy.f2py.f90mod_rules.isroutine(rout)
numpy.f2py.f90mod_rules.isscalar(var)
numpy.f2py.f90mod_rules.issigned_array(var)
numpy.f2py.f90mod_rules.issigned_chararray(var)
numpy.f2py.f90mod_rules.issigned_long_longarray(var)
numpy.f2py.f90mod_rules.issigned_shortarray(var)
numpy.f2py.f90mod_rules.isstring(var)
numpy.f2py.f90mod_rules.isstringarray(var)
numpy.f2py.f90mod_rules.isstringfunction(rout)
numpy.f2py.f90mod_rules.issubroutine(rout)
numpy.f2py.f90mod_rules.issubroutine_wrap(rout)
numpy.f2py.f90mod_rules.isthreadsafe(rout)
numpy.f2py.f90mod_rules.istrue(var)
numpy.f2py.f90mod_rules.isunsigned(var)
numpy.f2py.f90mod_rules.isunsigned_char(var)
numpy.f2py.f90mod_rules.isunsigned_chararray(var)
numpy.f2py.f90mod_rules.isunsigned_long_long(var)
numpy.f2py.f90mod_rules.isunsigned_long_longarray(var)
numpy.f2py.f90mod_rules.isunsigned_short(var)
numpy.f2py.f90mod_rules.isunsigned_shortarray(var)
numpy.f2py.f90mod_rules.isunsignedarray(var)
numpy.f2py.f90mod_rules.l_not(f)
numpy.f2py.f90mod_rules.outmess(t)
numpy.f2py.f90mod_rules.reduce
(
function, sequence, initial
numpy.f2py.f90mod_rules.replace(str, d, defaultsep)
numpy.f2py.f90mod_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.f90mod_rules.stripcomma(s)

 
 
numpy.f2py.func2subr.applyrules(rules, d, var)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.containscommon(rout)
numpy.f2py.func2subr.containsmodule(block)
numpy.f2py.func2subr.createfuncwrapper(rout, signature)
numpy.f2py.func2subr.createsubrwrapper(rout, signature)
numpy.f2py.func2subr.debugcapi(var)
numpy.f2py.func2subr.dictappend(rd, ar)
numpy.f2py.func2subr.write(self, string)
numpy.f2py.func2subr.flatlist(l)
numpy.f2py.func2subr.gentitle(name)
numpy.f2py.func2subr.get_kind(var)
numpy.f2py.func2subr.getargs(rout)
numpy.f2py.func2subr.getargs2(rout)
numpy.f2py.func2subr.getcallprotoargument(rout, cb_map)
numpy.f2py.func2subr.getcallstatement(rout)
numpy.f2py.func2subr.getfortranname(rout)
numpy.f2py.func2subr.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.func2subr.getpymethoddef(rout)
numpy.f2py.func2subr.getrestdoc(rout)
numpy.f2py.func2subr.getusercode(rout)
numpy.f2py.func2subr.getusercode1(rout)
numpy.f2py.func2subr.hasassumedshape(rout)
numpy.f2py.func2subr.hasbody(rout)
numpy.f2py.func2subr.hascallstatement(rout)
numpy.f2py.func2subr.hascommon(rout)
numpy.f2py.func2subr.hasexternals(rout)
numpy.f2py.func2subr.hasinitvalue(var)
numpy.f2py.func2subr.hasinitvalueasstring(var)
numpy.f2py.func2subr.hasnote(var)
numpy.f2py.func2subr.hasresultnote(rout)
numpy.f2py.func2subr.hasvariables(rout)
numpy.f2py.func2subr.isallocatable(var)
numpy.f2py.func2subr.isarray(var)
numpy.f2py.func2subr.isarrayofstrings(var)
numpy.f2py.func2subr.ischaracter(var)
numpy.f2py.func2subr.iscomplex(var)
numpy.f2py.func2subr.iscomplexarray(var)
numpy.f2py.func2subr.iscomplexfunction(rout)
numpy.f2py.func2subr.iscomplexfunction_warn(rout)
numpy.f2py.func2subr.isdouble(var)
numpy.f2py.func2subr.isdummyroutine(rout)
numpy.f2py.func2subr.isexternal(var)
numpy.f2py.func2subr.isfalse(var)
numpy.f2py.func2subr.isfunction(rout)
numpy.f2py.func2subr.isfunction_wrap(rout)
numpy.f2py.func2subr.isint1array(var)
numpy.f2py.func2subr.isinteger(var)
numpy.f2py.func2subr.isintent_aligned16(var)
numpy.f2py.func2subr.isintent_aligned4(var)
numpy.f2py.func2subr.isintent_aligned8(var)
numpy.f2py.func2subr.isintent_aux(var)
numpy.f2py.func2subr.isintent_c(var)
numpy.f2py.func2subr.isintent_cache(var)
numpy.f2py.func2subr.isintent_callback(var)
numpy.f2py.func2subr.isintent_copy(var)
numpy.f2py.func2subr.isintent_hide(var)
numpy.f2py.func2subr.isintent_in(var)
numpy.f2py.func2subr.isintent_inout(var)
numpy.f2py.func2subr.isintent_inplace(var)
numpy.f2py.func2subr.isintent_nothide(var)
numpy.f2py.func2subr.isintent_out(var)
numpy.f2py.func2subr.isintent_overwrite(var)
numpy.f2py.func2subr.islogical(var)
numpy.f2py.func2subr.islogicalfunction(rout)
numpy.f2py.func2subr.islong_complex(var)
numpy.f2py.func2subr.islong_double(var)
numpy.f2py.func2subr.islong_doublefunction(rout)
numpy.f2py.func2subr.islong_long(var)
numpy.f2py.func2subr.islong_longfunction(rout)
numpy.f2py.func2subr.ismodule(rout)
numpy.f2py.func2subr.ismoduleroutine(rout)
numpy.f2py.func2subr.ismutable(var)
numpy.f2py.func2subr.isoptional(var)
numpy.f2py.func2subr.isprivate(var)
numpy.f2py.func2subr.isreal(var)
numpy.f2py.func2subr.isrequired(var)
numpy.f2py.func2subr.isroutine(rout)
numpy.f2py.func2subr.isscalar(var)
numpy.f2py.func2subr.issigned_array(var)
numpy.f2py.func2subr.issigned_chararray(var)
numpy.f2py.func2subr.issigned_long_longarray(var)
numpy.f2py.func2subr.issigned_shortarray(var)
numpy.f2py.func2subr.isstring(var)
numpy.f2py.func2subr.isstringarray(var)
numpy.f2py.func2subr.isstringfunction(rout)
numpy.f2py.func2subr.issubroutine(rout)
numpy.f2py.func2subr.issubroutine_wrap(rout)
numpy.f2py.func2subr.isthreadsafe(rout)
numpy.f2py.func2subr.istrue(var)
numpy.f2py.func2subr.isunsigned(var)
numpy.f2py.func2subr.isunsigned_char(var)
numpy.f2py.func2subr.isunsigned_chararray(var)
numpy.f2py.func2subr.isunsigned_long_long(var)
numpy.f2py.func2subr.isunsigned_long_longarray(var)
numpy.f2py.func2subr.isunsigned_short(var)
numpy.f2py.func2subr.isunsigned_shortarray(var)
numpy.f2py.func2subr.isunsignedarray(var)
numpy.f2py.func2subr.l_not(f)
numpy.f2py.func2subr.outmess(t)
numpy.f2py.func2subr.reduce
(
function, sequence, initial
numpy.f2py.func2subr.replace(str, d, defaultsep)
numpy.f2py.func2subr.pprint(object, stream, indent, width, depth)
numpy.f2py.func2subr.stripcomma(s)

 
 

 
 
numpy.f2py.rules.applyrules(rules, d, var)
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m, um)
numpy.f2py.rules.cb_routsign2map(rout, um)
numpy.f2py.rules.cb_sign2map(a, var, index)
numpy.f2py.rules.common_sign2map(a, var)
numpy.f2py.rules.containscommon(rout)
numpy.f2py.rules.containsmodule(block)
numpy.f2py.rules.debugcapi(var)
numpy.f2py.rules.dictappend(rd, ar)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.flatlist(l)
numpy.f2py.rules.gentitle(name)
numpy.f2py.rules.get_kind(var)
numpy.f2py.rules.getargs(rout)
numpy.f2py.rules.getargs2(rout)
numpy.f2py.rules.getarrdims(a, var, verbose)
numpy.f2py.rules.getarrdocsign(a, var)
numpy.f2py.rules.getcallprotoargument(rout, cb_map)
numpy.f2py.rules.getcallstatement(rout)
numpy.f2py.rules.getctype(var)
numpy.f2py.rules.getfortranname(rout)
numpy.f2py.rules.getinit(a, var)
numpy.f2py.rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.rules.getpydocsign(a, var)
numpy.f2py.rules.getpymethoddef(rout)
numpy.f2py.rules.getrestdoc(rout)
numpy.f2py.rules.getstrlength(var)
numpy.f2py.rules.getusercode(rout)
numpy.f2py.rules.getusercode1(rout)
numpy.f2py.rules.hasassumedshape(rout)
numpy.f2py.rules.hasbody(rout)
numpy.f2py.rules.hascallstatement(rout)
numpy.f2py.rules.hascommon(rout)
numpy.f2py.rules.hasexternals(rout)
numpy.f2py.rules.hasinitvalue(var)
numpy.f2py.rules.hasinitvalueasstring(var)
numpy.f2py.rules.hasnote(var)
numpy.f2py.rules.hasresultnote(rout)
numpy.f2py.rules.hasvariables(rout)
numpy.f2py.rules.isallocatable(var)
numpy.f2py.rules.isarray(var)
numpy.f2py.rules.isarrayofstrings(var)
numpy.f2py.rules.ischaracter(var)
numpy.f2py.rules.iscomplex(var)
numpy.f2py.rules.iscomplexarray(var)
numpy.f2py.rules.iscomplexfunction(rout)
numpy.f2py.rules.iscomplexfunction_warn(rout)
numpy.f2py.rules.isdouble(var)
numpy.f2py.rules.isdummyroutine(rout)
numpy.f2py.rules.isexternal(var)
numpy.f2py.rules.isfalse(var)
numpy.f2py.rules.isfunction(rout)
numpy.f2py.rules.isfunction_wrap(rout)
numpy.f2py.rules.isint1array(var)
numpy.f2py.rules.isinteger(var)
numpy.f2py.rules.isintent_aligned16(var)
numpy.f2py.rules.isintent_aligned4(var)
numpy.f2py.rules.isintent_aligned8(var)
numpy.f2py.rules.isintent_aux(var)
numpy.f2py.rules.isintent_c(var)
numpy.f2py.rules.isintent_cache(var)
numpy.f2py.rules.isintent_callback(var)
numpy.f2py.rules.isintent_copy(var)
numpy.f2py.rules.isintent_hide(var)
numpy.f2py.rules.isintent_in(var)
numpy.f2py.rules.isintent_inout(var)
numpy.f2py.rules.isintent_inplace(var)
numpy.f2py.rules.isintent_nothide(var)
numpy.f2py.rules.isintent_out(var)
numpy.f2py.rules.isintent_overwrite(var)
numpy.f2py.rules.islogical(var)
numpy.f2py.rules.islogicalfunction(rout)
numpy.f2py.rules.islong_complex(var)
numpy.f2py.rules.islong_double(var)
numpy.f2py.rules.islong_doublefunction(rout)
numpy.f2py.rules.islong_long(var)
numpy.f2py.rules.islong_longfunction(rout)
numpy.f2py.rules.ismodule(rout)
numpy.f2py.rules.ismoduleroutine(rout)
numpy.f2py.rules.ismutable(var)
numpy.f2py.rules.isoptional(var)
numpy.f2py.rules.isprivate(var)
numpy.f2py.rules.isreal(var)
numpy.f2py.rules.isrequired(var)
numpy.f2py.rules.isroutine(rout)
numpy.f2py.rules.isscalar(var)
numpy.f2py.rules.issigned_array(var)
numpy.f2py.rules.issigned_chararray(var)
numpy.f2py.rules.issigned_long_longarray(var)
numpy.f2py.rules.issigned_shortarray(var)
numpy.f2py.rules.isstring(var)
numpy.f2py.rules.isstringarray(var)
numpy.f2py.rules.isstringfunction(rout)
numpy.f2py.rules.issubroutine(rout)
numpy.f2py.rules.issubroutine_wrap(rout)
numpy.f2py.rules.isthreadsafe(rout)
numpy.f2py.rules.istrue(var)
numpy.f2py.rules.isunsigned(var)
numpy.f2py.rules.isunsigned_char(var)
numpy.f2py.rules.isunsigned_chararray(var)
numpy.f2py.rules.isunsigned_long_long(var)
numpy.f2py.rules.isunsigned_long_longarray(var)
numpy.f2py.rules.isunsigned_short(var)
numpy.f2py.rules.isunsigned_shortarray(var)
numpy.f2py.rules.isunsignedarray(var)
numpy.f2py.rules.l_not(f)
numpy.f2py.rules.markoutercomma(line, comma)
numpy.f2py.rules.modsign2map(m)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.reduce
(
function, sequence, initial
numpy.f2py.rules.replace(str, d, defaultsep)
numpy.f2py.rules.routsign2map(rout)
numpy.f2py.rules.pprint(object, stream, indent, width, depth)
numpy.f2py.rules.sign2map(a, var)
numpy.f2py.rules.stripcomma(s)

 
 

 
 
numpy.f2py.use_rules.applyrules(rules, d, var)
numpy.f2py.use_rules.buildusevar(name, realname, vars, usemodulename)
numpy.f2py.use_rules.buildusevars(m, r)
numpy.f2py.use_rules.containscommon(rout)
numpy.f2py.use_rules.containsmodule(block)
numpy.f2py.use_rules.debugcapi(var)
numpy.f2py.use_rules.dictappend(rd, ar)
numpy.f2py.use_rules.write(self, string)
numpy.f2py.use_rules.flatlist(l)
numpy.f2py.use_rules.gentitle(name)
numpy.f2py.use_rules.get_kind(var)
numpy.f2py.use_rules.getargs(rout)
numpy.f2py.use_rules.getargs2(rout)
numpy.f2py.use_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.use_rules.getcallstatement(rout)
numpy.f2py.use_rules.getfortranname(rout)
numpy.f2py.use_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.use_rules.getpymethoddef(rout)
numpy.f2py.use_rules.getrestdoc(rout)
numpy.f2py.use_rules.getusercode(rout)
numpy.f2py.use_rules.getusercode1(rout)
numpy.f2py.use_rules.hasassumedshape(rout)
numpy.f2py.use_rules.hasbody(rout)
numpy.f2py.use_rules.hascallstatement(rout)
numpy.f2py.use_rules.hascommon(rout)
numpy.f2py.use_rules.hasexternals(rout)
numpy.f2py.use_rules.hasinitvalue(var)
numpy.f2py.use_rules.hasinitvalueasstring(var)
numpy.f2py.use_rules.hasnote(var)
numpy.f2py.use_rules.hasresultnote(rout)
numpy.f2py.use_rules.hasvariables(rout)
numpy.f2py.use_rules.isallocatable(var)
numpy.f2py.use_rules.isarray(var)
numpy.f2py.use_rules.isarrayofstrings(var)
numpy.f2py.use_rules.ischaracter(var)
numpy.f2py.use_rules.iscomplex(var)
numpy.f2py.use_rules.iscomplexarray(var)
numpy.f2py.use_rules.iscomplexfunction(rout)
numpy.f2py.use_rules.iscomplexfunction_warn(rout)
numpy.f2py.use_rules.isdouble(var)
numpy.f2py.use_rules.isdummyroutine(rout)
numpy.f2py.use_rules.isexternal(var)
numpy.f2py.use_rules.isfalse(var)
numpy.f2py.use_rules.isfunction(rout)
numpy.f2py.use_rules.isfunction_wrap(rout)
numpy.f2py.use_rules.isint1array(var)
numpy.f2py.use_rules.isinteger(var)
numpy.f2py.use_rules.isintent_aligned16(var)
numpy.f2py.use_rules.isintent_aligned4(var)
numpy.f2py.use_rules.isintent_aligned8(var)
numpy.f2py.use_rules.isintent_aux(var)
numpy.f2py.use_rules.isintent_c(var)
numpy.f2py.use_rules.isintent_cache(var)
numpy.f2py.use_rules.isintent_callback(var)
numpy.f2py.use_rules.isintent_copy(var)
numpy.f2py.use_rules.isintent_hide(var)
numpy.f2py.use_rules.isintent_in(var)
numpy.f2py.use_rules.isintent_inout(var)
numpy.f2py.use_rules.isintent_inplace(var)
numpy.f2py.use_rules.isintent_nothide(var)
numpy.f2py.use_rules.isintent_out(var)
numpy.f2py.use_rules.isintent_overwrite(var)
numpy.f2py.use_rules.islogical(var)
numpy.f2py.use_rules.islogicalfunction(rout)
numpy.f2py.use_rules.islong_complex(var)
numpy.f2py.use_rules.islong_double(var)
numpy.f2py.use_rules.islong_doublefunction(rout)
numpy.f2py.use_rules.islong_long(var)
numpy.f2py.use_rules.islong_longfunction(rout)
numpy.f2py.use_rules.ismodule(rout)
numpy.f2py.use_rules.ismoduleroutine(rout)
numpy.f2py.use_rules.ismutable(var)
numpy.f2py.use_rules.isoptional(var)
numpy.f2py.use_rules.isprivate(var)
numpy.f2py.use_rules.isreal(var)
numpy.f2py.use_rules.isrequired(var)
numpy.f2py.use_rules.isroutine(rout)
numpy.f2py.use_rules.isscalar(var)
numpy.f2py.use_rules.issigned_array(var)
numpy.f2py.use_rules.issigned_chararray(var)
numpy.f2py.use_rules.issigned_long_longarray(var)
numpy.f2py.use_rules.issigned_shortarray(var)
numpy.f2py.use_rules.isstring(var)
numpy.f2py.use_rules.isstringarray(var)
numpy.f2py.use_rules.isstringfunction(rout)
numpy.f2py.use_rules.issubroutine(rout)
numpy.f2py.use_rules.issubroutine_wrap(rout)
numpy.f2py.use_rules.isthreadsafe(rout)
numpy.f2py.use_rules.istrue(var)
numpy.f2py.use_rules.isunsigned(var)
numpy.f2py.use_rules.isunsigned_char(var)
numpy.f2py.use_rules.isunsigned_chararray(var)
numpy.f2py.use_rules.isunsigned_long_long(var)
numpy.f2py.use_rules.isunsigned_long_longarray(var)
numpy.f2py.use_rules.isunsigned_short(var)
numpy.f2py.use_rules.isunsigned_shortarray(var)
numpy.f2py.use_rules.isunsignedarray(var)
numpy.f2py.use_rules.l_not(f)
numpy.f2py.use_rules.outmess(t)
numpy.f2py.use_rules.reduce
(
function, sequence, initial
numpy.f2py.use_rules.replace(str, d, defaultsep)
numpy.f2py.use_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.use_rules.stripcomma(s)

 
 

 
 
numpy.fft.fftpack._cook_nd_args(a, s, axes, invreal)
numpy.fft.fftpack._raw_fft(a, n, axis, init_function, work_function, fft_cache)
numpy.fft.fftpack._raw_fftnd(a, s, axes, function)
numpy.fft.fftpack.asarray(a, dtype, order)
numpy.fft.fftpack.fft(a, n, axis)
numpy.fft.fftpack.fft2(a, s, axes)
numpy.fft.fftpack.fftn(a, s, axes)
numpy.fft.fftpack.hfft(a, n, axis)
numpy.fft.fftpack.ifft(a, n, axis)
numpy.fft.fftpack.ifft2(a, s, axes)
numpy.fft.fftpack.ifftn(a, s, axes)
numpy.fft.fftpack.ihfft(a, n, axis)
numpy.fft.fftpack.irfft(a, n, axis)
numpy.fft.fftpack.irfft2(a, s, axes)
numpy.fft.fftpack.irfftn(a, s, axes)
numpy.fft.fftpack.rfft(a, n, axis)
numpy.fft.fftpack.rfft2(a, s, axes)
numpy.fft.fftpack.rfftn(a, s, axes)
numpy.fft.fftpack.shape(a)
numpy.fft.fftpack.swapaxes(a, axis1, axis2)
numpy.fft.fftpack.take(a, indices, axis, out, mode)
numpy.fft.fftpack.zeros
(
shape, dtype=float, order=C

 
 
numpy.fft.fftpack_lite.cfftb
numpy.fft.fftpack_lite.cfftf
numpy.fft.fftpack_lite.cffti
numpy.fft.fftpack_lite.rfftb
numpy.fft.fftpack_lite.rfftf
numpy.fft.fftpack_lite.rffti

 
 
numpy.fft.helper.arange
(
start, stop, step,, dtype=None
numpy.fft.helper.asarray(a, dtype, order)
numpy.fft.helper.concatenate
(
(a1, a2, ...
numpy.fft.helper.empty
(
shape, dtype=float, order=C
numpy.fft.helper.fftfreq(n, d)
numpy.fft.helper.fftshift(x, axes)
numpy.fft.helper.ifftshift(x, axes)
numpy.fft.helper.rfftfreq(n, d)
numpy.fft.helper.take(a, indices, axis, out, mode)

 
 

 
 
numpy.fft.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.lib._compiled_base._insert
numpy.lib._compiled_base.add_docstring
(
obj, docstring
numpy.lib._compiled_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib._compiled_base.bincount
(
x, weights=None, minlength=None
numpy.lib._compiled_base.digitize
(
x, bins, right=False
numpy.lib._compiled_base.interp
numpy.lib._compiled_base.packbits
(
myarray, axis=None
numpy.lib._compiled_base.ravel_multi_index
(
multi_index, dims, mode=raise, order=C
numpy.lib._compiled_base.unpackbits
(
myarray, axis=None
numpy.lib._compiled_base.unravel_index
(
indices, dims, order=C

 
 

 
 

 
 

 
 
numpy.lib.arraypad._append_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._append_edge(arr, pad_amt, axis)
numpy.lib.arraypad._append_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._arange_ndarray(arr, shape, axis, reverse)
numpy.lib.arraypad._normalize_shape(narray, shape)
numpy.lib.arraypad._pad_ref(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_sym(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_wrap(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._prepend_edge(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._round_ifneeded(arr, dtype)
numpy.lib.arraypad._validate_lengths(narray, number_elements)
numpy.lib.arraypad.pad(array, pad_width, mode)

 
 
numpy.lib.arraysetops.ediff1d(ary, to_end, to_begin)
numpy.lib.arraysetops.in1d(ar1, ar2, assume_unique, invert)
numpy.lib.arraysetops.intersect1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setdiff1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setxor1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.union1d(ar1, ar2)
numpy.lib.arraysetops.unique(ar, return_index, return_inverse, return_counts)

 
 

 
 
numpy.lib.financial._convert_when(when)
numpy.lib.financial._g_div_gp(r, n, p, x, y, w)
numpy.lib.financial._rbl(rate, per, pmt, pv, when)
numpy.lib.financial.fv(rate, nper, pmt, pv, when)
numpy.lib.financial.ipmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.irr(values)
numpy.lib.financial.mirr(values, finance_rate, reinvest_rate)
numpy.lib.financial.nper(rate, pmt, pv, fv, when)
numpy.lib.financial.npv(rate, values)
numpy.lib.financial.pmt(rate, nper, pv, fv, when)
numpy.lib.financial.ppmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.pv(rate, nper, pmt, fv, when)
numpy.lib.financial.rate(nper, pmt, pv, fv, when, guess, tol, maxiter)

 
 
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._read_array_header(fp, version)
numpy.lib.format._read_bytes(fp, size, error_template)
numpy.lib.format._write_array_header(fp, d, version)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.isfileobj(f)
numpy.lib.format.magic(major, minor)
numpy.lib.format.open_memmap(filename, mode, dtype, shape, fortran_order, version)
numpy.lib.format.read_array(fp)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_array_header_2_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.safe_eval(source)
numpy.lib.format.write_array(fp, array, version)
numpy.lib.format.write_array_header_1_0(fp, d)
numpy.lib.format.write_array_header_2_0(fp, d)

 
 
numpy.lib.function_base._chbevl(x, vals)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base._insert
numpy.lib.function_base._median(a, axis, out, overwrite_input)
numpy.lib.function_base._percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base._ureduce(a, func)
numpy.lib.function_base.add_docstring
(
obj, docstring
numpy.lib.function_base.add_newdoc(place, obj, doc)
numpy.lib.function_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib.function_base.angle(z, deg)
numpy.lib.function_base.append(arr, values, axis)
numpy.lib.function_base.arange
(
start, stop, step,, dtype=None
numpy.lib.function_base.around(a, decimals, out)
numpy.lib.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.function_base.asanyarray(a, dtype, order)
numpy.lib.function_base.asarray(a, dtype, order)
numpy.lib.function_base.asarray_chkfinite(a, dtype, order)
numpy.lib.function_base.average(a, axis, weights, returned)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.bincount
(
x, weights=None, minlength=None
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.interp
numpy.lib.function_base.concatenate
(
(a1, a2, ...
numpy.lib.function_base.copy(a, order)
numpy.lib.function_base.corrcoef(x, y, rowvar, bias, ddof)
numpy.lib.function_base.cov(m, y, rowvar, bias, ddof)
numpy.lib.function_base.delete(arr, obj, axis)
numpy.lib.function_base.diag(v, k)
numpy.lib.function_base.diff(a, n, axis)
numpy.lib.function_base.digitize
(
x, bins, right=False
numpy.lib.function_base.disp(mesg, device, linefeed)
numpy.lib.function_base.dot
(
a, b, out=None
numpy.lib.function_base.empty
(
shape, dtype=float, order=C
numpy.lib.function_base.empty_like
(
a, dtype=None, order=K, subok=True
numpy.lib.function_base.extract(condition, arr)
numpy.lib.function_base.frompyfunc
(
func, nin, nout
numpy.lib.function_base.gradient(f)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.histogram(a, bins, range, normed, weights, density)
numpy.lib.function_base.histogramdd(sample, bins, range, normed, weights)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr, obj, values, axis)
numpy.lib.function_base.interp(x, xp, fp, left, right)
numpy.lib.function_base.isscalar(num)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M, beta)
numpy.lib.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.lib.function_base.mean(a, axis, dtype, out, keepdims)
numpy.lib.function_base.median(a, axis, out, overwrite_input, keepdims)
numpy.lib.function_base.msort(a)
numpy.lib.function_base.nonzero(a)
numpy.lib.function_base.ones(shape, dtype, order)
numpy.lib.function_base.partition(a, kth, axis, kind, order)
numpy.lib.function_base.percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base.piecewise(x, condlist, funclist)
numpy.lib.function_base.place(arr, mask, vals)
numpy.lib.function_base.ravel(a, order)
numpy.lib.function_base.select(condlist, choicelist, default)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort(a, axis, kind, order)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.take(a, indices, axis, out, mode)
numpy.lib.function_base.trapz(y, x, dx, axis)
numpy.lib.function_base.trim_zeros(filt, trim)
numpy.lib.function_base.unwrap(p, discont, axis)

 
 

 
 

 
 
numpy.lib.nanfunctions._copyto(a, val, mask)
numpy.lib.nanfunctions._divide_by_count(a, b, out)
numpy.lib.nanfunctions._nanmedian(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanmedian1d(arr1d, overwrite_input)
numpy.lib.nanfunctions._nanmedian_small(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions._nanpercentile1d(arr1d, q, overwrite_input, interpolation)
numpy.lib.nanfunctions._replace_nan(a, val)
numpy.lib.nanfunctions._ureduce(a, func)
numpy.lib.nanfunctions.nanargmax(a, axis)
numpy.lib.nanfunctions.nanargmin(a, axis)
numpy.lib.nanfunctions.nanmax(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanmean(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanmedian(a, axis, out, overwrite_input, keepdims)
numpy.lib.nanfunctions.nanmin(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions.nanstd(a, axis, dtype, out, ddof, keepdims)
numpy.lib.nanfunctions.nansum(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanvar(a, axis, dtype, out, ddof, keepdims)

 
 

 
 
numpy.lib.polynomial._raise_power(astr, wrap)
numpy.lib.polynomial.diag(v, k)
numpy.lib.polynomial.dot
(
a, b, out=None
numpy.lib.polynomial.eigvals(a)

 
 

 
 
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath.any(a, axis, out, keepdims)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.asarray(a, dtype, order)
numpy.lib.scimath.isreal(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n, x)
numpy.lib.scimath.power(x, p)
numpy.lib.scimath.sqrt(x)

 
 
numpy.lib.setup.configuration(parent_package, top_path)
numpy.lib.setup.join(path)

 
 
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base.apply_along_axis(func1d, axis, arr)
numpy.lib.shape_base.apply_over_axes(func, a, axes)
numpy.lib.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.shape_base.array_split(ary, indices_or_sections, axis)
numpy.lib.shape_base.asanyarray(a, dtype, order)
numpy.lib.shape_base.asarray(a, dtype, order)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.concatenate
(
(a1, a2, ...
numpy.lib.shape_base.dsplit(ary, indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a, axis)
numpy.lib.shape_base.hsplit(ary, indices_or_sections)
numpy.lib.shape_base.isscalar(num)
numpy.lib.shape_base.kron(a, b)
numpy.lib.shape_base.outer(a, b, out)
numpy.lib.shape_base.product(a, axis, dtype, out, keepdims)
numpy.lib.shape_base.reshape(a, newshape, order)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.split(ary, indices_or_sections, axis)
numpy.lib.shape_base.tile(A, reps)
numpy.lib.shape_base.vsplit(ary, indices_or_sections)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.zeros
(
shape, dtype=float, order=C

 
 

 
 
numpy.lib.twodim_base._min_int(low, high)
numpy.lib.twodim_base.arange
(
start, stop, step,, dtype=None
numpy.lib.twodim_base.asanyarray(a, dtype, order)
numpy.lib.twodim_base.asarray(a, dtype, order)
numpy.lib.twodim_base.diag(v, k)
numpy.lib.twodim_base.diagflat(v, k)
numpy.lib.twodim_base.empty
(
shape, dtype=float, order=C
numpy.lib.twodim_base.eye(N, M, k, dtype)
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x, y, bins, range, normed, weights)

 
 
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.type_check.asanyarray(a, dtype, order)
numpy.lib.type_check.asarray(a, dtype, order)
numpy.lib.type_check.asfarray(a, dtype)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isneginf(x, y)
numpy.lib.type_check.isposinf(x, y)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars, typeset, default)
numpy.lib.type_check.nan_to_num(x)
numpy.lib.type_check.obj2sctype(rep, default)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a, tol)
numpy.lib.type_check.typename(char)
numpy.lib.type_check.zeros
(
shape, dtype=float, order=C

 
 
numpy.lib.ufunclike.fix(x, y)
numpy.lib.ufunclike.isneginf(x, y)
numpy.lib.ufunclike.isposinf(x, y)

 
 
numpy.lib.user_array.arange
(
start, stop, step,, dtype=None
numpy.lib.user_array.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.user_array.asarray(a, dtype, order)

 
 

 
 

 
 

 
 

 
 
numpy.linalg.lapack_lite.dgelsd
numpy.linalg.lapack_lite.dgeqrf
numpy.linalg.lapack_lite.dorgqr
numpy.linalg.lapack_lite.xerbla
numpy.linalg.lapack_lite.zgelsd
numpy.linalg.lapack_lite.zgeqrf
numpy.linalg.lapack_lite.zungqr

 
 
numpy.linalg.linalg._complexType(t, default)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._fastCopyAndTranspose
(
a
numpy.linalg.linalg._fastCopyAndTranspose(type)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._multi_svd_norm(x, row_axis, col_axis, op)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err, flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err, flag)
numpy.linalg.linalg._raise_linalgerror_singular(err, flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err, flag)
numpy.linalg.linalg._realType(t, default)
numpy.linalg.linalg.all(a, axis, out, keepdims)
numpy.linalg.linalg.amax(a, axis, out, keepdims)
numpy.linalg.linalg.amin(a, axis, out, keepdims)
numpy.linalg.linalg.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.linalg.linalg.asarray(a, dtype, order)
numpy.linalg.linalg.asfarray(a, dtype)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.cond(x, p)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.dot
(
a, b, out=None
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a, UPLO)
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a, UPLO)
numpy.linalg.linalg.empty
(
shape, dtype=float, order=C
numpy.linalg.linalg.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.linalg.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.ma.bench.compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
numpy.ma.bench.compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
numpy.ma.bench.compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
numpy.ma.bench.timer(s, v, nloop, nrep)

 
 

 
 

 
 

 
 
numpy.ma.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._eval(astr)
numpy.matrixlib.defmatrix._from_string(str, gdict, ldict)
numpy.matrixlib.defmatrix.asanyarray(a, dtype, order)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)
numpy.matrixlib.defmatrix.binary_repr(num, width)
numpy.matrixlib.defmatrix.bmat(obj, ldict, gdict)
numpy.matrixlib.defmatrix.concatenate
(
(a1, a2, ...
numpy.matrixlib.defmatrix.identity(n, dtype)
numpy.matrixlib.defmatrix.isscalar(num)
numpy.matrixlib.defmatrix.issubdtype(arg1, arg2)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)

 
 
numpy.matrixlib.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.polynomial.polyutils.as_series(alist, trim)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x, old, new)
numpy.polynomial.polyutils.mapparms(old, new)
numpy.polynomial.polyutils.trimcoef(c, tol)
numpy.polynomial.polyutils.trimseq(seq)

 
 
numpy.polynomial.setup.configuration(parent_package, top_path)

 
 
numpy.random.allocate_lock

 
 

 
 
numpy.random.mtrand.allocate_lock
numpy.random.mtrand._shape_from_size
numpy.random.mtrand.beta
numpy.random.mtrand.binomial
numpy.random.mtrand.bytes
numpy.random.mtrand.chisquare
numpy.random.mtrand.choice
numpy.random.mtrand.dirichlet
numpy.random.mtrand.exponential
numpy.random.mtrand.f
numpy.random.mtrand.gamma
numpy.random.mtrand.geometric
numpy.random.mtrand.get_state
numpy.random.mtrand.gumbel
numpy.random.mtrand.hypergeometric
numpy.random.mtrand.laplace
numpy.random.mtrand.logistic
numpy.random.mtrand.lognormal
numpy.random.mtrand.logseries
numpy.random.mtrand.multinomial
numpy.random.mtrand.multivariate_normal
numpy.random.mtrand.negative_binomial
numpy.random.mtrand.noncentral_chisquare
numpy.random.mtrand.noncentral_f
numpy.random.mtrand.normal
numpy.random.mtrand.pareto
numpy.random.mtrand.permutation
numpy.random.mtrand.poisson
numpy.random.mtrand.power
numpy.random.mtrand.rand
numpy.random.mtrand.randint
numpy.random.mtrand.randn
numpy.random.mtrand.random_integers
numpy.random.mtrand.random_sample
numpy.random.mtrand.rayleigh
numpy.random.mtrand.seed
numpy.random.mtrand.set_state
numpy.random.mtrand.shuffle
numpy.random.mtrand.standard_cauchy
numpy.random.mtrand.standard_exponential
numpy.random.mtrand.standard_gamma
numpy.random.mtrand.standard_normal
numpy.random.mtrand.standard_t
numpy.random.mtrand.triangular
numpy.random.mtrand.uniform
numpy.random.mtrand.vonmises
numpy.random.mtrand.wald
numpy.random.mtrand.weibull
numpy.random.mtrand.zipf

 
 
numpy.random.setup.configuration(parent_package, top_path)
numpy.random.setup.dirname(p)
numpy.random.setup.join(path)
numpy.random.setup.newer(source, target)
numpy.random.setup.split(p)

 
 
numpy.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.testing.decorators.deprecated(conditional)
numpy.testing.decorators.knownfailureif(fail_condition, msg)
numpy.testing.decorators.setastest(tf)
numpy.testing.decorators.skipif(skip_condition, msg)
numpy.testing.decorators.slow(t)

 
 

 
 

 
 

 
 
numpy.testing.setup.configuration(parent_package, top_path)

 
 
numpy.testing.utils.GetPerformanceAttributes(object, counter, instance, inum, format, machine)

 
 

 
 
 
 -----------------------------------------------------------------------------

 
Module: numpy.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy._import_tools-------------------------------------------------
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: PackageLoaderDebug
          +  _execcmd(self, cmdstr)

 
Module: numpy.add_newdocs-------------------------------------------------
      +Func: add_newdoc(place, obj, doc)

 
Module: numpy.compat-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargspec(func)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat._inspect-------------------------------------------------
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3DBA8>), (formatvarkw, <function <lambda> at 0x0000000002E3DC18>), (formatvalue, <function <lambda> at 0x0000000002E3DC88>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargs(co)
      +Func: getargspec(func)
      +Func: getargvalues(frame)
      +Func: iscode(object)
      +Func: isfunction(object)
      +Func: ismethod(object)
      +Func: joinseq(seq)
      +Func: strseq(object, convert, join)
    	  	  Default_Args:(join, <function joinseq at 0x0000000002E3D898>)

 
Module: numpy.compat.py3k-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.core-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _ufunc_reconstruct(module, name)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: hstack(tup)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core._dotblas-------------------------------------------------
    +Built-in Function: alterdot
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: inner
    	-Method Arguments:
a, b
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: vdot
    	-Method Arguments:
a, b

 
Module: numpy.core._dummy-------------------------------------------------
    (No members)

 
Module: numpy.core._internal-------------------------------------------------
      +Func: _add_trailing_padding(value, padding)
      +Func: _array_descr(descriptor)
      +Func: _commastring(astr)
    
   +Class: _ctypes
          +  data_as(self, obj)
          +  get_shape(self)
          +  get_strides(self)
          +  get_data(self)
          +  shape_as(self, obj)
          +  strides_as(self, obj)
          +  __init__(self, array, ptr)
        	  	  Default_Args:(ptr, None)
          +  get_as_parameter(self)
      +Func: _dtype_from_pep3118(spec, byteorder, is_subdtype)
    	  	  Default_Args:(byteorder, @), (is_subdtype, False)
      +Func: _gcd(a, b)
      +Func: _index_fields(ary, fields)
      +Func: _makenames_list(adict, align)
    
   +Class: _missing_ctypes
          +  c_void_p(self, num)
          +  cast(self, num, obj)
      +Func: _newnames(datatype, order)
      +Func: _prod(a)
      +Func: _reconstruct(subtype, shape, dtype)
      +Func: _usefields(adict, align)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)

 
Module: numpy.core._methods-------------------------------------------------
      +Func: _all(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _any(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _count_reduce_items(arr, axis)
      +Func: _mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: _sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False

 
Module: numpy.core.arrayprint-------------------------------------------------
    
   +Class: ComplexFormat
          +  __call__(self, x)
          +  __init__(self, x, precision, suppress_small)
    
   +Class: DatetimeFormat
          +  __call__(self, x)
          +  __init__(self, x, unit, timezone, casting)
        	  	  Default_Args:(unit, None), (timezone, None), (casting, same_kind)
    
   +Class: FloatFormat
          +  fillFormat(self, data)
          +  __call__(self, x, strip_zeros)
        	  	  Default_Args:(strip_zeros, True)
          +  __init__(self, data, precision, suppress_small, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: IntegerFormat
          +  __call__(self, x)
          +  __init__(self, data)
    
   +Class: LongComplexFormat
          +  __call__(self, x)
          +  __init__(self, precision)
    
   +Class: LongFloatFormat
          +  __call__(self, x)
          +  __init__(self, precision, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: TimedeltaFormat
          +  __call__(self, x)
          +  __init__(self, data)
      +Func: _array2string(a, max_line_width, precision, suppress_small, separator, prefix, formatter)
    	  	  Default_Args:(separator,  ), (prefix, ), (formatter, None)
      +Func: _boolFormatter(x)
      +Func: _convert_arrays(obj)
      +Func: _digits(x, precision, format)
      +Func: _extendLine(s, line, word, max_line_len, next_line_prefix)
      +Func: _formatArray(a, format_function, rank, max_line_len, next_line_prefix, separator, edge_items, summary_insert)
      +Func: _leading_trailing(a)
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: format_longfloat
    	-Method Arguments: None
      +Func: product(x, y)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: repr_format(x)
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)

 
Module: numpy.core.defchararray-------------------------------------------------
    
   +Class: str
        (No members)
    	   Positional_Args: args
      +Func: _get_num_chars(a)
    +Built-in Function: len
    	-Method Arguments:
object
      +Func: _to_string_or_unicode_array(result)
    
   +Class: unicode
        (No members)
    	   Positional_Args: args
    +Built-in Function: _vec_string
    	-Method Arguments: None
      +Func: add(x1, x2)
      +Func: array(obj, itemsize, copy, unicode, order)
    	  	  Default_Args:(itemsize, None), (copy, True), (unicode, None), (order, None)
      +Func: asarray(obj, itemsize, unicode, order)
    	  	  Default_Args:(itemsize, None), (unicode, None), (order, None)
    
   +Class: str
        (No members)
    
   +Class: bool_
        (No members)
      +Func: capitalize(a)
      +Func: center(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
      +Func: count(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: decode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: encode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: endswith(a, suffix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: equal(x1, x2)
      +Func: expandtabs(a, tabsize)
    	  	  Default_Args:(tabsize, 8)
      +Func: find(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: greater(x1, x2)
      +Func: greater_equal(x1, x2)
      +Func: index(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
    
   +Class: integer
        (No members)
      +Func: isalnum(a)
      +Func: isalpha(a)
      +Func: isdecimal(a)
      +Func: isdigit(a)
      +Func: islower(a)
      +Func: isnumeric(a)
      +Func: isspace(a)
      +Func: istitle(a)
      +Func: isupper(a)
      +Func: join(sep, seq)
      +Func: less(x1, x2)
      +Func: less_equal(x1, x2)
      +Func: ljust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: long
        (No members)
      +Func: lower(a)
      +Func: lstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: mod(a, values)
      +Func: multiply(a, i)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: not_equal(x1, x2)
    
   +Class: object_
        (No members)
      +Func: partition(a, sep)
      +Func: replace(a, old, new, count)
    	  	  Default_Args:(count, None)
      +Func: rfind(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rindex(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rjust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
      +Func: rpartition(a, sep)
      +Func: rsplit(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: rstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: split(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: splitlines(a, keepends)
    	  	  Default_Args:(keepends, None)
      +Func: startswith(a, prefix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: str_len(a)
    
   +Class: string_
        (No members)
      +Func: strip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: swapcase(a)
      +Func: title(a)
      +Func: translate(a, table, deletechars)
    	  	  Default_Args:(deletechars, None)
    
   +Class: unicode_
        (No members)
      +Func: upper(a)
      +Func: zfill(a, width)

 
Module: numpy.core.fromnumeric-------------------------------------------------
    
   +Class: VisibleDeprecationWarning
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: generator
        (No members)
    +Built-in Function: sum
    	-Method Arguments:
sequence, start
      +Func: _wrapit(obj, method)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ndim(a)
      +Func: nonzero(a)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: shape(a)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.core.function_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes

 
Module: numpy.core.getlimits-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: _frz(a)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)

 
Module: numpy.core.info-------------------------------------------------
    (No members)

 
Module: numpy.core.machar-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs

 
Module: numpy.core.memmap-------------------------------------------------
    
   +Class: basestring
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: long
        (No members)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    
   +Class: ndarray
        (No members)
    
   +Class: uint8
        (No members)

 
Module: numpy.core.multiarray-------------------------------------------------
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    +Built-in Function: _get_ndarray_c_version
    	-Method Arguments: None
    +Built-in Function: _reconstruct
    	-Method Arguments:
subtype, shape, dtype
    +Built-in Function: _vec_string
    	-Method Arguments: None
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
    +Built-in Function: correlate
    	-Method Arguments:
a,v, mode=0
    +Built-in Function: correlate2
    	-Method Arguments: None
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments: None
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: Exception
        (No members)
    
   +Class: flagsobj
        (No members)
    
   +Class: flatiter
        (No members)
    +Built-in Function: format_longfloat
    	-Method Arguments: None
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: inner
    	-Method Arguments: None
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
    +Built-in Function: may_share_memory
    	-Method Arguments: None
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
    +Built-in Function: scalar
    	-Method Arguments:
dtype, obj
    +Built-in Function: set_datetimeparse_function
    	-Method Arguments: None
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
    +Built-in Function: set_string_function
    	-Method Arguments:
f, repr=1
    +Built-in Function: set_typeDict
    	-Method Arguments:
dict
    +Built-in Function: test_interrupt
    	-Method Arguments: None
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.core.multiarray_tests-------------------------------------------------
    +Built-in Function: array_indexing
    	-Method Arguments: None
    +Built-in Function: get_buffer_info
    	-Method Arguments: None
    +Built-in Function: test_as_c_array
    	-Method Arguments: None
    +Built-in Function: test_inplace_increment
    	-Method Arguments: None
    +Built-in Function: test_int_subclass
    	-Method Arguments: None
    +Built-in Function: test_nditer_too_large
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator_oob
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_end
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_start
    	-Method Arguments: None

 
Module: numpy.core.numeric-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
      +Func: _maketup(descr, val)
      +Func: _mode_from_name(mode)
      +Func: _move_axis_to_0(a, axis)
    
   +Class: _unspecified
        (No members)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: extend_all(module)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core.numerictypes-------------------------------------------------
      +Func: _add_array_type(typename, bits)
      +Func: _can_coerce_all(dtypelist, start)
    	  	  Default_Args:(start, 0)
      +Func: _evalname(name)
      +Func: _find_common_coerce(a, b)
      +Func: _python_type(t)
    
   +Class: _typedict
          +  __getitem__(self, obj)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: bitname(obj)
    
   +Class: bool
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: buffer
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: english_capitalize(s)
      +Func: english_lower(s)
      +Func: english_upper(s)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flexible
        (No members)
    
   +Class: float
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: generic
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: inexact
        (No members)
    
   +Class: int
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
    
   +Class: long
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    
   +Class: ndarray
        (No members)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object
        (No members)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: timedelta64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)

 
Module: numpy.core.operand_flag_tests-------------------------------------------------
    (No members)

 
Module: numpy.core.records-------------------------------------------------
      +Func: array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (strides, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (copy, True)
    
   +Class: str
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: find_duplicate(list)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromfile(fd, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromstring(datastring, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: get_remaining_size(fd)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
    
   +Class: ndarray
        (No members)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)

 
Module: numpy.core.scalarmath-------------------------------------------------
    +Built-in Function: alter_pythonmath
    	-Method Arguments: None
    +Built-in Function: restore_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_scalarmath
    	-Method Arguments: None

 
Module: numpy.core.setup-------------------------------------------------
    
   +Class: CallOnceOnly
          +  check_complex(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_ieee_macros(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_types(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  __init__(self)
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_complex(config, mathlibs)
      +Func: check_ieee_macros(config)
      +Func: check_long_double_representation(cmd)
      +Func: check_math_capabilities(config, moredefs, mathlibs)
      +Func: check_mathlib(config_cmd)
      +Func: check_types(config_cmd, ext, build_dir)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: get_config_var(name)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: newer(source, target)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)
      +Func: visibility_define(config)
      +Func: win32_checks(deflist)

 
Module: numpy.core.setup_common-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_long_double_representation(cmd)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)

 
Module: numpy.core.shape_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: hstack(tup)
      +Func: vstack(tup)

 
Module: numpy.core.struct_ufunc_test-------------------------------------------------
    (No members)

 
Module: numpy.core.test_rational-------------------------------------------------
    
   +Class: rational
        (No members)

 
Module: numpy.core.umath-------------------------------------------------
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: geterrobj
    	-Method Arguments: None
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj

 
Module: numpy.core.umath_tests-------------------------------------------------
    +Built-in Function: test_signature
    	-Method Arguments: None

 
Module: numpy.ctypeslib-------------------------------------------------
    
   +Class: PyCArrayType
        (No members)
    
   +Class: dtype
        (No members)
      +Func: _flags_fromnum(num)
    
   +Class: _ndptr
          +  from_param(cls, obj)
          +  _check_retval_(self)
    
   +Class: c_void_p
        (No members)
      +Func: _num_fromflags(flaglist)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_array(obj, shape)
    	  	  Default_Args:(shape, None)
      +Func: as_ctypes(obj)
    
   +Class: c_longlong
        (No members)
    	   Positional_Args: args
    	   Keyword_Args: kwds
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    
   +Class: flagsobj
        (No members)
    
   +Class: integer
        (No members)
      +Func: load_library(libname, loader_path)
    
   +Class: ndarray
        (No members)
      +Func: ndpointer(dtype, ndim, shape, flags)
    	  	  Default_Args:(dtype, None), (ndim, None), (shape, None), (flags, None)
      +Func: prep_array(array_type)
      +Func: prep_pointer(pointer_obj, shape)
      +Func: prep_simple(simple_type, dtype)
    
   +Class: c_double
        (No members)

 
Module: numpy.distutils-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: parse_flags(line)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy.distutils.__version__-------------------------------------------------
    (No members)

 
Module: numpy.distutils.ccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
      +Func: CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
    	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
      +Func: CCompiler_customize(self, dist, need_cxx)
    	  	  Default_Args:(need_cxx, 0)
      +Func: CCompiler_customize_cmd(self, cmd, ignore)
    	  	  Default_Args:(ignore, ())
      +Func: CCompiler_cxx_compiler(self)
      +Func: CCompiler_get_version(self, force, ok_status)
    	  	  Default_Args:(force, False), (ok_status, 0)
      +Func: CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
    	  	  Default_Args:(strip_dir, 0), (output_dir, )
      +Func: CCompiler_show_customization(self)
      +Func: CCompiler_spawn(self, cmd, display)
    	  	  Default_Args:(display, None)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: LooseVersion
          +  __str__(self)
          +  parse(self, vstring)
          +  __repr__(self)
          +  __cmp__(self, other)
          +  __init__(self, vstring)
        	  	  Default_Args:(vstring, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: _compiler_to_string(compiler)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: copy(x)
      +Func: customize_compiler(compiler)
      +Func: cyg2win32(path)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: execute(func, args, msg, verbose, dry_run)
    	  	  Default_Args:(msg, None), (verbose, 0), (dry_run, 0)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: get_default_compiler(osname, platform)
    	  	  Default_Args:(osname, None), (platform, None)
      +Func: is_sequence(seq)
      +Func: mkpath(name, mode, verbose, dry_run)
    	  	  Default_Args:(mode, 511), (verbose, 1), (dry_run, 0)
      +Func: move_file(src, dst, verbose, dry_run)
    	  	  Default_Args:(verbose, 1), (dry_run, 0)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: quote_args(args)
      +Func: replace_method(klass, method_name, func)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )
      +Func: spawn(cmd, search_path, verbose, dry_run)
    	  	  Default_Args:(search_path, 1), (verbose, 0), (dry_run, 0)
      +Func: split_quoted(s)

 
Module: numpy.distutils.command-------------------------------------------------

 
Module: numpy.distutils.command.autodist-------------------------------------------------
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)

 
Module: numpy.distutils.command.bdist_rpm-------------------------------------------------
    
   +Class: bdist_rpm
          +  _make_spec_file(self)
    
   +Class: bdist_rpm
          +  run(self)
          +  initialize_options(self)
          +  _make_spec_file(self)
          +  _dist_path(self, path)
          +  _format_changelog(self, changelog)
          +  finalize_options(self)
          +  finalize_package_data(self)

 
Module: numpy.distutils.command.build-------------------------------------------------
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  has_scripts(self)
          +  has_pure_modules(self)
          +  has_c_libraries(self)
          +  has_ext_modules(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_clib-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
      +Func: all_strings(lst)
    
   +Class: build_clib
          +  build_libraries(self, libraries)
          +  run(self)
          +  initialize_options(self)
          +  build_a_library(self, build_info, lib_name, libraries)
          +  have_cxx_sources(self)
          +  have_f_sources(self)
          +  get_source_files(self)
      +Func: filter_sources(sources)
      +Func: get_lib_source_files(lib)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_clib
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  build_libraries(self, libraries)
          +  check_library_list(self, libraries)
          +  get_library_names(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.build_ext-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: build_ext
          +  run(self)
          +  initialize_options(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  get_outputs(self)
          +  finalize_options(self)
          +  _libs_with_msvc_and_fortran(self, fcompiler, c_libraries, c_library_dirs)
          +  _add_dummy_mingwex_sym(self, c_sources)
          +  swig_sources(self, sources)
    	   Positional_Args: args
    	   Keyword_Args: kws
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: filter_sources(sources)
      +Func: get_ext_source_files(ext)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: msvc_version(compiler)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_ext
          +  get_ext_filename(self, ext_name)
          +  get_ext_fullpath(self, ext_name)
          +  get_export_symbols(self, ext)
          +  swig_sources(self, sources, extension)
          +  initialize_options(self)
          +  get_ext_fullname(self, ext_name)
          +  get_outputs(self)
          +  run(self)
          +  check_extensions_list(self, extensions)
          +  build_extensions(self)
          +  find_swig(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  finalize_options(self)
          +  get_libraries(self, ext)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_py-------------------------------------------------
    
   +Class: build_py
          +  find_modules(self)
          +  run(self)
          +  find_package_modules(self, package, package_dir)
      +Func: is_string(s)
    
   +Class: build_py
          +  check_package(self, package, package_dir)
          +  build_packages(self)
          +  check_module(self, module, module_file)
          +  build_package_data(self)
          +  initialize_options(self)
          +  get_package_dir(self, package)
          +  byte_compile(self, files)
          +  get_outputs(self, include_bytecode)
        	  	  Default_Args:(include_bytecode, 1)
          +  find_all_modules(self)
          +  run(self)
          +  get_module_outfile(self, build_dir, package, module)
          +  finalize_options(self)
          +  build_modules(self)
          +  find_modules(self)
          +  find_data_files(self, package, src_dir)
          +  get_source_files(self)
          +  get_data_files(self)
          +  build_module(self, module, module_file, package)
          +  find_package_modules(self, package, package_dir)

 
Module: numpy.distutils.command.build_scripts-------------------------------------------------
    
   +Class: build_scripts
          +  generate_scripts(self, scripts)
          +  get_source_files(self)
          +  run(self)
      +Func: is_string(s)
    
   +Class: build_scripts
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
          +  copy_scripts(self)

 
Module: numpy.distutils.command.build_src-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _find_swig_target(target_dir, name)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: appendpath(prefix, path)
    
   +Class: build_src
          +  filter_py_files(self, sources)
          +  build_extension_sources(self, ext)
          +  _build_npy_pkg_config(self, info, gd)
          +  build_npy_pkg_config(self)
          +  swig_sources(self, sources, extension)
          +  f2py_sources(self, sources, extension)
          +  initialize_options(self)
          +  template_sources(self, sources, extension)
          +  pyrex_sources(self, sources, extension)
          +  filter_files(self, sources, exts)
        	  	  Default_Args:(exts, )
          +  build_py_modules_sources(self)
          +  run(self)
          +  finalize_options(self)
          +  build_library_sources(self, lib_name, build_info)
          +  generate_sources(self, sources, extension)
          +  build_sources(self)
          +  build_data_files_sources(self)
          +  generate_a_pyrex_source(self, base, ext_name, source, extension)
          +  filter_h_files(self, sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_f2py_modulename(source)
      +Func: get_swig_modulename(source)
      +Func: get_swig_target(source)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: newer(source, target)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: process_file(source)
      +Func: process_file(source)
      +Func: subst_vars(target, source, d)

 
Module: numpy.distutils.command.config-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: GrabStdout
          +  restore(self)
          +  write(self, data)
          +  flush(self)
          +  __init__(self)
    
   +Class: LinkError
        (No members)
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: generate_manifest(config)
    
   +Class: config
          +  search_cpp(self, pattern, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)
          +  _compile(self, body, headers, include_dirs, lang)
          +  run(self)
          +  try_link(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, 0), (call, 0)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_lib(self, library, library_dirs, headers, include_dirs, other_libraries)
        	  	  Default_Args:(library_dirs, None), (headers, None), (include_dirs, None), (other_libraries, )
          +  _clean(self)
        	   Positional_Args: filenames
          +  try_compile(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (lang, c)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  finalize_options(self)
          +  _gen_temp_sourcefile(self, body, headers, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  _preprocess(self, body, headers, include_dirs, lang)
          +  try_cpp(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)

 
Module: numpy.distutils.command.config_compiler-------------------------------------------------
    
   +Class: Command
          +  _ensure_tested_string(self, option, tester, what, error_fmt, default)
        	  	  Default_Args:(default, None)
          +  spawn(self, cmd, search_path, level)
        	  	  Default_Args:(search_path, 1), (level, 1)
          +  ensure_finalized(self)
          +  __init__(self, dist)
          +  initialize_options(self)
          +  dump_options(self, header, indent)
        	  	  Default_Args:(header, None), (indent, )
          +  __getattr__(self, attr)
          +  get_sub_commands(self)
          +  copy_tree(self, infile, outfile, preserve_mode, preserve_times, preserve_symlinks, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (preserve_symlinks, 0), (level, 1)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  run_command(self, command)
          +  set_undefined_options(self, src_cmd)
        	   Positional_Args: option_pairs
          +  run(self)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  copy_file(self, infile, outfile, preserve_mode, preserve_times, link, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (link, None), (level, 1)
          +  warn(self, msg)
          +  ensure_dirname(self, option)
          +  move_file(self, src, dst, level)
        	  	  Default_Args:(level, 1)
          +  ensure_string_list(self, option)
          +  _ensure_stringlike(self, option, what, default)
        	  	  Default_Args:(default, None)
          +  get_finalized_command(self, command, create)
        	  	  Default_Args:(create, 1)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  ensure_string(self, option, default)
        	  	  Default_Args:(default, None)
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  make_archive(self, base_name, format, root_dir, base_dir, owner, group)
        	  	  Default_Args:(root_dir, None), (base_dir, None), (owner, None), (group, None)
          +  get_command_name(self)
          +  make_file(self, infiles, outfile, func, args, exec_msg, skip_msg, level)
        	  	  Default_Args:(exec_msg, None), (skip_msg, None), (level, 1)
          +  finalize_options(self)
          +  ensure_filename(self, option)
          +  debug_print(self, msg)
    
   +Class: config_cc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: config_fc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.develop-------------------------------------------------
    
   +Class: develop
          +  install_for_development(self)
    
   +Class: develop
          +  install_for_development(self)
          +  run(self)
          +  initialize_options(self)
          +  install_egg_scripts(self, dist)
          +  uninstall_link(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.egg_info-------------------------------------------------
    
   +Class: egg_info
          +  run(self)
          +  initialize_options(self)
          +  save_version_info(self, filename)
          +  tags(self)
          +  check_broken_egg_info(self)
          +  tagged_version(self)
          +  write_or_delete_file(self, what, filename, data, force)
        	  	  Default_Args:(force, False)
          +  delete_file(self, filename)
          +  find_sources(self)
          +  write_file(self, what, filename, data)
          +  finalize_options(self)
    
   +Class: egg_info
          +  run(self)

 
Module: numpy.distutils.command.install-------------------------------------------------
    
   +Class: install
          +  setuptools_run(self)
          +  run(self)
          +  finalize_options(self)
    
   +Class: install
          +  handle_extra_path(self)
          +  initialize_options(self)
          +  do_egg_install(self)
          +  run(self)
          +  finalize_options(self)
      +Func: write_file(filename, contents)

 
Module: numpy.distutils.command.install_clib-------------------------------------------------
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
    
   +Class: install_clib
          +  run(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)

 
Module: numpy.distutils.command.install_data-------------------------------------------------
    
   +Class: install_data
          +  finalize_options(self)
          +  run(self)
    
   +Class: install_data
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.install_headers-------------------------------------------------
    
   +Class: install_headers
          +  run(self)
    
   +Class: install_headers
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.sdist-------------------------------------------------
      +Func: get_data_files(data)
    
   +Class: sdist
          +  make_release_tree(self, base_dir, files)
          +  check_readme(self)
          +  run(self)
          +  _manifest_is_not_generated(self)
          +  read_manifest(self)
          +  add_defaults(self)
          +  __read_template_hack(self)
    
   +Class: sdist
          +  add_defaults(self)

 
Module: numpy.distutils.compat-------------------------------------------------

 
Module: numpy.distutils.conv_template-------------------------------------------------
      +Func: paren_repl(obj)
      +Func: parse_loop_header(loophead)
      +Func: parse_string(astr, env, level, line)
      +Func: parse_structure(astr, level)
      +Func: parse_values(astr)
      +Func: process_file(source)
      +Func: process_str(astr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.core-------------------------------------------------
    
   +Class: CCompilerError
        (No members)
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: DistutilsArgError
        (No members)
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
    
   +Class: PyPIRCCommand
          +  initialize_options(self)
          +  _store_pypirc(self, username, password)
          +  finalize_options(self)
          +  _read_pypirc(self)
          +  _get_rc_file(self)
      +Func: _check_append_ext_library(libraries, lib_name, build_info)
      +Func: _check_append_library(libraries, item)
      +Func: _command_line_ok(_cache)
    	  	  Default_Args:(_cache, )
      +Func: _dict_append(d)
    	   Keyword_Args: kws
      +Func: gen_usage(script_name)
      +Func: get_data_files(data)
      +Func: get_distribution(always)
    	  	  Default_Args:(always, False)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    	   Keyword_Args: attrs
      +Func: run_setup(script_name, script_args, stop_after)
    	  	  Default_Args:(script_args, None), (stop_after, run)
    	   Keyword_Args: attr

 
Module: numpy.distutils.cpuinfo-------------------------------------------------
    
   +Class: CPUInfoBase
          +  _is_64bit(self)
          +  _getNCPUs(self)
          +  __getattr__(self, name)
          +  _try_call(self, func)
          +  __get_nbits(self)
          +  _is_32bit(self)
    
   +Class: DarwinCPUInfo
          +  _is_ppc604e(self)
          +  _is_ppc860(self)
          +  _is_ppc801(self)
          +  _is_ppc603e(self)
          +  __machine(self, n)
          +  _is_Power_Macintosh(self)
          +  _is_ppc7400(self)
          +  _is_ppc7450(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ppc505(self)
          +  _is_ppc(self)
          +  _getNCPUs(self)
          +  _is_ppc620(self)
          +  _is_i386(self)
          +  _is_ppc602(self)
          +  _is_ppc601(self)
          +  _is_ppc750(self)
          +  _is_ppc740(self)
          +  _is_ppc604(self)
          +  _is_ppc603(self)
          +  _is_ppc630(self)
          +  _is_ppc403(self)
          +  _is_ppc823(self)
          +  _is_ppc821(self)
    
   +Class: IRIXCPUInfo
          +  _is_r4600(self)
          +  _is_IP22_4k(self)
          +  _is_r4400(self)
          +  _is_r8000(self)
          +  _is_r4300(self)
          +  _is_r12000(self)
          +  __init__(self)
          +  _is_IP27(self)
          +  _is_IP26(self)
          +  _is_IP25(self)
          +  _is_IP24(self)
          +  _getNCPUs(self)
          +  _is_IP21(self)
          +  _is_r10000(self)
          +  _is_r6000(self)
          +  _is_IP28(self)
          +  _is_rorion(self)
          +  _is_r2000(self)
          +  _is_r4650(self)
          +  _not_impl(self)
          +  _is_r3000(self)
          +  _is_IP32_5k(self)
          +  __machine(self, n)
          +  get_ip(self)
          +  _is_r4100(self)
          +  _is_r3900(self)
          +  _is_r4000(self)
          +  _is_IP19(self)
          +  _is_IP22_5k(self)
          +  _is_r5000(self)
          +  _is_IP22(self)
          +  __cputype(self, n)
          +  _is_IP30(self)
          +  _is_IP32(self)
          +  _is_IP32_10k(self)
          +  _is_IP20(self)
          +  _is_singleCPU(self)
    
   +Class: LinuxCPUInfo
          +  _is_Itanium(self)
          +  _is_Intel(self)
          +  _is_AthlonK7(self)
          +  _is_AthlonK6(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_sse3(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _is_Opteron(self)
          +  _getNCPUs(self)
          +  _not_impl(self)
          +  _is_Nocona(self)
          +  _is_Core2(self)
          +  _has_ssse3(self)
          +  _is_Athlon64(self)
          +  _is_EV56(self)
          +  _has_f00f_bug(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _is_XEON(self)
          +  _is_Prescott(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_i486(self)
          +  _is_AMD(self)
          +  _is_Alpha(self)
          +  _has_fdiv_bug(self)
          +  _is_PentiumII(self)
          +  _not_impl(self)
          +  _is_EV4(self)
          +  _is_Celeron(self)
          +  _is_XEON(self)
          +  _is_AthlonMP(self)
          +  _is_Pentium(self)
          +  _is_AthlonK6_2(self)
          +  _is_AthlonK6_3(self)
          +  _has_3dnowext(self)
          +  _is_EV5(self)
          +  _is_Hammer(self)
          +  _is_PCA56(self)
          +  _is_AthlonHX(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
    
   +Class: SunOSCPUInfo
          +  _is_ultra(self)
          +  _is_ultraenterprice(self)
          +  _is_sunfire(self)
          +  _is_ultra1(self)
          +  _is_ultra5_10(self)
          +  _is_sparc(self)
          +  _is_ultra80(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ultra2(self)
          +  _getNCPUs(self)
          +  _is_ultra4(self)
          +  _is_ultra5(self)
          +  _is_i386(self)
          +  _is_sparcstation5(self)
          +  _is_ultra250(self)
          +  _is_ultra60(self)
          +  _is_ultraenterprice10k(self)
          +  _is_cpusparcv9(self)
          +  _is_cpusparcv8(self)
          +  _is_cpusparcv7(self)
          +  _is_ultra30(self)
          +  _is_sun4(self)
          +  _is_sparcv9(self)
          +  _is_SUNW(self)
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: command_by_line(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: command_info(successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
    	   Keyword_Args: kw
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: getoutput(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: getstatusoutput(cmd)
      +Func: key_value_from_command(cmd, sep, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)

 
Module: numpy.distutils.environment-------------------------------------------------
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: type

 
Module: numpy.distutils.exec_command-------------------------------------------------
      +Func: _exec_command(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_posix(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_python(command, exec_command_dir)
    	  	  Default_Args:(exec_command_dir, )
    	   Keyword_Args: env
      +Func: _preserve_environment(names)
      +Func: _supports_fileno(stream)
    	   Keyword_Args: env
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: is_sequence(seq)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: quote_arg(arg)
      +Func: splitcmdline(line)
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws

 
Module: numpy.distutils.extension-------------------------------------------------
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    
   +Class: Extension
          +  _convert_pyx_sources_to_lang(self)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw

 
Module: numpy.distutils.fcompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: CompilerNotFound
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: FancyGetopt
          +  print_help(self, header, file)
        	  	  Default_Args:(header, None), (file, None)
          +  _grok_option_table(self)
          +  has_option(self, long_option)
          +  generate_help(self, header)
        	  	  Default_Args:(header, None)
          +  get_attr_name(self, long_option)
          +  _check_alias_dict(self, aliases, what)
          +  get_option_order(self)
          +  set_option_table(self, option_table)
          +  _build_index(self)
          +  add_option(self, long_option, short_option, help_string)
        	  	  Default_Args:(short_option, None), (help_string, None)
          +  set_aliases(self, alias)
          +  getopt(self, args, object)
        	  	  Default_Args:(args, None), (object, None)
          +  set_negative_aliases(self, negative_alias)
          +  __init__(self, option_table)
        	  	  Default_Args:(option_table, None)
    
   +Class: LinkError
        (No members)
    
   +Class: type

 
Module: numpy.distutils.fcompiler.absoft-------------------------------------------------
    
   +Class: AbsoftFCompiler
          +  get_library_dirs(self)
          +  get_flags_fix(self)
          +  get_flags(self)
          +  update_executables(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags_f77(self)
          +  get_libraries(self)
          +  library_dir_option(self, dir)
          +  get_flags_f90(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
      +Func: cyg2win32(path)

 
Module: numpy.distutils.fcompiler.compaq-------------------------------------------------
    
   +Class: CompaqFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)
    
   +Class: CompaqVisualFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags(self)
          +  get_flags_arch(self)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)

 
Module: numpy.distutils.fcompiler.g95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: G95FCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.gnu-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: Gnu95FCompiler
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  _universal_flags(self, cmd)
          +  version_match(self, version_string)
          +  get_flags_opt(self)
          +  get_target(self)
          +  get_libraries(self)
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: Popen
          +  _make_inheritable(self, handle)
          +  __del__(self, _maxint)
        	  	  Default_Args:(_maxint, 2147483647)
          +  communicate(self, input)
        	  	  Default_Args:(input, None)
          +  terminate(self)
          +  _readerthread(self, fh, buffer)
          +  terminate(self)
          +  _internal_poll(self, _deadstate, _WaitForSingleObject, _WAIT_OBJECT_0, _GetExitCodeProcess)
        	  	  Default_Args:(_deadstate, None), (_WaitForSingleObject, <built-in function WaitForSingleObject>), (_WAIT_OBJECT_0, 0), (_GetExitCodeProcess, <built-in function GetExitCodeProcess>)
          +  _get_handles(self, stdin, stdout, stderr)
          +  _execute_child(self, args, executable, preexec_fn, close_fds, cwd, env, universal_newlines, startupinfo, creationflags, shell, to_close, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite)
          +  poll(self)
          +  __init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags)
        	  	  Default_Args:(bufsize, 0), (executable, None), (stdin, None), (stdout, None), (stderr, None), (preexec_fn, None), (close_fds, False), (shell, False), (cwd, None), (env, None), (universal_newlines, False), (startupinfo, None), (creationflags, 0)
          +  wait(self)
          +  _find_w9xpopen(self)
          +  _translate_newlines(self, data)
          +  _communicate(self, input)
          +  send_signal(self, sig)
      +Func: _can_target(cmd, arch)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env

 
Module: numpy.distutils.fcompiler.hpux-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: HPUXFCompiler
          +  get_library_dirs(self)
          +  get_flags(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, 0), (ok_status, 256, 0, 1)
          +  get_flags_opt(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.ibm-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IBMFCompiler
          +  get_flags(self)
          +  get_version(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)

 
Module: numpy.distutils.fcompiler.intel-------------------------------------------------
    
   +Class: BaseIntelFCompiler
          +  update_executables(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IntelEM64TFCompiler
          +  get_flags_opt(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelEM64VisualFCompiler
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelFCompiler
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_free(self)
          +  get_flags_arch(self)
    
   +Class: IntelItaniumFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelItaniumVisualFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelVisualFCompiler
          +  update_executables(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_free(self)
          +  get_flags_debug(self)
      +Func: intel_version_match(type)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.lahey-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: LaheyFCompiler
          +  get_library_dirs(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.mips-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: MIPSFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_arch_f77(self)
          +  get_flags_arch_f90(self)

 
Module: numpy.distutils.fcompiler.nag-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NAGFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.fcompiler.none-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NoneFCompiler
          +  find_executables(self)

 
Module: numpy.distutils.fcompiler.pathf95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PathScaleFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.pg-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PGroupFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.sun-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: SunFCompiler
          +  get_arch(self)
          +  get_flags_f77(self)
          +  matcher(self, version_string)
          +  get_libraries(self)
          +  get_opt(self)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.vast-------------------------------------------------
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: VastFCompiler
          +  find_executables(self)
          +  get_version_cmd(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.from_template-------------------------------------------------
      +Func: conv(astr)
      +Func: expand_sub(substr, names)
      +Func: find_repl_patterns(astr)
      +Func: parse_structure(astr)
      +Func: process_file(source)
      +Func: process_str(allstr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.info-------------------------------------------------
    (No members)

 
Module: numpy.distutils.intelccompiler-------------------------------------------------
    
   +Class: IntelCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelEM64TCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelItaniumCCompiler
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})

 
Module: numpy.distutils.lib2def-------------------------------------------------
      +Func: getnm(nm_cmd)
    	  	  Default_Args:(nm_cmd, nm, -Cs, python27.lib)
      +Func: output_def(dlist, flist, header, file)
    	  	  Default_Args:(file, <IPython.kernel.zmq.iostream.OutStream object at 0x0000000019534358>)
      +Func: parse_nm(nm_output)

 
Module: numpy.distutils.line_endings-------------------------------------------------
      +Func: dos2unix(file)
      +Func: dos2unix_dir(dir_name)
      +Func: dos2unix_one_dir(modified_files, dir_name, file_names)
      +Func: unix2dos(file)
      +Func: unix2dos_dir(dir_name)
      +Func: unix2dos_one_dir(modified_files, dir_name, file_names)

 
Module: numpy.distutils.log-------------------------------------------------
    
   +Class: Log
          +  good(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
      +Func: _fix_args(args, flag)
    	  	  Default_Args:(flag, 1)
      +Func: cyan_text(s)
      +Func: debug(self, msg)
    	   Positional_Args: args
      +Func: default_text(s)
      +Func: error(self, msg)
    	   Positional_Args: args
      +Func: fatal(self, msg)
    	   Positional_Args: args
      +Func: good(self, msg)
    	   Positional_Args: args
      +Func: green_text(s)
      +Func: info(self, msg)
    	   Positional_Args: args
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: log(self, level, msg)
    	   Positional_Args: args
    
   +Class: Log
          +  info(self, msg)
        	   Positional_Args: args
          +  log(self, level, msg)
        	   Positional_Args: args
          +  error(self, msg)
        	   Positional_Args: args
          +  warn(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
          +  debug(self, msg)
        	   Positional_Args: args
          +  fatal(self, msg)
        	   Positional_Args: args
          +  __init__(self, threshold)
        	  	  Default_Args:(threshold, 3)
      +Func: red_text(s)
      +Func: set_threshold(level, force)
    	  	  Default_Args:(force, False)
      +Func: set_verbosity(v, force)
    	  	  Default_Args:(force, False)
      +Func: warn(self, msg)
    	   Positional_Args: args

 
Module: numpy.distutils.mingw32ccompiler-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: Mingw32CCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
    
   +Class: StrictVersion
          +  __str__(self)
          +  __cmp__(self, other)
          +  parse(self, vstring)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: build_msvcr_library(debug)
    	  	  Default_Args:(debug, False)
      +Func: check_embedded_msvcr_match_linked(msver)
      +Func: configtest_name(config)
      +Func: dump_table(dll)
      +Func: find_dll(dll_name)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: generate_def(dll, dfile)
      +Func: generate_manifest(config)
      +Func: manifest_name(config)
      +Func: manifest_rc(name, type)
    	  	  Default_Args:(type, dll)
      +Func: msvc_manifest_xml(maj, min)
      +Func: rc_name(config)

 
Module: numpy.distutils.misc_util-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
    
   +Class: DistutilsError
        (No members)
    
   +Class: InstallableLib
          +  __init__(self, name, build_info, target_dir)
      +Func: _fix_paths(paths, local_path, include_non_existing)
      +Func: _get_directories(list_of_sources)
      +Func: _get_f90_modules(source)
      +Func: _get_headers(directory_list)
      +Func: all_strings(lst)
      +Func: allpath(name)
      +Func: appendpath(prefix, path)
      +Func: as_list(seq)
      +Func: blue_text(s)
      +Func: colour_text(s, fg, bg)
    	  	  Default_Args:(fg, None), (bg, None)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: cyan_text(s)
      +Func: cyg2win32(path)
      +Func: default_config_dict(name, parent_name, local_path)
    	  	  Default_Args:(name, None), (parent_name, None), (local_path, None)
      +Func: default_text(s)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    	   Positional_Args: args
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: filter_sources(sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: general_source_directories_files(top_path)
      +Func: general_source_files(top_path)
      +Func: generate_config_py(target)
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_data_files(data)
      +Func: get_dependencies(sources)
      +Func: get_ext_source_files(ext)
      +Func: get_frame(level)
    	  	  Default_Args:(level, 0)
      +Func: get_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_language(sources)
      +Func: get_lib_source_files(lib)
      +Func: get_mathlibs(path)
    	  	  Default_Args:(path, None)
      +Func: get_path_from_frame(frame, parent_path)
    	  	  Default_Args:(parent_path, None)
      +Func: get_pkg_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_script_files(scripts)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: gpaths(paths, local_path, include_non_existing)
    	  	  Default_Args:(local_path, ), (include_non_existing, True)
      +Func: green_text(s)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_glob_pattern(s)
      +Func: is_local_src_dir(directory)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: minrelpath(path)
      +Func: msvc_version(compiler)
    	   Positional_Args: path
      +Func: quote_args(args)
      +Func: red_text(s)
      +Func: rel_path(path, parent_path)
      +Func: yellow_text(s)

 
Module: numpy.distutils.npy_pkg_config-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: SafeConfigParser
          +  set(self, section, option, value)
        	  	  Default_Args:(value, None)
          +  _interpolate_some(self, option, accum, rest, section, map, depth)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: _escape_backslash(val)
      +Func: _read_config_imp(filenames, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_config(filename, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_flags(line)
      +Func: parse_meta(config)
      +Func: parse_sections(config)
      +Func: parse_variables(config)
      +Func: pkg_to_filename(pkg_name)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.numpy_distribution-------------------------------------------------
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)

 
Module: numpy.distutils.pathccompiler-------------------------------------------------
    
   +Class: PathScaleCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)

 
Module: numpy.distutils.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.distutils.system_info-------------------------------------------------
    
   +Class: AtlasNotFoundError
        (No members)
    
   +Class: BlasNotFoundError
        (No members)
    
   +Class: BlasSrcNotFoundError
        (No members)
    
   +Class: ConfigParser
          +  get(self, section, option, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolation_replace(self, match)
          +  items(self, section, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: DJBFFTNotFoundError
        (No members)
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: DistutilsError
        (No members)
    
   +Class: FFTWNotFoundError
        (No members)
    
   +Class: LapackNotFoundError
        (No members)
    
   +Class: LapackSrcNotFoundError
        (No members)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: NotFoundError
        (No members)
    
   +Class: NumericNotFoundError
        (No members)
    
   +Class: Numeric_info
        (No members)
    
   +Class: UmfpackNotFoundError
        (No members)
    
   +Class: X11NotFoundError
        (No members)
    
   +Class: _numpy_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: _pkg_config_info
          +  calc_info(self)
          +  get_config_exe(self)
          +  get_config_output(self, config_exe, option)
    
   +Class: agg2_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: amd_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_threads_info
        (No members)
    
   +Class: atlas_3_10_info
        (No members)
    
   +Class: atlas_3_10_threads_info
        (No members)
    
   +Class: atlas_blas_info
          +  calc_info(self)
    
   +Class: atlas_blas_threads_info
        (No members)
    
   +Class: atlas_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: atlas_threads_info
        (No members)
    
   +Class: blas_info
          +  calc_info(self)
    
   +Class: blas_mkl_info
        (No members)
    
   +Class: blas_opt_info
          +  calc_info(self)
    
   +Class: blas_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: boost_python_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
    	   Positional_Args: args
    	   Keyword_Args: kws
    
   +Class: dfftw_info
        (No members)
    
   +Class: dfftw_threads_info
        (No members)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    
   +Class: djbfft_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
    
   +Class: f2py_info
          +  calc_info(self)
    
   +Class: fft_opt_info
          +  calc_info(self)
    
   +Class: fftw2_info
        (No members)
    
   +Class: fftw3_info
        (No members)
    
   +Class: fftw_info
          +  calc_ver_info(self, ver_param)
          +  calc_info(self)
    
   +Class: fftw_threads_info
        (No members)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
    
   +Class: freetype2_info
        (No members)
    
   +Class: gdk_2_info
        (No members)
    
   +Class: gdk_info
        (No members)
    
   +Class: gdk_pixbuf_2_info
        (No members)
    
   +Class: gdk_pixbuf_xlib_2_info
        (No members)
    
   +Class: gdk_x11_2_info
        (No members)
    	   Keyword_Args: config
      +Func: get_info(name, notfound_action)
    	  	  Default_Args:(notfound_action, 0)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: get_standard_file(fname)
      +Func: glob(pathname)
    
   +Class: gtkp_2_info
        (No members)
    
   +Class: gtkp_x11_2_info
        (No members)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    
   +Class: lapack_atlas_3_10_info
        (No members)
    
   +Class: lapack_atlas_3_10_threads_info
        (No members)
    
   +Class: lapack_atlas_info
        (No members)
    
   +Class: lapack_atlas_threads_info
        (No members)
    
   +Class: lapack_info
          +  calc_info(self)
    
   +Class: lapack_mkl_info
          +  calc_info(self)
    
   +Class: lapack_opt_info
          +  calc_info(self)
    
   +Class: lapack_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: libpaths(paths, bits)
    
   +Class: mkl_info
          +  calc_info(self)
          +  get_mkl_rootdir(self)
          +  __init__(self)
    
   +Class: numarray_info
        (No members)
    
   +Class: numerix_info
          +  calc_info(self)
    
   +Class: numpy_info
        (No members)
    
   +Class: openblas_info
          +  calc_info(self)
          +  check_embedded_lapack(self, info)
    
   +Class: openblas_lapack_info
          +  check_embedded_lapack(self, info)
      +Func: parseCmdLine(argv)
    	  	  Default_Args:(argv, (None,))
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
    
   +Class: sfftw_info
        (No members)
    
   +Class: sfftw_threads_info
        (No members)
      +Func: show_all(argv)
    	  	  Default_Args:(argv, None)
    
   +Class: system_info
          +  get_lib_dirs(self, key)
        	  	  Default_Args:(key, library_dirs)
          +  check_libs(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  has_info(self)
          +  get_info(self, notfound_action)
        	  	  Default_Args:(notfound_action, 0)
          +  get_libs(self, key, default)
          +  __init__(self, default_lib_dirs, default_include_dirs, verbosity)
        	  	  Default_Args:(default_lib_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib, C:\\, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\libs), (default_include_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\include), (verbosity, 1)
          +  combine_paths(self)
        	   Positional_Args: args
          +  _lib_list(self, lib_dir, libs, exts)
          +  _check_libs(self, lib_dirs, libs, opt_libs, exts)
          +  parse_config_files(self)
          +  get_include_dirs(self, key)
        	  	  Default_Args:(key, include_dirs)
          +  get_paths(self, section, key)
          +  check_libs2(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  get_libraries(self, key)
        	  	  Default_Args:(key, libraries)
          +  library_extensions(self)
          +  set_info(self)
        	   Keyword_Args: info
          +  calc_libraries_info(self)
          +  get_src_dirs(self, key)
        	  	  Default_Args:(key, src_dirs)
    
   +Class: umfpack_info
          +  calc_info(self)
    
   +Class: wx_info
        (No members)
    
   +Class: x11_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: xft_info
        (No members)

 
Module: numpy.distutils.unixccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: LibError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: NoneType
        (No members)
    
   +Class: str
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
      +Func: UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
    	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: newer(source, target)
      +Func: replace_method(klass, method_name, func)

 
Module: numpy.doc-------------------------------------------------
    (No members)

 
Module: numpy.doc.basics-------------------------------------------------
    (No members)

 
Module: numpy.doc.broadcasting-------------------------------------------------
    (No members)

 
Module: numpy.doc.byteswapping-------------------------------------------------
    (No members)

 
Module: numpy.doc.constants-------------------------------------------------
    (No members)

 
Module: numpy.doc.creation-------------------------------------------------
    (No members)

 
Module: numpy.doc.glossary-------------------------------------------------
    (No members)

 
Module: numpy.doc.howtofind-------------------------------------------------
    (No members)

 
Module: numpy.doc.indexing-------------------------------------------------
    (No members)

 
Module: numpy.doc.internals-------------------------------------------------
    (No members)

 
Module: numpy.doc.io-------------------------------------------------
    (No members)

 
Module: numpy.doc.jargon-------------------------------------------------
    (No members)

 
Module: numpy.doc.methods_vs_functions-------------------------------------------------
    (No members)

 
Module: numpy.doc.misc-------------------------------------------------
    (No members)

 
Module: numpy.doc.performance-------------------------------------------------
    (No members)

 
Module: numpy.doc.structured_arrays-------------------------------------------------
    (No members)

 
Module: numpy.doc.subclassing-------------------------------------------------
    (No members)

 
Module: numpy.doc.ufuncs-------------------------------------------------
    (No members)

 
Module: numpy.dual-------------------------------------------------
      +Func: cholesky(a, lower, overwrite_a, check_finite)
    	  	  Default_Args:(lower, False), (overwrite_a, False), (check_finite, True)
      +Func: det(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(b, None), (left, False), (right, True), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (eigvals_only, False), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: eigvals(a, b, overwrite_a, check_finite)
    	  	  Default_Args:(b, None), (overwrite_a, False), (check_finite, True)
      +Func: eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: inv(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(cond, None), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: norm(a, ord)
    	  	  Default_Args:(ord, None)
      +Func: pinv2(a, cond, rcond, return_rank, check_finite)
    	  	  Default_Args:(cond, None), (rcond, None), (return_rank, False), (check_finite, True)
      +Func: register_func(name, func)
      +Func: restore_func(name)
      +Func: solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
    	  	  Default_Args:(sym_pos, False), (lower, False), (overwrite_a, False), (overwrite_b, False), (debug, False), (check_finite, True)
      +Func: svd(a, full_matrices, compute_uv, overwrite_a, check_finite)
    	  	  Default_Args:(full_matrices, True), (compute_uv, True), (overwrite_a, False), (check_finite, True)

 
Module: numpy.f2py-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: compile(source, modulename, extra_args, verbose, source_fn)
    	  	  Default_Args:(modulename, untitled), (extra_args, ), (verbose, 1), (source_fn, None)
      +Func: run_main(comline_list)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.f2py.__version__-------------------------------------------------
    (No members)

 
Module: numpy.f2py.auxfuncs-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _isstring(var)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.capi_maps-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cb_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildcallback(rout, um)
      +Func: buildcallbacks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cfuncs-------------------------------------------------
      +Func: append_needs(need, flag)
    	  	  Default_Args:(flag, 1)
      +Func: write(self, string)

 
Module: numpy.f2py.common_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findcommonblocks(block, top)
    	  	  Default_Args:(top, 1)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.crackfortran-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _calc_depend_dict(vars)
      +Func: _ensure_exprdict(r)
      +Func: _eval_length(length, params)
      +Func: _eval_scalar(value, params)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _get_depend_dict(name, vars, deps)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
      +Func: _is_intent_callback(vdecl)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _kind_func(string)
      +Func: _resolvenameargspattern(line)
      +Func: _selected_int_kind_func(r)
      +Func: _selected_real_kind_func(p, r, radix)
    	  	  Default_Args:(r, 0), (radix, 0)
      +Func: _simplifyargs(argsline)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: analyzeargs(block)
      +Func: analyzebody(block, args, tab)
    	  	  Default_Args:(tab, )
      +Func: analyzecommon(block)
      +Func: analyzeline(m, case, line)
      +Func: analyzevars(block)
      +Func: appenddecl(decl, decl2, force)
    	  	  Default_Args:(force, 1)
      +Func: appendmultiline(group, context_name, ml)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildimplicitrules(block)
      +Func: common2fortran(common, tab)
    	  	  Default_Args:(tab, )
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: crack2fortran(block)
      +Func: crack2fortrangen(block, tab, as_interface)
    	  	  Default_Args:(tab, \n), (as_interface, False)
      +Func: crackfortran(files)
      +Func: crackline(line, reset)
    	  	  Default_Args:(reset, 0)
      +Func: cracktypespec(typespec, selector)
      +Func: cracktypespec0(typespec, ll)
      +Func: debugcapi(var)
      +Func: determineexprtype(expr, vars, rules)
    	  	  Default_Args:(rules, {})
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: expr2name(a, block, args)
    	  	  Default_Args:(args, )
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: get_parameters(vars, global_params)
    	  	  Default_Args:(global_params, {})
      +Func: get_sorted_names(vars)
      +Func: get_usedict(block)
      +Func: get_useparameters(block, param_map)
    	  	  Default_Args:(param_map, None)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrlen(dl, args, star)
    	  	  Default_Args:(star, *)
      +Func: getblockname(block, unknown)
    	  	  Default_Args:(unknown, unknown)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getextension(name)
      +Func: getfortranname(rout)
      +Func: getlincoef(e, xset)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: is_free_format(file)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markinnerspaces(line)
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: markouterparen(line)
      +Func: myeval(e, g, l)
    	  	  Default_Args:(g, None), (l, None)
      +Func: outmess(line, flag)
    	  	  Default_Args:(flag, 1)
      +Func: postcrack(block, args, tab)
    	  	  Default_Args:(args, None), (tab, )
      +Func: postcrack2(block, tab, param_map)
    	  	  Default_Args:(tab, ), (param_map, None)
      +Func: readfortrancode(ffile, dowithline, istop)
    	  	  Default_Args:(dowithline, <function show at 0x00000000221C0A58>), (istop, 1)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: removespaces(expr)
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: rmbadname1(name)
      +Func: setattrspec(decl, attr, force)
    	  	  Default_Args:(force, 0)
      +Func: setcharselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setkindselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setmesstext(block)
      +Func: show(o, f)
    	  	  Default_Args:(f, 0)
      +Func: sortvarnames(vars)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: true_intent_list(var)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)
      +Func: unmarkouterparen(line)
      +Func: updatevars(typespec, selector, attrspec, entitydecl)
      +Func: use2fortran(use, tab)
    	  	  Default_Args:(tab, )
      +Func: vars2fortran(block, vars, args, tab, as_interface)
    	  	  Default_Args:(tab, ), (as_interface, False)

 
Module: numpy.f2py.diagnose-------------------------------------------------
      +Func: run_command(cmd)

 
Module: numpy.f2py.f2py2e-------------------------------------------------
      +Func: buildmodules(lst)
      +Func: callcrackfortran(files, options)
      +Func: dict_append(d_out, d_in)
      +Func: write(self, string)
      +Func: filter_files(prefix, suffix, files, remove_prefix)
    	  	  Default_Args:(remove_prefix, None)
      +Func: get_prefix(module)
      +Func: outmess(t)
      +Func: run_main(comline_list)
      +Func: scaninputline(inputline)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)

 
Module: numpy.f2py.f2py_testing-------------------------------------------------
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: run(runtest, test_functions, repeat)
    	  	  Default_Args:(repeat, 1)

 
Module: numpy.f2py.f90mod_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(pymod)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findf90modules(m)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)

 
Module: numpy.f2py.func2subr-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: assubr(rout)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: createfuncwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: createsubrwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: var2fixfortran(vars, a, fa, f90mode)
    	  	  Default_Args:(fa, None), (f90mode, None)

 
Module: numpy.f2py.info-------------------------------------------------
    (No members)

 
Module: numpy.f2py.rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildapi(rout)
      +Func: buildmodule(m, um)
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.setup-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: newer(source, target)
    	   Keyword_Args: attr

 
Module: numpy.f2py.use_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildusevar(name, realname, vars, usemodulename)
      +Func: buildusevars(m, r)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.fft-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.fft.fftpack-------------------------------------------------
      +Func: _cook_nd_args(a, s, axes, invreal)
    	  	  Default_Args:(s, None), (axes, None), (invreal, 0)
      +Func: _raw_fft(a, n, axis, init_function, work_function, fft_cache)
    	  	  Default_Args:(n, None), (axis, -1), (init_function, <built-in function cffti>), (work_function, <built-in function cfftf>), (fft_cache, {})
      +Func: _raw_fftnd(a, s, axes, function)
    	  	  Default_Args:(s, None), (axes, None), (function, <function fft at 0x00000000031A5D68>)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: shape(a)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.fft.fftpack_lite-------------------------------------------------
    +Built-in Function: cfftb
    	-Method Arguments: None
    +Built-in Function: cfftf
    	-Method Arguments: None
    +Built-in Function: cffti
    	-Method Arguments: None
    
   +Class: error
        (No members)
    +Built-in Function: rfftb
    	-Method Arguments: None
    +Built-in Function: rfftf
    	-Method Arguments: None
    +Built-in Function: rffti
    	-Method Arguments: None

 
Module: numpy.fft.helper-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: integer
        (No members)
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)

 
Module: numpy.fft.info-------------------------------------------------
    (No members)

 
Module: numpy.fft.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.lib-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: RankWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    	   Positional_Args: args
      +Func: byte_bounds(a)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: fromregex(file, regexp, dtype)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: i0(x)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sinc(x)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: tile(A, reps)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
      +Func: vsplit(ary, indices_or_sections)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.lib._compiled_base-------------------------------------------------
    +Built-in Function: _insert
    	-Method Arguments: None
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
    
   +Class: Exception
        (No members)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib._datasource-------------------------------------------------
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: Repository
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  listdir(self)
          +  _fullpath(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, baseurl, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: _FileOpeners
          +  _load(self)
          +  __getitem__(self, key)
          +  keys(self)
          +  __init__(self)
    +Built-in Function: open
    	-Method Arguments:
name, mode, buffering
      +Func: open(path, mode, destpath)
    	  	  Default_Args:(mode, r), (destpath, .)

 
Module: numpy.lib._iotools-------------------------------------------------
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: complex
        (No members)
    
   +Class: str
        (No members)
      +Func: _is_bytes_like(obj)
      +Func: _is_string_like(obj)
      +Func: _to_filehandle(fname, flag, return_opened)
    	  	  Default_Args:(flag, r), (return_opened, False)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: bool
        (No members)
    
   +Class: str
        (No members)
    
   +Class: complex
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
    
   +Class: float
        (No members)
      +Func: has_nested_fields(ndtype)
    
   +Class: int
        (No members)
    
   +Class: object
        (No members)
    
   +Class: str
        (No members)
      +Func: str2bool(value)
    
   +Class: unicode
        (No members)

 
Module: numpy.lib._version-------------------------------------------------
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: basestring
        (No members)

 
Module: numpy.lib.arraypad-------------------------------------------------
      +Func: _append_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _arange_ndarray(arr, shape, axis, reverse)
    	  	  Default_Args:(reverse, False)
      +Func: _normalize_shape(narray, shape)
      +Func: _pad_ref(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_sym(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_wrap(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _round_ifneeded(arr, dtype)
      +Func: _validate_lengths(narray, number_elements)
    
   +Class: long
        (No members)
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs

 
Module: numpy.lib.arraysetops-------------------------------------------------
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)

 
Module: numpy.lib.arrayterator-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: long
        (No members)
    +Built-in Function: mul
    	-Method Arguments:
a, b
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial

 
Module: numpy.lib.financial-------------------------------------------------
      +Func: _convert_when(when)
      +Func: _g_div_gp(r, n, p, x, y, w)
      +Func: _rbl(rate, per, pmt, pv, when)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)

 
Module: numpy.lib.format-------------------------------------------------
      +Func: _check_version(version)
      +Func: _filter_header(s)
      +Func: _read_array_header(fp, version)
      +Func: _read_bytes(fp, size, error_template)
    	  	  Default_Args:(error_template, ran out of data)
      +Func: _write_array_header(fp, d, version)
    	  	  Default_Args:(version, None)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
      +Func: dtype_to_descr(dtype)
      +Func: header_data_from_array_1_0(array)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: magic(major, minor)
      +Func: open_memmap(filename, mode, dtype, shape, fortran_order, version)
    	  	  Default_Args:(mode, r+), (dtype, None), (shape, None), (fortran_order, False), (version, None)
      +Func: read_array(fp)
      +Func: read_array_header_1_0(fp)
      +Func: read_array_header_2_0(fp)
      +Func: read_magic(fp)
      +Func: safe_eval(source)
      +Func: write_array(fp, array, version)
    	  	  Default_Args:(version, None)
      +Func: write_array_header_1_0(fp, d)
      +Func: write_array_header_2_0(fp, d)

 
Module: numpy.lib.function_base-------------------------------------------------
      +Func: _chbevl(x, vals)
      +Func: _i0_1(x)
      +Func: _i0_2(x)
    +Built-in Function: _insert
    	-Method Arguments: None
      +Func: _median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
      +Func: extract(condition, arr)
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: i0(x)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
    
   +Class: int64
        (No members)
      +Func: isscalar(num)
      +Func: iterable(y)
      +Func: kaiser(M, beta)
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
    
   +Class: long
        (No members)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: msort(a)
    
   +Class: ndarray
        (No members)
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
    
   +Class: xrange
        (No members)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: sinc(x)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.index_tricks-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: CClass
          +  __init__(self)
    
   +Class: IndexExpression
          +  __getitem__(self, item)
          +  __init__(self, maketuple)
    
   +Class: RClass
          +  __init__(self)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    	   Positional_Args: args
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: nd_grid
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  __init__(self, sparse)
        	  	  Default_Args:(sparse, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib.info-------------------------------------------------
    (No members)

 
Module: numpy.lib.nanfunctions-------------------------------------------------
      +Func: _copyto(a, val, mask)
      +Func: _divide_by_count(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: _nanmedian(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanmedian1d(arr1d, overwrite_input)
    	  	  Default_Args:(overwrite_input, False)
      +Func: _nanmedian_small(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _nanpercentile1d(arr1d, q, overwrite_input, interpolation)
    	  	  Default_Args:(overwrite_input, False), (interpolation, linear)
      +Func: _replace_nan(a, val)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.lib.npyio-------------------------------------------------
    
   +Class: BagObj
          +  __getattribute__(self, key)
          +  __init__(self, obj)
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: NpzFile
          +  __exit__(self, exc_type, exc_value, traceback)
          +  __getitem__(self, key)
          +  __contains__(self, key)
          +  __del__(self)
          +  items(self)
          +  __enter__(self)
          +  keys(self)
          +  __iter__(self)
          +  __init__(self, fid, own_fid)
        	  	  Default_Args:(own_fid, False)
          +  iteritems(self)
          +  close(self)
          +  iterkeys(self)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: str
        (No members)
      +Func: _getconv(dtype)
      +Func: _is_string_like(obj)
      +Func: _savez(file, args, kwds, compress)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
      +Func: fromregex(file, regexp, dtype)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
      +Func: has_nested_fields(ndtype)
    
   +Class: itemgetter
        (No members)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: imap
        (No members)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: seek_gzip_factory(f)
    
   +Class: unicode
        (No members)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    	   Positional_Args: args
    	   Keyword_Args: kwargs

 
Module: numpy.lib.polynomial-------------------------------------------------
    
   +Class: RankWarning
        (No members)
      +Func: _raise_power(astr, wrap)
    	  	  Default_Args:(wrap, 70)
    	   Positional_Args: arys
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
      +Func: eigvals(a)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: hstack(tup)
      +Func: imag(val)
      +Func: inv(a)
      +Func: iscomplex(x)
      +Func: isscalar(num)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: real(val)
      +Func: roots(p)
      +Func: sort_complex(a)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)

 
Module: numpy.lib.recfunctions-------------------------------------------------
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _fix_defaults(output, defaults)
    	  	  Default_Args:(defaults, None)
      +Func: _fix_output(output, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: _is_string_like(obj)
      +Func: _izip_fields(iterable)
      +Func: _izip_fields_flat(iterable)
      +Func: append_fields(base, names, data, dtypes, fill_value, usemask, asrecarray)
    	  	  Default_Args:(dtypes, None), (fill_value, -1), (usemask, True), (asrecarray, False)
    
   +Class: basestring
        (No members)
      +Func: drop_fields(base, drop_names, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: find_duplicates(a, key, ignoremask, return_index)
    	  	  Default_Args:(key, None), (ignoremask, True), (return_index, False)
      +Func: flatten_descr(ndtype)
      +Func: get_fieldstructure(adtype, lastname, parents)
    	  	  Default_Args:(lastname, None), (parents, None)
      +Func: get_names(adtype)
      +Func: get_names_flat(adtype)
      +Func: izip_records(seqarrays, fill_value, flatten)
    	  	  Default_Args:(fill_value, None), (flatten, True)
      +Func: join_by(key, r1, r2, jointype, r1postfix, r2postfix, defaults, usemask, asrecarray)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None), (usemask, True), (asrecarray, False)
      +Func: merge_arrays(seqarrays, fill_value, flatten, usemask, asrecarray)
    	  	  Default_Args:(fill_value, -1), (flatten, False), (usemask, False), (asrecarray, False)
    
   +Class: ndarray
        (No members)
      +Func: rec_append_fields(base, names, data, dtypes)
    	  	  Default_Args:(dtypes, None)
      +Func: rec_drop_fields(base, drop_names)
      +Func: rec_join(key, r1, r2, jointype, r1postfix, r2postfix, defaults)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recursive_fill_fields(input, output)
      +Func: rename_fields(base, namemapper)
      +Func: stack_arrays(arrays, defaults, usemask, asrecarray, autoconvert)
    	  	  Default_Args:(defaults, None), (usemask, True), (asrecarray, False), (autoconvert, False)
    
   +Class: izip
        (No members)
      +Func: zip_descr(seqarrays, flatten)
    	  	  Default_Args:(flatten, False)

 
Module: numpy.lib.scimath-------------------------------------------------
      +Func: _fix_int_lt_zero(x)
      +Func: _fix_real_abs_gt_1(x)
      +Func: _fix_real_lt_zero(x)
      +Func: _tocomplex(arr)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: arccos(x)
      +Func: arcsin(x)
      +Func: arctanh(x)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: isreal(x)
      +Func: log(x)
      +Func: log10(x)
      +Func: log2(x)
      +Func: logn(n, x)
      +Func: power(x, p)
      +Func: sqrt(x)

 
Module: numpy.lib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: join(path)
    	   Positional_Args: paths

 
Module: numpy.lib.shape_base-------------------------------------------------
      +Func: _replace_zero_by_x_arrays(sub_arys)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
      +Func: column_stack(tup)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: expand_dims(a, axis)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: hsplit(ary, indices_or_sections)
      +Func: isscalar(num)
      +Func: kron(a, b)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: vstack(tup)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: tile(A, reps)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.stride_tricks-------------------------------------------------
    
   +Class: DummyArray
          +  __init__(self, interface, base)
        	  	  Default_Args:(base, None)
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
    	   Positional_Args: args

 
Module: numpy.lib.twodim_base-------------------------------------------------
      +Func: _min_int(low, high)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.type_check-------------------------------------------------
      +Func: _getmaxmin(t)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
    	   Positional_Args: arrays
      +Func: imag(val)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: nan_to_num(x)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: typename(char)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.ufunclike-------------------------------------------------
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)

 
Module: numpy.lib.user_array-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: container
          +  __int__(self)
          +  __ror__(self, other)
          +  __getslice__(self, i, j)
          +  __rsub__(self, other)
          +  astype(self, typecode)
          +  __rdiv__(self, other)
          +  __and__(self, other)
          +  __rmod__(self, other)
          +  __complex__(self)
          +  __rshift__(self, other)
          +  _rc(self, a)
          +  __abs__(self)
          +  __divmod__(self, other)
          +  __ixor__(self, other)
          +  __len__(self)
          +  __isub__(self, other)
          +  __rdivmod__(self, other)
          +  __invert__(self)
          +  tostring(self)
          +  __pow__(self, other)
          +  __lshift__(self, other)
          +  __gt__(self, other)
          +  __oct__(self)
          +  copy(self)
          +  __eq__(self, other)
          +  __rxor__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __mod__(self, other)
          +  __iadd__(self, other)
          +  __le__(self, other)
          +  _scalarfunc(self, func)
          +  byteswap(self)
          +  __irshift__(self, other)
          +  __long__(self)
          +  __ge__(self, other)
          +  __ne__(self, other)
          +  __add__(self, other)
          +  __mul__(self, other)
          +  __rrshift__(self, other)
          +  __imod__(self, other)
          +  __lt__(self, other)
          +  __init__(self, data, dtype, copy)
        	  	  Default_Args:(dtype, None), (copy, True)
          +  __array_wrap__(self)
        	   Positional_Args: args
          +  __rand__(self, other)
          +  __setattr__(self, attr, value)
          +  __iand__(self, other)
          +  __getitem__(self, index)
          +  __ipow__(self, other)
          +  __getattr__(self, attr)
          +  __pos__(self)
          +  __float__(self)
          +  __neg__(self)
          +  __rpow__(self, other)
          +  __idiv__(self, other)
          +  __setitem__(self, index, value)
          +  __or__(self, other)
          +  __add__(self, other)
          +  __sub__(self, other)
          +  __hex__(self)
          +  __ilshift__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  __xor__(self, other)
          +  __ior__(self, other)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __rlshift__(self, other)
    
   +Class: long
        (No members)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: shape(a)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)

 
Module: numpy.lib.utils-------------------------------------------------
    
   +Class: SafeEval
          +  visitExpression(self, node)
        	   Keyword_Args: kw
          +  visitDict(self, node)
        	   Keyword_Args: kw
          +  visitTuple(self, node)
        	   Keyword_Args: kw
          +  default(self, node)
        	   Keyword_Args: kw
          +  visitName(self, node)
        	   Keyword_Args: kw
          +  visit(self, node)
        	   Keyword_Args: kw
          +  visitUnarySub(self, node)
        	   Keyword_Args: kw
          +  visitConst(self, node)
        	   Keyword_Args: kw
          +  visitList(self, node)
        	   Keyword_Args: kw
          +  visitUnaryAdd(self, node)
        	   Keyword_Args: kw
    
   +Class: _Deprecate
          +  __call__(self, func)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, old_name, new_name, message)
        	  	  Default_Args:(old_name, None), (new_name, None), (message, None)
      +Func: _getmembers(item)
      +Func: _info(obj, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: _lookfor_generate_cache(module, import_modules, regenerate)
      +Func: _makenamedict(module)
    	  	  Default_Args:(module, numpy)
      +Func: _set_function_name(func, name)
      +Func: _split_line(name, arguments, width)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: byte_bounds(a)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
    
   +Class: ndarray
        (No members)
      +Func: safe_eval(source)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
    
   +Class: ufunc
        (No members)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: cholesky(a)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
      +Func: det(a)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: inv(a)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.linalg._umath_linalg-------------------------------------------------
    (No members)

 
Module: numpy.linalg.info-------------------------------------------------
    (No members)

 
Module: numpy.linalg.lapack_lite-------------------------------------------------
    
   +Class: LapackError
        (No members)
    +Built-in Function: dgelsd
    	-Method Arguments: None
    +Built-in Function: dgeqrf
    	-Method Arguments: None
    +Built-in Function: dorgqr
    	-Method Arguments: None
    +Built-in Function: xerbla
    	-Method Arguments: None
    +Built-in Function: zgelsd
    	-Method Arguments: None
    +Built-in Function: zgeqrf
    	-Method Arguments: None
    +Built-in Function: zungqr
    	-Method Arguments: None

 
Module: numpy.linalg.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
      +Func: _complexType(t, default)
    	  	  Default_Args:(default, <type numpy.complex128>)
      +Func: _convertarray(a)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: _fastCopyAndTranspose(type)
    	   Positional_Args: arrays
      +Func: _linalgRealType(t)
      +Func: _makearray(a)
      +Func: _multi_svd_norm(x, row_axis, col_axis, op)
      +Func: _raise_linalgerror_eigenvalues_nonconvergence(err, flag)
      +Func: _raise_linalgerror_nonposdef(err, flag)
      +Func: _raise_linalgerror_singular(err, flag)
      +Func: _raise_linalgerror_svd_nonconvergence(err, flag)
      +Func: _realType(t, default)
    	  	  Default_Args:(default, <type numpy.float64>)
    	   Positional_Args: arrays
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: str
        (No members)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
    
   +Class: broadcast
        (No members)
    
   +Class: complex128
        (No members)
      +Func: cholesky(a)
    
   +Class: complexfloating
        (No members)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
    
   +Class: complex64
        (No members)
      +Func: det(a)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: int32
        (No members)
      +Func: get_linalg_error_extobj(callback)
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: inexact
        (No members)
    
   +Class: int32
        (No members)
      +Func: inv(a)
      +Func: isComplexType(t)
    
   +Class: float64
        (No members)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
    
   +Class: float32
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.linalg.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: common_fill_value(a, b)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)

 
Module: numpy.ma.bench-------------------------------------------------
      +Func: compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(nloop, 500), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
    	  	  Default_Args:(nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (ys, array( 0.34843229, -0.10939329,  0.62696634,
        0.94232586, -0.06726402,  0.03514856)), (nmys, masked_array(data =
 -- -0.10939329482826499 --
 0.9423258562761581 -0.06726401964733753 --,
             mask =
  True False  True
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
), (yl, array(-0.46249881, -0.05874306, -0.71484842, ...,  0.14061846,
         0.80100493,  0.53842998,
        0.7129914 , -0.90300466,  0.34166902, ..., -0.57858636,
        -0.52616738, -0.57006057,
       -0.56423836,  0.23460203, -0.43691832, ..., -0.47697874,
         0.29446437, -0.16488538,
       ..., 
        0.22230502,  0.86568315,  0.55734931, ..., -0.44402869,
        -0.2260675 , -0.69556173,
       -0.29070712,  0.73921475,  0.84455725, ...,  0.19090893,
        -0.90885152,  0.07729246,
       -0.70177409,  0.89406624, -0.35730562, ...,  0.85289606,
         0.1499418 ,  0.2239394 )), (nmyl, masked_array(data =
 -0.46249880999122217 -0.05874305688659032 -0.7148484224177971 ...,
  0.14061846335518458 0.8010049305123075 0.5384299756239201
 0.7129914005708506 -- 0.3416690187654263 ..., -0.5785863592262126
  -0.5261673775494202 -0.5700605652599355
 -0.5642383618298537 0.23460203408249392 -0.43691832119092533 ...,
  -0.476978743419465 0.2944643705191894 -0.1648853752385866
 ..., 
 0.22230502142300446 0.8656831471608304 0.5573493121728217 ...,
  -0.4440286904623043 -0.2260675040010951 -0.6955617327401138
 -0.29070711701496377 0.7392147529732043 0.8445572458954209 ...,
  0.19090893426129263 -- 0.0772924634518748
 -0.7017740927812843 0.8940662389667464 -0.3573056186125081 ...,
  0.852896064928353 0.149941795161332 0.22393939941941365,
             mask =
 False False False ..., False False False
 False  True False ..., False False False
 False False False ..., False False False
 ..., 
 False False False ..., False False False
 False False False ..., False  True False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(vars, x), (nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: timer(s, v, nloop, nrep)
    	  	  Default_Args:(v, ), (nloop, 500), (nrep, 3)

 
Module: numpy.ma.core-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedConstant
          +  __array_wrap__(self, obj)
          +  __str__(self)
          +  __reduce__(self)
          +  __array_finalize__(self, obj)
          +  __repr__(self)
          +  flatten(self)
    
   +Class: MaskedIterator
          +  __getitem__(self, indx)
          +  __next__(self)
          +  __setitem__(self, index, value)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, ma)
    
   +Class: _DomainCheckInterval
          +  __call__(self, x)
          +  __init__(self, a, b)
    
   +Class: _DomainGreater
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainGreaterEqual
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainSafeDivide
          +  __call__(self, a, b)
          +  __init__(self, tolerance)
        	  	  Default_Args:(tolerance, None)
    
   +Class: _DomainTan
          +  __call__(self, x)
          +  __init__(self, eps)
    
   +Class: _DomainedBinaryOperation
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, dbfunc, domain, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedBinaryOperation
          +  outer(self, a, b)
          +  __str__(self)
          +  reduce(self, target, axis, dtype)
        	  	  Default_Args:(axis, 0), (dtype, None)
          +  accumulate(self, target, axis)
        	  	  Default_Args:(axis, 0)
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, mbfunc, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedPrintOption
          +  enable(self, shrink)
        	  	  Default_Args:(shrink, 1)
          +  __str__(self)
          +  enabled(self)
          +  display(self)
          +  set_display(self, s)
          +  __str__(self)
          +  __init__(self, display)
    
   +Class: _MaskedUnaryOperation
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, mufunc, fill, domain)
        	  	  Default_Args:(fill, 0), (domain, None)
    
   +Class: _arraymethod
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, onmask)
        	  	  Default_Args:(onmask, True)
          +  __get__(self, obj, objtype)
        	  	  Default_Args:(objtype, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _check_mask_axis(mask, axis)
    
   +Class: _convert2ma
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, params)
        	  	  Default_Args:(params, None)
    
   +Class: _extrema_operation
          +  outer(self, a, b)
          +  reduce(self, target, axis)
        	  	  Default_Args:(axis, None)
          +  __call__(self, a, b)
        	  	  Default_Args:(b, None)
    
   +Class: _frommethod
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, methodname, reversed)
        	  	  Default_Args:(reversed, False)
      +Func: _mareconstruct(subtype, baseclass, baseshape, basetype)
    
   +Class: _maximum_operation
          +  __init__(self)
    
   +Class: _minimum_operation
          +  __init__(self)
      +Func: _recursive_extremum_fill_value(ndtype, extremum)
      +Func: _recursive_filled(a, mask, fill_value)
      +Func: _recursive_make_descr(datatype, newtype)
    	  	  Default_Args:(newtype, <type numpy.bool_>)
      +Func: _recursive_printoption(result, mask, printopt)
      +Func: _recursive_set_default_fill_value(dtypedescr)
      +Func: _recursive_set_fill_value(fillvalue, dtypedescr)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: common_fill_value(a, b)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: doc_note(initialdoc, note)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: fromfile(file, dtype, count, sep)
    	  	  Default_Args:(dtype, <type float>), (count, -1), (sep, )
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: get_fill_value(a)
      +Func: getmask(a)
    	   Positional_Args: arrays
      +Func: get_object_signature(obj)
      +Func: getargspec(func)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: iscomplexobj(x)
    
   +Class: float64
        (No members)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
    
   +Class: long
        (No members)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: expand_dims(a, axis)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.ma.extras-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: MAError
        (No members)
    
   +Class: MAxisConcatenator
          +  __init__(self, axis)
        	  	  Default_Args:(axis, 0)
          +  __getitem__(self, key)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: _covhelper(x, y, rowvar, allow_masked)
    	  	  Default_Args:(y, None), (rowvar, True), (allow_masked, True)
      +Func: _ezclump(mask)
    
   +Class: _fromnxfunction
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_inplace(seq)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: issequence(seq)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: make_mask_descr(ndtype)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
    
   +Class: mr_class
          +  __init__(self)
    
   +Class: ndarray
        (No members)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)

 
Module: numpy.ma.mrecords-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _checknames(descr, names)
    	  	  Default_Args:(names, None)
      +Func: _get_fieldmask(self)
      +Func: _getformats(data)
      +Func: _guessvartypes(arr)
      +Func: _mrreconstruct(subtype, baseclass, baseshape, basetype)
      +Func: addfield(mrecord, newfield, newfieldname)
    	  	  Default_Args:(newfieldname, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: dtype
        (No members)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fromarrays(arraylist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None)
      +Func: fromrecords(reclist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value, mask)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None), (mask, False)
      +Func: fromtextfile(fname, delimitor, commentchar, missingchar, varnames, vartypes)
    	  	  Default_Args:(delimitor, None), (commentchar, #), (missingchar, ), (varnames, None), (vartypes, None)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmaskarray(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: openfile(fname)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)

 
Module: numpy.ma.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma.testutils-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _assert_equal_on_sequences(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: almost(a, b, decimal, fill_value)
    	  	  Default_Args:(decimal, 6), (fill_value, True)
      +Func: approx(a, b, fill_value, rtol, atol)
    	  	  Default_Args:(fill_value, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_approx_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, fill_value)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (fill_value, True)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_equal_records(a, b)
      +Func: assert_mask_equal(m1, m2, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: fail_if_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
    
   +Class: float64
        (No members)
      +Func: getmask(a)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
    
   +Class: ndarray
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matlib-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: RankWarning
        (No members)
    
   +Class: VisibleDeprecationWarning
        (No members)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asscalar(a)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    	   Positional_Args: args
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
      +Func: byte_bounds(a)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
    
   +Class: dtype
        (No members)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
      +Func: empty(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(n, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
      +Func: fliplr(m)
      +Func: flipud(m)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: fromregex(file, regexp, dtype)
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
    
   +Class: generic
        (No members)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
    
   +Class: float16
        (No members)
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: hstack(tup)
      +Func: i0(x)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
    +Built-in Function: inner
    	-Method Arguments:
a, b
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
    
   +Class: int64
        (No members)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isfortran(a)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndarray
        (No members)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: ndim(a)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: packages
    	   Keyword_Args: options
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: rank(a)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: repmat(a, m, n)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
      +Func: sinc(x)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: tile(A, reps)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
    
   +Class: unsignedinteger
        (No members)
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: uint16
        (No members)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)
      +Func: zeros(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.matrixlib-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matrixlib.defmatrix-------------------------------------------------
      +Func: _convert_from_string(data)
      +Func: _eval(astr)
      +Func: _from_string(str, gdict, ldict)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: isscalar(num)
      +Func: issubdtype(arg1, arg2)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: matrix_power(M, n)

 
Module: numpy.matrixlib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.polynomial-------------------------------------------------
    
   +Class: Chebyshev
        (No members)
    
   +Class: Hermite
        (No members)
    
   +Class: HermiteE
        (No members)
    
   +Class: Laguerre
        (No members)
    
   +Class: Legendre
        (No members)
    
   +Class: Polynomial
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.polynomial._polybase-------------------------------------------------
    
   +Class: ABCMeta
          +  __instancecheck__(cls, instance)
          +  register(cls, subclass)
          +  __subclasscheck__(cls, subclass)
          +  _dump_registry(cls, file)
        	  	  Default_Args:(file, None)
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Number
        (No members)
      +Func: abstractmethod(funcobj)
    
   +Class: abstractproperty
        (No members)

 
Module: numpy.polynomial.chebyshev-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Chebyshev
        (No members)
      +Func: _cseries_to_zseries(c)
      +Func: _zseries_der(zs)
      +Func: _zseries_div(z1, z2)
      +Func: _zseries_int(zs)
      +Func: _zseries_mul(z1, z2)
      +Func: _zseries_to_cseries(zs)
      +Func: cheb2poly(c)
      +Func: chebadd(c1, c2)
      +Func: chebcompanion(c)
      +Func: chebder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: chebdiv(c1, c2)
      +Func: chebfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: chebfromroots(roots)
      +Func: chebgauss(deg)
      +Func: chebgrid2d(x, y, c)
      +Func: chebgrid3d(x, y, z, c)
      +Func: chebint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: chebline(off, scl)
      +Func: chebmul(c1, c2)
      +Func: chebmulx(c)
      +Func: chebpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: chebpts1(npts)
      +Func: chebpts2(npts)
      +Func: chebroots(c)
      +Func: chebsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: chebval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: chebval2d(x, y, c)
      +Func: chebval3d(x, y, z, c)
      +Func: chebvander(x, deg)
      +Func: chebvander2d(x, y, deg)
      +Func: chebvander3d(x, y, z, deg)
      +Func: chebweight(x)
      +Func: poly2cheb(pol)

 
Module: numpy.polynomial.hermite-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Hermite
        (No members)
      +Func: herm2poly(c)
      +Func: hermadd(c1, c2)
      +Func: hermcompanion(c)
      +Func: hermder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermdiv(c1, c2)
      +Func: hermfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermfromroots(roots)
      +Func: hermgauss(deg)
      +Func: hermgrid2d(x, y, c)
      +Func: hermgrid3d(x, y, z, c)
      +Func: hermint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermline(off, scl)
      +Func: hermmul(c1, c2)
      +Func: hermmulx(c)
      +Func: hermpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermroots(c)
      +Func: hermsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermval2d(x, y, c)
      +Func: hermval3d(x, y, z, c)
      +Func: hermvander(x, deg)
      +Func: hermvander2d(x, y, deg)
      +Func: hermvander3d(x, y, z, deg)
      +Func: hermweight(x)
      +Func: poly2herm(pol)

 
Module: numpy.polynomial.hermite_e-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: HermiteE
        (No members)
      +Func: herme2poly(c)
      +Func: hermeadd(c1, c2)
      +Func: hermecompanion(c)
      +Func: hermeder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermediv(c1, c2)
      +Func: hermefit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermefromroots(roots)
      +Func: hermegauss(deg)
      +Func: hermegrid2d(x, y, c)
      +Func: hermegrid3d(x, y, z, c)
      +Func: hermeint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermeline(off, scl)
      +Func: hermemul(c1, c2)
      +Func: hermemulx(c)
      +Func: hermepow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermeroots(c)
      +Func: hermesub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermeval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermeval2d(x, y, c)
      +Func: hermeval3d(x, y, z, c)
      +Func: hermevander(x, deg)
      +Func: hermevander2d(x, y, deg)
      +Func: hermevander3d(x, y, z, deg)
      +Func: hermeweight(x)
      +Func: poly2herme(pol)

 
Module: numpy.polynomial.laguerre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Laguerre
        (No members)
      +Func: lag2poly(c)
      +Func: lagadd(c1, c2)
      +Func: lagcompanion(c)
      +Func: lagder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: lagdiv(c1, c2)
      +Func: lagfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: lagfromroots(roots)
      +Func: laggauss(deg)
      +Func: laggrid2d(x, y, c)
      +Func: laggrid3d(x, y, z, c)
      +Func: lagint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: lagline(off, scl)
      +Func: lagmul(c1, c2)
      +Func: lagmulx(c)
      +Func: lagpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: lagroots(c)
      +Func: lagsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: lagval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: lagval2d(x, y, c)
      +Func: lagval3d(x, y, z, c)
      +Func: lagvander(x, deg)
      +Func: lagvander2d(x, y, deg)
      +Func: lagvander3d(x, y, z, deg)
      +Func: lagweight(x)
      +Func: poly2lag(pol)

 
Module: numpy.polynomial.legendre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Legendre
        (No members)
      +Func: leg2poly(c)
      +Func: legadd(c1, c2)
      +Func: legcompanion(c)
      +Func: legder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: legdiv(c1, c2)
      +Func: legfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: legfromroots(roots)
      +Func: leggauss(deg)
      +Func: leggrid2d(x, y, c)
      +Func: leggrid3d(x, y, z, c)
      +Func: legint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: legline(off, scl)
      +Func: legmul(c1, c2)
      +Func: legmulx(c)
      +Func: legpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: legroots(c)
      +Func: legsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: legval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: legval2d(x, y, c)
      +Func: legval3d(x, y, z, c)
      +Func: legvander(x, deg)
      +Func: legvander2d(x, y, deg)
      +Func: legvander3d(x, y, z, deg)
      +Func: legweight(x)
      +Func: poly2leg(pol)

 
Module: numpy.polynomial.polynomial-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Polynomial
        (No members)
      +Func: polyadd(c1, c2)
      +Func: polycompanion(c)
      +Func: polyder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: polydiv(c1, c2)
      +Func: polyfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: polyfromroots(roots)
      +Func: polygrid2d(x, y, c)
      +Func: polygrid3d(x, y, z, c)
      +Func: polyint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: polyline(off, scl)
      +Func: polymul(c1, c2)
      +Func: polymulx(c)
      +Func: polypow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, None)
      +Func: polyroots(c)
      +Func: polysub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: polyval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: polyval2d(x, y, c)
      +Func: polyval3d(x, y, z, c)
      +Func: polyvander(x, deg)
      +Func: polyvander2d(x, y, deg)
      +Func: polyvander3d(x, y, z, deg)

 
Module: numpy.polynomial.polyutils-------------------------------------------------
    
   +Class: PolyBase
        (No members)
    
   +Class: PolyDomainError
        (No members)
    
   +Class: PolyError
        (No members)
    
   +Class: RankWarning
        (No members)
      +Func: as_series(alist, trim)
    	  	  Default_Args:(trim, True)
      +Func: getdomain(x)
      +Func: mapdomain(x, old, new)
      +Func: mapparms(old, new)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: trimseq(seq)

 
Module: numpy.polynomial.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.random-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.info-------------------------------------------------
    (No members)

 
Module: numpy.random.mtrand-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    +Built-in Function: _shape_from_size
    	-Method Arguments: None
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: dirname(p)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: newer(source, target)
      +Func: split(p)

 
Module: numpy.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.testing.decorators-------------------------------------------------
      +Func: deprecated(conditional)
    	  	  Default_Args:(conditional, True)
      +Func: knownfailureif(fail_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: setastest(tf)
    	  	  Default_Args:(tf, True)
      +Func: skipif(skip_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: slow(t)

 
Module: numpy.testing.noseclasses-------------------------------------------------
    
   +Class: ErrorClass
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: errorClasses
        	   Keyword_Args: kw
    
   +Class: ErrorClassPlugin
          +  addError(self, test, err)
          +  patchResult(self, result)
          +  prepareTestResult(self, result)
    
   +Class: KnownFailure
          +  configure(self, options, conf)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
    
   +Class: KnownFailureTest
        (No members)
    
   +Class: NumpyDocTestCase
          +  __init__(self, test, optionflags, setUp, tearDown, checker, obj, result_var)
        	  	  Default_Args:(optionflags, 0), (setUp, None), (tearDown, None), (checker, None), (obj, None), (result_var, _)
    
   +Class: NumpyDocTestFinder
          +  _find(self, tests, obj, name, module, source_lines, globs, seen)
          +  _from_module(self, module, object)
    
   +Class: NumpyDoctest
          +  afterContext(self)
          +  loadTestsFromModule(self, module)
          +  wantFile(self, file)
          +  set_test_context(self, test)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
          +  configure(self, options, config)
    
   +Class: NumpyOutputChecker
          +  check_output(self, want, got, optionflags)
    
   +Class: NumpyTestProgram
          +  runTests(self)
    
   +Class: Plugin
          +  tolist(self, val)
          +  addOptions(self, parser, env)
        	  	  Default_Args:(env, None)
          +  configure(self, options, conf)
          +  add_options(self, parser, env)
        	  	  Default_Args:(env, None)
          +  options(self, parser, env)
          +  __init__(self)
          +  help(self)
    
   +Class: Unplugger
          +  options(self, parser, env)
          +  __init__(self, to_unplug)
        	  	  Default_Args:(to_unplug, doctest)
          +  configure(self, options, config)
      +Func: get_package_name(filepath)
      +Func: src(filename)

 
Module: numpy.testing.nosetester-------------------------------------------------
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    
   +Class: basestring
        (No members)
      +Func: get_package_name(filepath)
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)

 
Module: numpy.testing.print_coercion_tables-------------------------------------------------
    
   +Class: GenericObject
          +  __radd__(self, other)
          +  __add__(self, other)
          +  __init__(self, v)
      +Func: print_cancast_table(ntypes)
      +Func: print_coercion_table(ntypes, inputfirstvalue, inputsecondvalue, firstarray, use_promote_types)
    	  	  Default_Args:(use_promote_types, False)

 
Module: numpy.testing.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing.utils-------------------------------------------------
      +Func: GetPerformanceAttributes(object, counter, instance, inum, format, machine)
    	  	  Default_Args:(instance, None), (inum, -1), (format, None), (machine, None)
    
   +Class: IgnoreException
        (No members)
    
   +Class: StringIO
          +  isatty(self)
          +  truncate(self, size)
        	  	  Default_Args:(size, None)
          +  read(self, n)
        	  	  Default_Args:(n, -1)
          +  writelines(self, iterable)
          +  readlines(self, sizehint)
        	  	  Default_Args:(sizehint, 0)
          +  next(self)
          +  write(self, s)
          +  __iter__(self)
          +  tell(self)
          +  flush(self)
          +  close(self)
          +  readline(self, length)
        	  	  Default_Args:(length, None)
          +  getvalue(self)
          +  seek(self, pos, mode)
        	  	  Default_Args:(mode, 0)
          +  __init__(self, buf)
        	  	  Default_Args:(buf, )
    
   +Class: WarningManager
          +  __exit__(self)
          +  __enter__(self)
          +  __init__(self, record, module)
        	  	  Default_Args:(record, False), (module, None)
    
   +Class: WarningMessage
          +  __str__(self)
          +  __init__(self, message, category, filename, lineno, file, line)
        	  	  Default_Args:(file, None), (line, None)
      +Func: _assert_valid_refcount(op)
      +Func: _gen_alignment_data(dtype, type, max_size)
    	  	  Default_Args:(dtype, <type numpy.float32>), (type, binary), (max_size, 24)
      +Func: _integer_repr(x, vdt, comp)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, precision)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (precision, 6)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    
   +Class: float32
        (No members)
      +Func: gisfinite(x)
      +Func: gisinf(x)
      +Func: gisnan(x)
      +Func: integer_repr(x)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: mkdtemp(suffix, prefix, dir)
    	  	  Default_Args:(suffix, ), (prefix, tmp), (dir, None)
    
   +Class: ndarray
        (No members)
      +Func: nulp_diff(x, y, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: partial
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
    	   Positional_Args: args
    	   Keyword_Args: kwds

 
Module: numpy.version-------------------------------------------------
    (No members)
numpy.__config__
numpy._import_tools
numpy.add_newdocs
numpy.compat
numpy.compat._inspect
numpy.compat.py3k
numpy.compat.setup
numpy.core
numpy.core._dotblas
numpy.core._dummy
numpy.core._internal
numpy.core._methods
numpy.core.arrayprint
numpy.core.cversions
numpy.core.defchararray
numpy.core.fromnumeric
numpy.core.function_base
numpy.core.generate_numpy_api
numpy.core.getlimits
numpy.core.info
numpy.core.machar
numpy.core.memmap
numpy.core.multiarray
numpy.core.multiarray_tests
numpy.core.numeric
numpy.core.numerictypes
numpy.core.operand_flag_tests
numpy.core.records
numpy.core.scalarmath
numpy.core.setup
numpy.core.setup_common
numpy.core.shape_base
numpy.core.struct_ufunc_test
numpy.core.test_rational
numpy.core.umath
numpy.core.umath_tests
numpy.ctypeslib
numpy.distutils
numpy.distutils.__config__
numpy.distutils.__version__
numpy.distutils.ccompiler
numpy.distutils.command
numpy.distutils.command.autodist
numpy.distutils.command.bdist_rpm
numpy.distutils.command.build
numpy.distutils.command.build_clib
numpy.distutils.command.build_ext
numpy.distutils.command.build_py
numpy.distutils.command.build_scripts
numpy.distutils.command.build_src
numpy.distutils.command.config
numpy.distutils.command.config_compiler
numpy.distutils.command.develop
numpy.distutils.command.egg_info
numpy.distutils.command.install
numpy.distutils.command.install_clib
numpy.distutils.command.install_data
numpy.distutils.command.install_headers
numpy.distutils.command.sdist
numpy.distutils.compat
numpy.distutils.conv_template
numpy.distutils.core
numpy.distutils.cpuinfo
numpy.distutils.environment
numpy.distutils.exec_command
numpy.distutils.extension
numpy.distutils.fcompiler
numpy.distutils.fcompiler.absoft
numpy.distutils.fcompiler.compaq
numpy.distutils.fcompiler.g95
numpy.distutils.fcompiler.gnu
numpy.distutils.fcompiler.hpux
numpy.distutils.fcompiler.ibm
numpy.distutils.fcompiler.intel
numpy.distutils.fcompiler.lahey
numpy.distutils.fcompiler.mips
numpy.distutils.fcompiler.nag
numpy.distutils.fcompiler.none
numpy.distutils.fcompiler.pathf95
numpy.distutils.fcompiler.pg
numpy.distutils.fcompiler.sun
numpy.distutils.fcompiler.vast
numpy.distutils.from_template
numpy.distutils.info
numpy.distutils.intelccompiler
numpy.distutils.lib2def
numpy.distutils.line_endings
numpy.distutils.log
numpy.distutils.mingw32ccompiler
numpy.distutils.misc_util
numpy.distutils.npy_pkg_config
numpy.distutils.numpy_distribution
numpy.distutils.pathccompiler
numpy.distutils.setup
numpy.distutils.system_info
numpy.distutils.unixccompiler
numpy.doc
numpy.doc.basics
numpy.doc.broadcasting
numpy.doc.byteswapping
numpy.doc.constants
numpy.doc.creation
numpy.doc.glossary
numpy.doc.howtofind
numpy.doc.indexing
numpy.doc.internals
numpy.doc.io
numpy.doc.jargon
numpy.doc.methods_vs_functions
numpy.doc.misc
numpy.doc.performance
numpy.doc.structured_arrays
numpy.doc.subclassing
numpy.doc.ufuncs
numpy.dual
numpy.f2py
numpy.f2py.__version__
numpy.f2py.auxfuncs
numpy.f2py.capi_maps
numpy.f2py.cb_rules
numpy.f2py.cfuncs
numpy.f2py.common_rules
numpy.f2py.crackfortran
numpy.f2py.diagnose
numpy.f2py.f2py2e
numpy.f2py.f2py_testing
numpy.f2py.f90mod_rules
numpy.f2py.func2subr
numpy.f2py.info
numpy.f2py.rules
numpy.f2py.setup
numpy.f2py.use_rules
numpy.fft
numpy.fft.fftpack
numpy.fft.fftpack_lite
numpy.fft.helper
numpy.fft.info
numpy.fft.setup
numpy.lib
numpy.lib._compiled_base
numpy.lib._datasource
numpy.lib._iotools
numpy.lib._version
numpy.lib.arraypad
numpy.lib.arraysetops
numpy.lib.arrayterator
numpy.lib.financial
numpy.lib.format
numpy.lib.function_base
numpy.lib.index_tricks
numpy.lib.info
numpy.lib.nanfunctions
numpy.lib.npyio
numpy.lib.polynomial
numpy.lib.recfunctions
numpy.lib.scimath
numpy.lib.setup
numpy.lib.shape_base
numpy.lib.stride_tricks
numpy.lib.twodim_base
numpy.lib.type_check
numpy.lib.ufunclike
numpy.lib.user_array
numpy.lib.utils
numpy.linalg
numpy.linalg._umath_linalg
numpy.linalg.info
numpy.linalg.lapack_lite
numpy.linalg.linalg
numpy.linalg.setup
numpy.ma
numpy.ma.bench
numpy.ma.core
numpy.ma.extras
numpy.ma.mrecords
numpy.ma.setup
numpy.ma.testutils
numpy.ma.timer_comparison
numpy.ma.version
numpy.matlib
numpy.matrixlib
numpy.matrixlib.defmatrix
numpy.matrixlib.setup
numpy.polynomial
numpy.polynomial._polybase
numpy.polynomial.chebyshev
numpy.polynomial.hermite
numpy.polynomial.hermite_e
numpy.polynomial.laguerre
numpy.polynomial.legendre
numpy.polynomial.polynomial
numpy.polynomial.polytemplate
numpy.polynomial.polyutils
numpy.polynomial.setup
numpy.random
numpy.random.info
numpy.random.mtrand
numpy.random.setup
numpy.setup
numpy.testing
numpy.testing.decorators
numpy.testing.noseclasses
numpy.testing.nosetester
numpy.testing.print_coercion_tables
numpy.testing.setup
numpy.testing.utils
numpy.version

 
 
numpy.__config__.get_info(name)

 
 

 
 
numpy.add_newdocs.add_newdoc(place, obj, doc)

 
 
numpy.compat.asbytes_nested(x)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat.getargspec(func)
numpy.compat.isfileobj(f)
numpy.compat.open_latin1(filename, mode)
numpy.compat.sixu(s)

 
 
numpy.compat._inspect.formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object, convert, join)

 
 
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.open_latin1(filename, mode)
numpy.compat.py3k.sixu(s)

 
 
numpy.compat.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.core._dotblas.alterdot
numpy.core._dotblas.dot
(
a, b, out=None
numpy.core._dotblas.inner
(
a, b
numpy.core._dotblas.restoredot
numpy.core._dotblas.vdot
(
a, b

 
 

 
 
numpy.core._internal._add_trailing_padding(value, padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)

 
 
numpy.core._methods._all(a, axis, dtype, out, keepdims)
numpy.core._methods._amax(a, axis, out, keepdims)
numpy.core._methods._amin(a, axis, out, keepdims)
numpy.core._methods._any(a, axis, dtype, out, keepdims)
numpy.core._methods._count_reduce_items(arr, axis)
numpy.core._methods._mean(a, axis, dtype, out, keepdims)
numpy.core._methods._prod(a, axis, dtype, out, keepdims)
numpy.core._methods._std(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods._sum(a, axis, dtype, out, keepdims)
numpy.core._methods._var(a, axis, dtype, out, ddof, keepdims)
numpy.core._methods.asanyarray(a, dtype, order)
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False
numpy.core._methods.reduce
(
a, axis=0, dtype=None, out=None, keepdims=False

 
 

 
 
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray.len
(
object
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._vec_string
numpy.core.defchararray.add(x1, x2)
numpy.core.defchararray.array(obj, itemsize, copy, unicode, order)
numpy.core.defchararray.asarray(obj, itemsize, unicode, order)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a, width, fillchar)

 
 
numpy.core.fromnumeric.sctype2char(sctype)
numpy.core.fromnumeric.sum
(
sequence, start
numpy.core.fromnumeric._wrapit(obj, method)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a, axis, out, keepdims)
numpy.core.fromnumeric.alltrue(a, axis, out, keepdims)
numpy.core.fromnumeric.amax(a, axis, out, keepdims)
numpy.core.fromnumeric.amin(a, axis, out, keepdims)
numpy.core.fromnumeric.any(a, axis, out, keepdims)
numpy.core.fromnumeric.argmax(a, axis)
numpy.core.fromnumeric.argmin(a, axis)
numpy.core.fromnumeric.argpartition(a, kth, axis, kind, order)
numpy.core.fromnumeric.argsort(a, axis, kind, order)
numpy.core.fromnumeric.around(a, decimals, out)
numpy.core.fromnumeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.fromnumeric.asanyarray(a, dtype, order)
numpy.core.fromnumeric.asarray(a, dtype, order)
numpy.core.fromnumeric.choose(a, choices, out, mode)
numpy.core.fromnumeric.clip(a, a_min, a_max, out)
numpy.core.fromnumeric.compress(condition, a, axis, out)
numpy.core.fromnumeric.concatenate
(
(a1, a2, ...
numpy.core.fromnumeric.cumprod(a, axis, dtype, out)
numpy.core.fromnumeric.cumproduct(a, axis, dtype, out)
numpy.core.fromnumeric.cumsum(a, axis, dtype, out)
numpy.core.fromnumeric.diagonal(a, offset, axis1, axis2)
numpy.core.fromnumeric.mean(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a, kth, axis, kind, order)
numpy.core.fromnumeric.prod(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.product(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.ptp(a, axis, out)
numpy.core.fromnumeric.put(a, ind, v, mode)
numpy.core.fromnumeric.rank(a)
numpy.core.fromnumeric.ravel(a, order)
numpy.core.fromnumeric.repeat(a, repeats, axis)
numpy.core.fromnumeric.reshape(a, newshape, order)
numpy.core.fromnumeric.resize(a, new_shape)
numpy.core.fromnumeric.round_(a, decimals, out)
numpy.core.fromnumeric.searchsorted(a, v, side, sorter)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a, axis)
numpy.core.fromnumeric.sometrue(a, axis, out, keepdims)
numpy.core.fromnumeric.sort(a, axis, kind, order)
numpy.core.fromnumeric.squeeze(a, axis)
numpy.core.fromnumeric.std(a, axis, dtype, out, ddof, keepdims)
numpy.core.fromnumeric.sum(a, axis, dtype, out, keepdims)
numpy.core.fromnumeric.swapaxes(a, axis1, axis2)
numpy.core.fromnumeric.take(a, indices, axis, out, mode)
numpy.core.fromnumeric.trace(a, offset, axis1, axis2, dtype, out)
numpy.core.fromnumeric.transpose(a, axes)
numpy.core.fromnumeric.var(a, axis, dtype, out, ddof, keepdims)

 
 
numpy.core.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.core.function_base.logspace(start, stop, num, endpoint, base, dtype)
numpy.core.function_base.result_type
(
*arrays_and_dtypes

 
 

 
 

 
 

 
 

 
 
numpy.core.multiarray._fastCopyAndTranspose
(
a
numpy.core.multiarray._get_ndarray_c_version
numpy.core.multiarray._reconstruct
(
subtype, shape, dtype
numpy.core.multiarray._vec_string
numpy.core.multiarray.arange
(
start, stop, step,, dtype=None
numpy.core.multiarray.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.multiarray.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.multiarray.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.can_cast
(
from, totype, casting = safe
numpy.core.multiarray.compare_chararrays
numpy.core.multiarray.concatenate
(
(a1, a2, ...
numpy.core.multiarray.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.multiarray.correlate
(
a,v, mode=0
numpy.core.multiarray.correlate2
numpy.core.multiarray.count_nonzero
(
a
numpy.core.multiarray.datetime_as_string
numpy.core.multiarray.datetime_data
numpy.core.multiarray.dot
numpy.core.multiarray.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.multiarray.empty
(
shape, dtype=float, order=C
numpy.core.multiarray.empty_like
(
a, dtype=None, order=K, subok=True
numpy.core.multiarray.format_longfloat
numpy.core.multiarray.frombuffer
(
buffer, dtype=float, count=-1, offset=0
numpy.core.multiarray.fromfile
(
file, dtype=float, count=-1, sep=
numpy.core.multiarray.fromiter
(
iterable, dtype, count=-1
numpy.core.multiarray.fromstring
(
string, dtype=float, count=-1, sep=
numpy.core.multiarray.getbuffer
(
obj ,offset, size
numpy.core.multiarray.inner
numpy.core.multiarray.int_asbuffer
numpy.core.multiarray.is_busday
(
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.multiarray.lexsort
(
keys, axis=-1
numpy.core.multiarray.may_share_memory
numpy.core.multiarray.min_scalar_type
(
a
numpy.core.multiarray.nested_iters
numpy.core.multiarray.newbuffer
(
size
numpy.core.multiarray.promote_types
(
type1, type2
numpy.core.multiarray.putmask
(
a, mask, values
numpy.core.multiarray.result_type
(
*arrays_and_dtypes
numpy.core.multiarray.scalar
(
dtype, obj
numpy.core.multiarray.set_datetimeparse_function
numpy.core.multiarray.set_numeric_ops
(
op1=func1, op2=func2, ...
numpy.core.multiarray.set_string_function
(
f, repr=1
numpy.core.multiarray.set_typeDict
(
dict
numpy.core.multiarray.test_interrupt
numpy.core.multiarray.where
(
condition, x, y
numpy.core.multiarray.zeros
(
shape, dtype=float, order=C

 
 
numpy.core.multiarray_tests.array_indexing
numpy.core.multiarray_tests.get_buffer_info
numpy.core.multiarray_tests.test_as_c_array
numpy.core.multiarray_tests.test_inplace_increment
numpy.core.multiarray_tests.test_int_subclass
numpy.core.multiarray_tests.test_nditer_too_large
numpy.core.multiarray_tests.test_neighborhood_iterator
numpy.core.multiarray_tests.test_neighborhood_iterator_oob
numpy.core.multiarray_tests.test_pydatamem_seteventhook_end
numpy.core.multiarray_tests.test_pydatamem_seteventhook_start

 
 
numpy.core.numeric._maketup(descr, val)
numpy.core.numeric._mode_from_name(mode)
numpy.core.numeric._move_axis_to_0(a, axis)
numpy.core.numeric.alen(a)
numpy.core.numeric.all(a, axis, out, keepdims)
numpy.core.numeric.allclose(a, b, rtol, atol)
numpy.core.numeric.alltrue(a, axis, out, keepdims)
numpy.core.numeric.alterdot
numpy.core.numeric.amax(a, axis, out, keepdims)
numpy.core.numeric.amin(a, axis, out, keepdims)
numpy.core.numeric.any(a, axis, out, keepdims)
numpy.core.numeric.arange
(
start, stop, step,, dtype=None
numpy.core.numeric.argmax(a, axis)
numpy.core.numeric.argmin(a, axis)
numpy.core.numeric.argpartition(a, kth, axis, kind, order)
numpy.core.numeric.argsort(a, axis, kind, order)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.around(a, decimals, out)
numpy.core.numeric.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.numeric.array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
numpy.core.numeric.array_equal(a1, a2)
numpy.core.numeric.array_equiv(a1, a2)
numpy.core.numeric.array_repr(arr, max_line_width, precision, suppress_small)
numpy.core.numeric.array_str(a, max_line_width, precision, suppress_small)
numpy.core.numeric.asanyarray(a, dtype, order)
numpy.core.numeric.asarray(a, dtype, order)
numpy.core.numeric.ascontiguousarray(a, dtype)
numpy.core.numeric.asfortranarray(a, dtype)
numpy.core.numeric.base_repr(number, base, padding)
numpy.core.numeric.binary_repr(num, width)
numpy.core.numeric.busday_count
(
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
numpy.core.numeric.busday_offset
(
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
numpy.core.numeric.can_cast
(
from, totype, casting = safe
numpy.core.numeric.choose(a, choices, out, mode)
numpy.core.numeric.clip(a, a_min, a_max, out)
numpy.core.numeric.compare_chararrays
numpy.core.numeric.compress(condition, a, axis, out)
numpy.core.numeric.concatenate
(
(a1, a2, ...
numpy.core.numeric.convolve(a, v, mode)
numpy.core.numeric.copyto
(
dst, src, casting=same_kind, where=None
numpy.core.numeric.correlate(a, v, mode, old_behavior)
numpy.core.numeric.count_nonzero
(
a
numpy.core.numeric.cross(a, b, axisa, axisb, axisc, axis)
numpy.core.numeric.cumprod(a, axis, dtype, out)
numpy.core.numeric.cumproduct(a, axis, dtype, out)
numpy.core.numeric.cumsum(a, axis, dtype, out)
numpy.core.numeric.datetime_as_string
numpy.core.numeric.datetime_data
numpy.core.numeric.diagonal(a, offset, axis1, axis2)
numpy.core.numeric.dot
(
a, b, out=None
numpy.core.numeric.einsum
(
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
numpy.core.numeric.empty
(
shape, dtype=float, order=C
numpy.core.numeric.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.core.numerictypes._add_array_type(typename, bits)
numpy.core.numerictypes._can_coerce_all(dtypelist, start)
numpy.core.numerictypes._evalname(name)
numpy.core.numerictypes._find_common_coerce(a, b)
numpy.core.numerictypes._python_type(t)

 
 

 
 
numpy.core.records.array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)

 
 
numpy.core.scalarmath.alter_pythonmath
numpy.core.scalarmath.restore_pythonmath
numpy.core.scalarmath.use_pythonmath
numpy.core.scalarmath.use_scalarmath

 
 

 
 
numpy.core.setup_common.check_api_version(apiversion, codegen_dir)
numpy.core.setup_common.check_long_double_representation(cmd)
numpy.core.setup_common.fname2def(name)
numpy.core.setup_common.get_api_versions(apiversion, codegen_dir)
numpy.core.setup_common.is_released(config)
numpy.core.setup_common.join(path)
numpy.core.setup_common.long_double_representation(lines)
numpy.core.setup_common.pyod(filename)
numpy.core.setup_common.sym2def(symbol)
numpy.core.setup_common.type2def(symbol)

 
 
numpy.core.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.core.shape_base.asanyarray(a, dtype, order)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.vstack(tup)

 
 

 
 

 
 
numpy.core.umath.frompyfunc
(
func, nin, nout
numpy.core.umath.geterrobj
numpy.core.umath.seterrobj
(
errobj

 
 
numpy.core.umath_tests.test_signature

 
 
numpy.ctypeslib._flags_fromnum(num)

 
 

 
 
numpy.distutils.__config__.get_info(name)

 
 

 
 

 
 

 
 
numpy.distutils.command.autodist.check_compiler_gcc4(cmd)
numpy.distutils.command.autodist.check_inline(cmd)

 
 

 
 

 
 
numpy.distutils.command.build_clib.all_strings(lst)

 
 

 
 

 
 

 
 
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src._find_swig_target(target_dir, name)
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.search
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.match
(
string, pos, endpos
numpy.distutils.command.build_src.appendpath(prefix, path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.command.sdist.get_data_files(data)

 
 

 
 
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr, env, level, line)
numpy.distutils.conv_template.parse_structure(astr, level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)

 
 

 
 

 
 

 
 
numpy.distutils.exec_command._exec_command(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_posix(command, use_shell, use_tee)
numpy.distutils.exec_command._exec_command_python(command, exec_command_dir)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._supports_fileno(stream)
numpy.distutils.exec_command.exec_command(command, execute_in, use_shell, use_tee, _with_python)
numpy.distutils.exec_command.find_executable(exe, path, _cache)
numpy.distutils.exec_command.is_sequence(seq)
numpy.distutils.exec_command.make_temp_file(suffix, prefix, text)
numpy.distutils.exec_command.open_latin1(filename, mode)
numpy.distutils.exec_command.quote_arg(arg)
numpy.distutils.exec_command.splitcmdline(line)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr, names)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)

 
 

 
 

 
 
numpy.distutils.lib2def.getnm(nm_cmd)
numpy.distutils.lib2def.output_def(dlist, flist, header, file)
numpy.distutils.lib2def.parse_nm(nm_output)

 
 
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files, dir_name, file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files, dir_name, file_names)

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.distutils.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.dual.cholesky(a, lower, overwrite_a, check_finite)
numpy.dual.det(a, overwrite_a, check_finite)
numpy.dual.eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
numpy.dual.eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.eigvals(a, b, overwrite_a, check_finite)
numpy.dual.eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
numpy.dual.fft(a, n, axis)
numpy.dual.fft2(a, s, axes)
numpy.dual.fftn(a, s, axes)
numpy.dual.ifft(a, n, axis)
numpy.dual.ifft2(a, s, axes)
numpy.dual.ifftn(a, s, axes)
numpy.dual.inv(a, overwrite_a, check_finite)
numpy.dual.lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
numpy.dual.norm(a, ord)
numpy.dual.pinv2(a, cond, rcond, return_rank, check_finite)
numpy.dual.register_func(name, func)
numpy.dual.restore_func(name)
numpy.dual.solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
numpy.dual.svd(a, full_matrices, compute_uv, overwrite_a, check_finite)

 
 

 
 

 
 
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules, d, var)
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd, ar)
numpy.f2py.auxfuncs.write(self, string)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout, cb_map)
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.reduce
(
function, sequence, initial
numpy.f2py.auxfuncs.replace(str, d, defaultsep)
numpy.f2py.auxfuncs.pprint(object, stream, indent, width, depth)
numpy.f2py.auxfuncs.stripcomma(s)

 
 
numpy.f2py.capi_maps.applyrules(rules, d, var)
numpy.f2py.capi_maps.cb_routsign2map(rout, um)
numpy.f2py.capi_maps.cb_sign2map(a, var, index)
numpy.f2py.capi_maps.common_sign2map(a, var)
numpy.f2py.capi_maps.containscommon(rout)
numpy.f2py.capi_maps.containsmodule(block)
numpy.f2py.capi_maps.debugcapi(var)
numpy.f2py.capi_maps.dictappend(rd, ar)
numpy.f2py.capi_maps.write(self, string)
numpy.f2py.capi_maps.flatlist(l)
numpy.f2py.capi_maps.gentitle(name)
numpy.f2py.capi_maps.get_kind(var)
numpy.f2py.capi_maps.getargs(rout)
numpy.f2py.capi_maps.getargs2(rout)
numpy.f2py.capi_maps.getarrdims(a, var, verbose)
numpy.f2py.capi_maps.getarrdocsign(a, var)
numpy.f2py.capi_maps.getcallprotoargument(rout, cb_map)
numpy.f2py.capi_maps.getcallstatement(rout)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getfortranname(rout)
numpy.f2py.capi_maps.getinit(a, var)
numpy.f2py.capi_maps.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.capi_maps.getpydocsign(a, var)
numpy.f2py.capi_maps.getpymethoddef(rout)
numpy.f2py.capi_maps.getrestdoc(rout)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.getusercode(rout)
numpy.f2py.capi_maps.getusercode1(rout)
numpy.f2py.capi_maps.hasassumedshape(rout)
numpy.f2py.capi_maps.hasbody(rout)
numpy.f2py.capi_maps.hascallstatement(rout)
numpy.f2py.capi_maps.hascommon(rout)
numpy.f2py.capi_maps.hasexternals(rout)
numpy.f2py.capi_maps.hasinitvalue(var)
numpy.f2py.capi_maps.hasinitvalueasstring(var)
numpy.f2py.capi_maps.hasnote(var)
numpy.f2py.capi_maps.hasresultnote(rout)
numpy.f2py.capi_maps.hasvariables(rout)
numpy.f2py.capi_maps.isallocatable(var)
numpy.f2py.capi_maps.isarray(var)
numpy.f2py.capi_maps.isarrayofstrings(var)
numpy.f2py.capi_maps.ischaracter(var)
numpy.f2py.capi_maps.iscomplex(var)
numpy.f2py.capi_maps.iscomplexarray(var)
numpy.f2py.capi_maps.iscomplexfunction(rout)
numpy.f2py.capi_maps.iscomplexfunction_warn(rout)
numpy.f2py.capi_maps.isdouble(var)
numpy.f2py.capi_maps.isdummyroutine(rout)
numpy.f2py.capi_maps.isexternal(var)
numpy.f2py.capi_maps.isfalse(var)
numpy.f2py.capi_maps.isfunction(rout)
numpy.f2py.capi_maps.isfunction_wrap(rout)
numpy.f2py.capi_maps.isint1array(var)
numpy.f2py.capi_maps.isinteger(var)
numpy.f2py.capi_maps.isintent_aligned16(var)
numpy.f2py.capi_maps.isintent_aligned4(var)
numpy.f2py.capi_maps.isintent_aligned8(var)
numpy.f2py.capi_maps.isintent_aux(var)
numpy.f2py.capi_maps.isintent_c(var)
numpy.f2py.capi_maps.isintent_cache(var)
numpy.f2py.capi_maps.isintent_callback(var)
numpy.f2py.capi_maps.isintent_copy(var)
numpy.f2py.capi_maps.isintent_hide(var)
numpy.f2py.capi_maps.isintent_in(var)
numpy.f2py.capi_maps.isintent_inout(var)
numpy.f2py.capi_maps.isintent_inplace(var)
numpy.f2py.capi_maps.isintent_nothide(var)
numpy.f2py.capi_maps.isintent_out(var)
numpy.f2py.capi_maps.isintent_overwrite(var)
numpy.f2py.capi_maps.islogical(var)
numpy.f2py.capi_maps.islogicalfunction(rout)
numpy.f2py.capi_maps.islong_complex(var)
numpy.f2py.capi_maps.islong_double(var)
numpy.f2py.capi_maps.islong_doublefunction(rout)
numpy.f2py.capi_maps.islong_long(var)
numpy.f2py.capi_maps.islong_longfunction(rout)
numpy.f2py.capi_maps.ismodule(rout)
numpy.f2py.capi_maps.ismoduleroutine(rout)
numpy.f2py.capi_maps.ismutable(var)
numpy.f2py.capi_maps.isoptional(var)
numpy.f2py.capi_maps.isprivate(var)
numpy.f2py.capi_maps.isreal(var)
numpy.f2py.capi_maps.isrequired(var)
numpy.f2py.capi_maps.isroutine(rout)
numpy.f2py.capi_maps.isscalar(var)
numpy.f2py.capi_maps.issigned_array(var)
numpy.f2py.capi_maps.issigned_chararray(var)
numpy.f2py.capi_maps.issigned_long_longarray(var)
numpy.f2py.capi_maps.issigned_shortarray(var)
numpy.f2py.capi_maps.isstring(var)
numpy.f2py.capi_maps.isstringarray(var)
numpy.f2py.capi_maps.isstringfunction(rout)
numpy.f2py.capi_maps.issubroutine(rout)
numpy.f2py.capi_maps.issubroutine_wrap(rout)
numpy.f2py.capi_maps.isthreadsafe(rout)
numpy.f2py.capi_maps.istrue(var)
numpy.f2py.capi_maps.isunsigned(var)
numpy.f2py.capi_maps.isunsigned_char(var)
numpy.f2py.capi_maps.isunsigned_chararray(var)
numpy.f2py.capi_maps.isunsigned_long_long(var)
numpy.f2py.capi_maps.isunsigned_long_longarray(var)
numpy.f2py.capi_maps.isunsigned_short(var)
numpy.f2py.capi_maps.isunsigned_shortarray(var)
numpy.f2py.capi_maps.isunsignedarray(var)
numpy.f2py.capi_maps.l_not(f)
numpy.f2py.capi_maps.markoutercomma(line, comma)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.outmess(t)
numpy.f2py.capi_maps.reduce
(
function, sequence, initial
numpy.f2py.capi_maps.replace(str, d, defaultsep)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.pprint(object, stream, indent, width, depth)
numpy.f2py.capi_maps.sign2map(a, var)
numpy.f2py.capi_maps.stripcomma(s)

 
 
numpy.f2py.cb_rules.applyrules(rules, d, var)
numpy.f2py.cb_rules.buildcallback(rout, um)
numpy.f2py.cb_rules.buildcallbacks(m)
numpy.f2py.cb_rules.containscommon(rout)
numpy.f2py.cb_rules.containsmodule(block)
numpy.f2py.cb_rules.debugcapi(var)
numpy.f2py.cb_rules.dictappend(rd, ar)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.flatlist(l)
numpy.f2py.cb_rules.gentitle(name)
numpy.f2py.cb_rules.get_kind(var)
numpy.f2py.cb_rules.getargs(rout)
numpy.f2py.cb_rules.getargs2(rout)
numpy.f2py.cb_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.cb_rules.getcallstatement(rout)
numpy.f2py.cb_rules.getfortranname(rout)
numpy.f2py.cb_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.cb_rules.getpymethoddef(rout)
numpy.f2py.cb_rules.getrestdoc(rout)
numpy.f2py.cb_rules.getusercode(rout)
numpy.f2py.cb_rules.getusercode1(rout)
numpy.f2py.cb_rules.hasassumedshape(rout)
numpy.f2py.cb_rules.hasbody(rout)
numpy.f2py.cb_rules.hascallstatement(rout)
numpy.f2py.cb_rules.hascommon(rout)
numpy.f2py.cb_rules.hasexternals(rout)
numpy.f2py.cb_rules.hasinitvalue(var)
numpy.f2py.cb_rules.hasinitvalueasstring(var)
numpy.f2py.cb_rules.hasnote(var)
numpy.f2py.cb_rules.hasresultnote(rout)
numpy.f2py.cb_rules.hasvariables(rout)
numpy.f2py.cb_rules.isallocatable(var)
numpy.f2py.cb_rules.isarray(var)
numpy.f2py.cb_rules.isarrayofstrings(var)
numpy.f2py.cb_rules.ischaracter(var)
numpy.f2py.cb_rules.iscomplex(var)
numpy.f2py.cb_rules.iscomplexarray(var)
numpy.f2py.cb_rules.iscomplexfunction(rout)
numpy.f2py.cb_rules.iscomplexfunction_warn(rout)
numpy.f2py.cb_rules.isdouble(var)
numpy.f2py.cb_rules.isdummyroutine(rout)
numpy.f2py.cb_rules.isexternal(var)
numpy.f2py.cb_rules.isfalse(var)
numpy.f2py.cb_rules.isfunction(rout)
numpy.f2py.cb_rules.isfunction_wrap(rout)
numpy.f2py.cb_rules.isint1array(var)
numpy.f2py.cb_rules.isinteger(var)
numpy.f2py.cb_rules.isintent_aligned16(var)
numpy.f2py.cb_rules.isintent_aligned4(var)
numpy.f2py.cb_rules.isintent_aligned8(var)
numpy.f2py.cb_rules.isintent_aux(var)
numpy.f2py.cb_rules.isintent_c(var)
numpy.f2py.cb_rules.isintent_cache(var)
numpy.f2py.cb_rules.isintent_callback(var)
numpy.f2py.cb_rules.isintent_copy(var)
numpy.f2py.cb_rules.isintent_hide(var)
numpy.f2py.cb_rules.isintent_in(var)
numpy.f2py.cb_rules.isintent_inout(var)
numpy.f2py.cb_rules.isintent_inplace(var)
numpy.f2py.cb_rules.isintent_nothide(var)
numpy.f2py.cb_rules.isintent_out(var)
numpy.f2py.cb_rules.isintent_overwrite(var)
numpy.f2py.cb_rules.islogical(var)
numpy.f2py.cb_rules.islogicalfunction(rout)
numpy.f2py.cb_rules.islong_complex(var)
numpy.f2py.cb_rules.islong_double(var)
numpy.f2py.cb_rules.islong_doublefunction(rout)
numpy.f2py.cb_rules.islong_long(var)
numpy.f2py.cb_rules.islong_longfunction(rout)
numpy.f2py.cb_rules.ismodule(rout)
numpy.f2py.cb_rules.ismoduleroutine(rout)
numpy.f2py.cb_rules.ismutable(var)
numpy.f2py.cb_rules.isoptional(var)
numpy.f2py.cb_rules.isprivate(var)
numpy.f2py.cb_rules.isreal(var)
numpy.f2py.cb_rules.isrequired(var)
numpy.f2py.cb_rules.isroutine(rout)
numpy.f2py.cb_rules.isscalar(var)
numpy.f2py.cb_rules.issigned_array(var)
numpy.f2py.cb_rules.issigned_chararray(var)
numpy.f2py.cb_rules.issigned_long_longarray(var)
numpy.f2py.cb_rules.issigned_shortarray(var)
numpy.f2py.cb_rules.isstring(var)
numpy.f2py.cb_rules.isstringarray(var)
numpy.f2py.cb_rules.isstringfunction(rout)
numpy.f2py.cb_rules.issubroutine(rout)
numpy.f2py.cb_rules.issubroutine_wrap(rout)
numpy.f2py.cb_rules.isthreadsafe(rout)
numpy.f2py.cb_rules.istrue(var)
numpy.f2py.cb_rules.isunsigned(var)
numpy.f2py.cb_rules.isunsigned_char(var)
numpy.f2py.cb_rules.isunsigned_chararray(var)
numpy.f2py.cb_rules.isunsigned_long_long(var)
numpy.f2py.cb_rules.isunsigned_long_longarray(var)
numpy.f2py.cb_rules.isunsigned_short(var)
numpy.f2py.cb_rules.isunsigned_shortarray(var)
numpy.f2py.cb_rules.isunsignedarray(var)
numpy.f2py.cb_rules.l_not(f)
numpy.f2py.cb_rules.write(self, string)
numpy.f2py.cb_rules.reduce
(
function, sequence, initial
numpy.f2py.cb_rules.replace(str, d, defaultsep)
numpy.f2py.cb_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.cb_rules.stripcomma(s)

 
 
numpy.f2py.cfuncs.append_needs(need, flag)
numpy.f2py.cfuncs.write(self, string)

 
 
numpy.f2py.common_rules.applyrules(rules, d, var)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.containscommon(rout)
numpy.f2py.common_rules.containsmodule(block)
numpy.f2py.common_rules.debugcapi(var)
numpy.f2py.common_rules.dictappend(rd, ar)
numpy.f2py.common_rules.write(self, string)
numpy.f2py.common_rules.findcommonblocks(block, top)
numpy.f2py.common_rules.flatlist(l)
numpy.f2py.common_rules.gentitle(name)
numpy.f2py.common_rules.get_kind(var)
numpy.f2py.common_rules.getargs(rout)
numpy.f2py.common_rules.getargs2(rout)
numpy.f2py.common_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.common_rules.getcallstatement(rout)
numpy.f2py.common_rules.getfortranname(rout)
numpy.f2py.common_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.common_rules.getpymethoddef(rout)
numpy.f2py.common_rules.getrestdoc(rout)
numpy.f2py.common_rules.getusercode(rout)
numpy.f2py.common_rules.getusercode1(rout)
numpy.f2py.common_rules.hasassumedshape(rout)
numpy.f2py.common_rules.hasbody(rout)
numpy.f2py.common_rules.hascallstatement(rout)
numpy.f2py.common_rules.hascommon(rout)
numpy.f2py.common_rules.hasexternals(rout)
numpy.f2py.common_rules.hasinitvalue(var)
numpy.f2py.common_rules.hasinitvalueasstring(var)
numpy.f2py.common_rules.hasnote(var)
numpy.f2py.common_rules.hasresultnote(rout)
numpy.f2py.common_rules.hasvariables(rout)
numpy.f2py.common_rules.isallocatable(var)
numpy.f2py.common_rules.isarray(var)
numpy.f2py.common_rules.isarrayofstrings(var)
numpy.f2py.common_rules.ischaracter(var)
numpy.f2py.common_rules.iscomplex(var)
numpy.f2py.common_rules.iscomplexarray(var)
numpy.f2py.common_rules.iscomplexfunction(rout)
numpy.f2py.common_rules.iscomplexfunction_warn(rout)
numpy.f2py.common_rules.isdouble(var)
numpy.f2py.common_rules.isdummyroutine(rout)
numpy.f2py.common_rules.isexternal(var)
numpy.f2py.common_rules.isfalse(var)
numpy.f2py.common_rules.isfunction(rout)
numpy.f2py.common_rules.isfunction_wrap(rout)
numpy.f2py.common_rules.isint1array(var)
numpy.f2py.common_rules.isinteger(var)
numpy.f2py.common_rules.isintent_aligned16(var)
numpy.f2py.common_rules.isintent_aligned4(var)
numpy.f2py.common_rules.isintent_aligned8(var)
numpy.f2py.common_rules.isintent_aux(var)
numpy.f2py.common_rules.isintent_c(var)
numpy.f2py.common_rules.isintent_cache(var)
numpy.f2py.common_rules.isintent_callback(var)
numpy.f2py.common_rules.isintent_copy(var)
numpy.f2py.common_rules.isintent_hide(var)
numpy.f2py.common_rules.isintent_in(var)
numpy.f2py.common_rules.isintent_inout(var)
numpy.f2py.common_rules.isintent_inplace(var)
numpy.f2py.common_rules.isintent_nothide(var)
numpy.f2py.common_rules.isintent_out(var)
numpy.f2py.common_rules.isintent_overwrite(var)
numpy.f2py.common_rules.islogical(var)
numpy.f2py.common_rules.islogicalfunction(rout)
numpy.f2py.common_rules.islong_complex(var)
numpy.f2py.common_rules.islong_double(var)
numpy.f2py.common_rules.islong_doublefunction(rout)
numpy.f2py.common_rules.islong_long(var)
numpy.f2py.common_rules.islong_longfunction(rout)
numpy.f2py.common_rules.ismodule(rout)
numpy.f2py.common_rules.ismoduleroutine(rout)
numpy.f2py.common_rules.ismutable(var)
numpy.f2py.common_rules.isoptional(var)
numpy.f2py.common_rules.isprivate(var)
numpy.f2py.common_rules.isreal(var)
numpy.f2py.common_rules.isrequired(var)
numpy.f2py.common_rules.isroutine(rout)
numpy.f2py.common_rules.isscalar(var)
numpy.f2py.common_rules.issigned_array(var)
numpy.f2py.common_rules.issigned_chararray(var)
numpy.f2py.common_rules.issigned_long_longarray(var)
numpy.f2py.common_rules.issigned_shortarray(var)
numpy.f2py.common_rules.isstring(var)
numpy.f2py.common_rules.isstringarray(var)
numpy.f2py.common_rules.isstringfunction(rout)
numpy.f2py.common_rules.issubroutine(rout)
numpy.f2py.common_rules.issubroutine_wrap(rout)
numpy.f2py.common_rules.isthreadsafe(rout)
numpy.f2py.common_rules.istrue(var)
numpy.f2py.common_rules.isunsigned(var)
numpy.f2py.common_rules.isunsigned_char(var)
numpy.f2py.common_rules.isunsigned_chararray(var)
numpy.f2py.common_rules.isunsigned_long_long(var)
numpy.f2py.common_rules.isunsigned_long_longarray(var)
numpy.f2py.common_rules.isunsigned_short(var)
numpy.f2py.common_rules.isunsigned_shortarray(var)
numpy.f2py.common_rules.isunsignedarray(var)
numpy.f2py.common_rules.l_not(f)
numpy.f2py.common_rules.outmess(t)
numpy.f2py.common_rules.reduce
(
function, sequence, initial
numpy.f2py.common_rules.replace(str, d, defaultsep)
numpy.f2py.common_rules.rmbadname(names)
numpy.f2py.common_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.common_rules.stripcomma(s)

 
 
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length, params)
numpy.f2py.crackfortran._eval_scalar(value, params)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._get_depend_dict(name, vars, deps)
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran.search
(
string, pos, endpos
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p, r, radix)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block, args, tab)
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m, case, line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl, decl2, force)
numpy.f2py.crackfortran.appendmultiline(group, context_name, ml)
numpy.f2py.crackfortran.applyrules(rules, d, var)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common, tab)
numpy.f2py.crackfortran.containscommon(rout)
numpy.f2py.crackfortran.containsmodule(block)
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block, tab, as_interface)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line, reset)
numpy.f2py.crackfortran.cracktypespec(typespec, selector)
numpy.f2py.crackfortran.cracktypespec0(typespec, ll)
numpy.f2py.crackfortran.debugcapi(var)
numpy.f2py.crackfortran.determineexprtype(expr, vars, rules)
numpy.f2py.crackfortran.dictappend(rd, ar)
numpy.f2py.crackfortran.write(self, string)
numpy.f2py.crackfortran.expr2name(a, block, args)
numpy.f2py.crackfortran.flatlist(l)
numpy.f2py.crackfortran.gentitle(name)
numpy.f2py.crackfortran.get_kind(var)
numpy.f2py.crackfortran.get_parameters(vars, global_params)
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block, param_map)
numpy.f2py.crackfortran.getargs(rout)
numpy.f2py.crackfortran.getargs2(rout)
numpy.f2py.crackfortran.getarrlen(dl, args, star)
numpy.f2py.crackfortran.getblockname(block, unknown)
numpy.f2py.crackfortran.getcallprotoargument(rout, cb_map)
numpy.f2py.crackfortran.getcallstatement(rout)
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getfortranname(rout)
numpy.f2py.crackfortran.getlincoef(e, xset)
numpy.f2py.crackfortran.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.crackfortran.getpymethoddef(rout)
numpy.f2py.crackfortran.getrestdoc(rout)
numpy.f2py.crackfortran.getusercode(rout)
numpy.f2py.crackfortran.getusercode1(rout)
numpy.f2py.crackfortran.hasassumedshape(rout)
numpy.f2py.crackfortran.hasbody(rout)
numpy.f2py.crackfortran.hascallstatement(rout)
numpy.f2py.crackfortran.hascommon(rout)
numpy.f2py.crackfortran.hasexternals(rout)
numpy.f2py.crackfortran.hasinitvalue(var)
numpy.f2py.crackfortran.hasinitvalueasstring(var)
numpy.f2py.crackfortran.hasnote(var)
numpy.f2py.crackfortran.hasresultnote(rout)
numpy.f2py.crackfortran.hasvariables(rout)
numpy.f2py.crackfortran.match
(
string, pos, endpos
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.isallocatable(var)
numpy.f2py.crackfortran.isarray(var)
numpy.f2py.crackfortran.isarrayofstrings(var)
numpy.f2py.crackfortran.ischaracter(var)
numpy.f2py.crackfortran.iscomplex(var)
numpy.f2py.crackfortran.iscomplexarray(var)
numpy.f2py.crackfortran.iscomplexfunction(rout)
numpy.f2py.crackfortran.iscomplexfunction_warn(rout)
numpy.f2py.crackfortran.isdouble(var)
numpy.f2py.crackfortran.isdummyroutine(rout)
numpy.f2py.crackfortran.isexternal(var)
numpy.f2py.crackfortran.isfalse(var)
numpy.f2py.crackfortran.isfunction(rout)
numpy.f2py.crackfortran.isfunction_wrap(rout)
numpy.f2py.crackfortran.isint1array(var)
numpy.f2py.crackfortran.isinteger(var)
numpy.f2py.crackfortran.isintent_aligned16(var)
numpy.f2py.crackfortran.isintent_aligned4(var)
numpy.f2py.crackfortran.isintent_aligned8(var)
numpy.f2py.crackfortran.isintent_aux(var)
numpy.f2py.crackfortran.isintent_c(var)
numpy.f2py.crackfortran.isintent_cache(var)
numpy.f2py.crackfortran.isintent_callback(var)
numpy.f2py.crackfortran.isintent_copy(var)
numpy.f2py.crackfortran.isintent_hide(var)
numpy.f2py.crackfortran.isintent_in(var)
numpy.f2py.crackfortran.isintent_inout(var)
numpy.f2py.crackfortran.isintent_inplace(var)
numpy.f2py.crackfortran.isintent_nothide(var)
numpy.f2py.crackfortran.isintent_out(var)
numpy.f2py.crackfortran.isintent_overwrite(var)
numpy.f2py.crackfortran.islogical(var)
numpy.f2py.crackfortran.islogicalfunction(rout)
numpy.f2py.crackfortran.islong_complex(var)
numpy.f2py.crackfortran.islong_double(var)
numpy.f2py.crackfortran.islong_doublefunction(rout)
numpy.f2py.crackfortran.islong_long(var)
numpy.f2py.crackfortran.islong_longfunction(rout)
numpy.f2py.crackfortran.ismodule(rout)
numpy.f2py.crackfortran.ismoduleroutine(rout)
numpy.f2py.crackfortran.ismutable(var)
numpy.f2py.crackfortran.isoptional(var)
numpy.f2py.crackfortran.isprivate(var)
numpy.f2py.crackfortran.isreal(var)
numpy.f2py.crackfortran.isrequired(var)
numpy.f2py.crackfortran.isroutine(rout)
numpy.f2py.crackfortran.isscalar(var)
numpy.f2py.crackfortran.issigned_array(var)
numpy.f2py.crackfortran.issigned_chararray(var)
numpy.f2py.crackfortran.issigned_long_longarray(var)
numpy.f2py.crackfortran.issigned_shortarray(var)
numpy.f2py.crackfortran.isstring(var)
numpy.f2py.crackfortran.isstringarray(var)
numpy.f2py.crackfortran.isstringfunction(rout)
numpy.f2py.crackfortran.issubroutine(rout)
numpy.f2py.crackfortran.issubroutine_wrap(rout)
numpy.f2py.crackfortran.isthreadsafe(rout)
numpy.f2py.crackfortran.istrue(var)
numpy.f2py.crackfortran.isunsigned(var)
numpy.f2py.crackfortran.isunsigned_char(var)
numpy.f2py.crackfortran.isunsigned_chararray(var)
numpy.f2py.crackfortran.isunsigned_long_long(var)
numpy.f2py.crackfortran.isunsigned_long_longarray(var)
numpy.f2py.crackfortran.isunsigned_short(var)
numpy.f2py.crackfortran.isunsigned_shortarray(var)
numpy.f2py.crackfortran.isunsignedarray(var)
numpy.f2py.crackfortran.l_not(f)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line, comma)
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e, g, l)
numpy.f2py.crackfortran.outmess(line, flag)
numpy.f2py.crackfortran.postcrack(block, args, tab)
numpy.f2py.crackfortran.postcrack2(block, tab, param_map)
numpy.f2py.crackfortran.readfortrancode(ffile, dowithline, istop)
numpy.f2py.crackfortran.reduce
(
function, sequence, initial
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.replace(str, d, defaultsep)
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl, attr, force)
numpy.f2py.crackfortran.setcharselector(decl, sel, force)
numpy.f2py.crackfortran.setkindselector(decl, sel, force)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.show(o, f)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.stripcomma(s)

 
 
numpy.f2py.diagnose.run_command(cmd)

 
 
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files, options)
numpy.f2py.f2py2e.dict_append(d_out, d_in)
numpy.f2py.f2py2e.write(self, string)
numpy.f2py.f2py2e.filter_files(prefix, suffix, files, remove_prefix)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.outmess(t)
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)
numpy.f2py.f2py2e.pprint(object, stream, indent, width, depth)

 
 
numpy.f2py.f2py_testing.jiffies(_load_time)
numpy.f2py.f2py_testing.memusage(processName, instance)
numpy.f2py.f2py_testing.run(runtest, test_functions, repeat)

 
 
numpy.f2py.f90mod_rules.applyrules(rules, d, var)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.containscommon(rout)
numpy.f2py.f90mod_rules.containsmodule(block)
numpy.f2py.f90mod_rules.debugcapi(var)
numpy.f2py.f90mod_rules.dictappend(rd, ar)
numpy.f2py.f90mod_rules.write(self, string)
numpy.f2py.f90mod_rules.findf90modules(m)
numpy.f2py.f90mod_rules.flatlist(l)
numpy.f2py.f90mod_rules.gentitle(name)
numpy.f2py.f90mod_rules.get_kind(var)
numpy.f2py.f90mod_rules.getargs(rout)
numpy.f2py.f90mod_rules.getargs2(rout)
numpy.f2py.f90mod_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.f90mod_rules.getcallstatement(rout)
numpy.f2py.f90mod_rules.getfortranname(rout)
numpy.f2py.f90mod_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.f90mod_rules.getpymethoddef(rout)
numpy.f2py.f90mod_rules.getrestdoc(rout)
numpy.f2py.f90mod_rules.getusercode(rout)
numpy.f2py.f90mod_rules.getusercode1(rout)
numpy.f2py.f90mod_rules.hasassumedshape(rout)
numpy.f2py.f90mod_rules.hasbody(rout)
numpy.f2py.f90mod_rules.hascallstatement(rout)
numpy.f2py.f90mod_rules.hascommon(rout)
numpy.f2py.f90mod_rules.hasexternals(rout)
numpy.f2py.f90mod_rules.hasinitvalue(var)
numpy.f2py.f90mod_rules.hasinitvalueasstring(var)
numpy.f2py.f90mod_rules.hasnote(var)
numpy.f2py.f90mod_rules.hasresultnote(rout)
numpy.f2py.f90mod_rules.hasvariables(rout)
numpy.f2py.f90mod_rules.isallocatable(var)
numpy.f2py.f90mod_rules.isarray(var)
numpy.f2py.f90mod_rules.isarrayofstrings(var)
numpy.f2py.f90mod_rules.ischaracter(var)
numpy.f2py.f90mod_rules.iscomplex(var)
numpy.f2py.f90mod_rules.iscomplexarray(var)
numpy.f2py.f90mod_rules.iscomplexfunction(rout)
numpy.f2py.f90mod_rules.iscomplexfunction_warn(rout)
numpy.f2py.f90mod_rules.isdouble(var)
numpy.f2py.f90mod_rules.isdummyroutine(rout)
numpy.f2py.f90mod_rules.isexternal(var)
numpy.f2py.f90mod_rules.isfalse(var)
numpy.f2py.f90mod_rules.isfunction(rout)
numpy.f2py.f90mod_rules.isfunction_wrap(rout)
numpy.f2py.f90mod_rules.isint1array(var)
numpy.f2py.f90mod_rules.isinteger(var)
numpy.f2py.f90mod_rules.isintent_aligned16(var)
numpy.f2py.f90mod_rules.isintent_aligned4(var)
numpy.f2py.f90mod_rules.isintent_aligned8(var)
numpy.f2py.f90mod_rules.isintent_aux(var)
numpy.f2py.f90mod_rules.isintent_c(var)
numpy.f2py.f90mod_rules.isintent_cache(var)
numpy.f2py.f90mod_rules.isintent_callback(var)
numpy.f2py.f90mod_rules.isintent_copy(var)
numpy.f2py.f90mod_rules.isintent_hide(var)
numpy.f2py.f90mod_rules.isintent_in(var)
numpy.f2py.f90mod_rules.isintent_inout(var)
numpy.f2py.f90mod_rules.isintent_inplace(var)
numpy.f2py.f90mod_rules.isintent_nothide(var)
numpy.f2py.f90mod_rules.isintent_out(var)
numpy.f2py.f90mod_rules.isintent_overwrite(var)
numpy.f2py.f90mod_rules.islogical(var)
numpy.f2py.f90mod_rules.islogicalfunction(rout)
numpy.f2py.f90mod_rules.islong_complex(var)
numpy.f2py.f90mod_rules.islong_double(var)
numpy.f2py.f90mod_rules.islong_doublefunction(rout)
numpy.f2py.f90mod_rules.islong_long(var)
numpy.f2py.f90mod_rules.islong_longfunction(rout)
numpy.f2py.f90mod_rules.ismodule(rout)
numpy.f2py.f90mod_rules.ismoduleroutine(rout)
numpy.f2py.f90mod_rules.ismutable(var)
numpy.f2py.f90mod_rules.isoptional(var)
numpy.f2py.f90mod_rules.isprivate(var)
numpy.f2py.f90mod_rules.isreal(var)
numpy.f2py.f90mod_rules.isrequired(var)
numpy.f2py.f90mod_rules.isroutine(rout)
numpy.f2py.f90mod_rules.isscalar(var)
numpy.f2py.f90mod_rules.issigned_array(var)
numpy.f2py.f90mod_rules.issigned_chararray(var)
numpy.f2py.f90mod_rules.issigned_long_longarray(var)
numpy.f2py.f90mod_rules.issigned_shortarray(var)
numpy.f2py.f90mod_rules.isstring(var)
numpy.f2py.f90mod_rules.isstringarray(var)
numpy.f2py.f90mod_rules.isstringfunction(rout)
numpy.f2py.f90mod_rules.issubroutine(rout)
numpy.f2py.f90mod_rules.issubroutine_wrap(rout)
numpy.f2py.f90mod_rules.isthreadsafe(rout)
numpy.f2py.f90mod_rules.istrue(var)
numpy.f2py.f90mod_rules.isunsigned(var)
numpy.f2py.f90mod_rules.isunsigned_char(var)
numpy.f2py.f90mod_rules.isunsigned_chararray(var)
numpy.f2py.f90mod_rules.isunsigned_long_long(var)
numpy.f2py.f90mod_rules.isunsigned_long_longarray(var)
numpy.f2py.f90mod_rules.isunsigned_short(var)
numpy.f2py.f90mod_rules.isunsigned_shortarray(var)
numpy.f2py.f90mod_rules.isunsignedarray(var)
numpy.f2py.f90mod_rules.l_not(f)
numpy.f2py.f90mod_rules.outmess(t)
numpy.f2py.f90mod_rules.reduce
(
function, sequence, initial
numpy.f2py.f90mod_rules.replace(str, d, defaultsep)
numpy.f2py.f90mod_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.f90mod_rules.stripcomma(s)

 
 
numpy.f2py.func2subr.applyrules(rules, d, var)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.containscommon(rout)
numpy.f2py.func2subr.containsmodule(block)
numpy.f2py.func2subr.createfuncwrapper(rout, signature)
numpy.f2py.func2subr.createsubrwrapper(rout, signature)
numpy.f2py.func2subr.debugcapi(var)
numpy.f2py.func2subr.dictappend(rd, ar)
numpy.f2py.func2subr.write(self, string)
numpy.f2py.func2subr.flatlist(l)
numpy.f2py.func2subr.gentitle(name)
numpy.f2py.func2subr.get_kind(var)
numpy.f2py.func2subr.getargs(rout)
numpy.f2py.func2subr.getargs2(rout)
numpy.f2py.func2subr.getcallprotoargument(rout, cb_map)
numpy.f2py.func2subr.getcallstatement(rout)
numpy.f2py.func2subr.getfortranname(rout)
numpy.f2py.func2subr.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.func2subr.getpymethoddef(rout)
numpy.f2py.func2subr.getrestdoc(rout)
numpy.f2py.func2subr.getusercode(rout)
numpy.f2py.func2subr.getusercode1(rout)
numpy.f2py.func2subr.hasassumedshape(rout)
numpy.f2py.func2subr.hasbody(rout)
numpy.f2py.func2subr.hascallstatement(rout)
numpy.f2py.func2subr.hascommon(rout)
numpy.f2py.func2subr.hasexternals(rout)
numpy.f2py.func2subr.hasinitvalue(var)
numpy.f2py.func2subr.hasinitvalueasstring(var)
numpy.f2py.func2subr.hasnote(var)
numpy.f2py.func2subr.hasresultnote(rout)
numpy.f2py.func2subr.hasvariables(rout)
numpy.f2py.func2subr.isallocatable(var)
numpy.f2py.func2subr.isarray(var)
numpy.f2py.func2subr.isarrayofstrings(var)
numpy.f2py.func2subr.ischaracter(var)
numpy.f2py.func2subr.iscomplex(var)
numpy.f2py.func2subr.iscomplexarray(var)
numpy.f2py.func2subr.iscomplexfunction(rout)
numpy.f2py.func2subr.iscomplexfunction_warn(rout)
numpy.f2py.func2subr.isdouble(var)
numpy.f2py.func2subr.isdummyroutine(rout)
numpy.f2py.func2subr.isexternal(var)
numpy.f2py.func2subr.isfalse(var)
numpy.f2py.func2subr.isfunction(rout)
numpy.f2py.func2subr.isfunction_wrap(rout)
numpy.f2py.func2subr.isint1array(var)
numpy.f2py.func2subr.isinteger(var)
numpy.f2py.func2subr.isintent_aligned16(var)
numpy.f2py.func2subr.isintent_aligned4(var)
numpy.f2py.func2subr.isintent_aligned8(var)
numpy.f2py.func2subr.isintent_aux(var)
numpy.f2py.func2subr.isintent_c(var)
numpy.f2py.func2subr.isintent_cache(var)
numpy.f2py.func2subr.isintent_callback(var)
numpy.f2py.func2subr.isintent_copy(var)
numpy.f2py.func2subr.isintent_hide(var)
numpy.f2py.func2subr.isintent_in(var)
numpy.f2py.func2subr.isintent_inout(var)
numpy.f2py.func2subr.isintent_inplace(var)
numpy.f2py.func2subr.isintent_nothide(var)
numpy.f2py.func2subr.isintent_out(var)
numpy.f2py.func2subr.isintent_overwrite(var)
numpy.f2py.func2subr.islogical(var)
numpy.f2py.func2subr.islogicalfunction(rout)
numpy.f2py.func2subr.islong_complex(var)
numpy.f2py.func2subr.islong_double(var)
numpy.f2py.func2subr.islong_doublefunction(rout)
numpy.f2py.func2subr.islong_long(var)
numpy.f2py.func2subr.islong_longfunction(rout)
numpy.f2py.func2subr.ismodule(rout)
numpy.f2py.func2subr.ismoduleroutine(rout)
numpy.f2py.func2subr.ismutable(var)
numpy.f2py.func2subr.isoptional(var)
numpy.f2py.func2subr.isprivate(var)
numpy.f2py.func2subr.isreal(var)
numpy.f2py.func2subr.isrequired(var)
numpy.f2py.func2subr.isroutine(rout)
numpy.f2py.func2subr.isscalar(var)
numpy.f2py.func2subr.issigned_array(var)
numpy.f2py.func2subr.issigned_chararray(var)
numpy.f2py.func2subr.issigned_long_longarray(var)
numpy.f2py.func2subr.issigned_shortarray(var)
numpy.f2py.func2subr.isstring(var)
numpy.f2py.func2subr.isstringarray(var)
numpy.f2py.func2subr.isstringfunction(rout)
numpy.f2py.func2subr.issubroutine(rout)
numpy.f2py.func2subr.issubroutine_wrap(rout)
numpy.f2py.func2subr.isthreadsafe(rout)
numpy.f2py.func2subr.istrue(var)
numpy.f2py.func2subr.isunsigned(var)
numpy.f2py.func2subr.isunsigned_char(var)
numpy.f2py.func2subr.isunsigned_chararray(var)
numpy.f2py.func2subr.isunsigned_long_long(var)
numpy.f2py.func2subr.isunsigned_long_longarray(var)
numpy.f2py.func2subr.isunsigned_short(var)
numpy.f2py.func2subr.isunsigned_shortarray(var)
numpy.f2py.func2subr.isunsignedarray(var)
numpy.f2py.func2subr.l_not(f)
numpy.f2py.func2subr.outmess(t)
numpy.f2py.func2subr.reduce
(
function, sequence, initial
numpy.f2py.func2subr.replace(str, d, defaultsep)
numpy.f2py.func2subr.pprint(object, stream, indent, width, depth)
numpy.f2py.func2subr.stripcomma(s)

 
 

 
 
numpy.f2py.rules.applyrules(rules, d, var)
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m, um)
numpy.f2py.rules.cb_routsign2map(rout, um)
numpy.f2py.rules.cb_sign2map(a, var, index)
numpy.f2py.rules.common_sign2map(a, var)
numpy.f2py.rules.containscommon(rout)
numpy.f2py.rules.containsmodule(block)
numpy.f2py.rules.debugcapi(var)
numpy.f2py.rules.dictappend(rd, ar)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.flatlist(l)
numpy.f2py.rules.gentitle(name)
numpy.f2py.rules.get_kind(var)
numpy.f2py.rules.getargs(rout)
numpy.f2py.rules.getargs2(rout)
numpy.f2py.rules.getarrdims(a, var, verbose)
numpy.f2py.rules.getarrdocsign(a, var)
numpy.f2py.rules.getcallprotoargument(rout, cb_map)
numpy.f2py.rules.getcallstatement(rout)
numpy.f2py.rules.getctype(var)
numpy.f2py.rules.getfortranname(rout)
numpy.f2py.rules.getinit(a, var)
numpy.f2py.rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.rules.getpydocsign(a, var)
numpy.f2py.rules.getpymethoddef(rout)
numpy.f2py.rules.getrestdoc(rout)
numpy.f2py.rules.getstrlength(var)
numpy.f2py.rules.getusercode(rout)
numpy.f2py.rules.getusercode1(rout)
numpy.f2py.rules.hasassumedshape(rout)
numpy.f2py.rules.hasbody(rout)
numpy.f2py.rules.hascallstatement(rout)
numpy.f2py.rules.hascommon(rout)
numpy.f2py.rules.hasexternals(rout)
numpy.f2py.rules.hasinitvalue(var)
numpy.f2py.rules.hasinitvalueasstring(var)
numpy.f2py.rules.hasnote(var)
numpy.f2py.rules.hasresultnote(rout)
numpy.f2py.rules.hasvariables(rout)
numpy.f2py.rules.isallocatable(var)
numpy.f2py.rules.isarray(var)
numpy.f2py.rules.isarrayofstrings(var)
numpy.f2py.rules.ischaracter(var)
numpy.f2py.rules.iscomplex(var)
numpy.f2py.rules.iscomplexarray(var)
numpy.f2py.rules.iscomplexfunction(rout)
numpy.f2py.rules.iscomplexfunction_warn(rout)
numpy.f2py.rules.isdouble(var)
numpy.f2py.rules.isdummyroutine(rout)
numpy.f2py.rules.isexternal(var)
numpy.f2py.rules.isfalse(var)
numpy.f2py.rules.isfunction(rout)
numpy.f2py.rules.isfunction_wrap(rout)
numpy.f2py.rules.isint1array(var)
numpy.f2py.rules.isinteger(var)
numpy.f2py.rules.isintent_aligned16(var)
numpy.f2py.rules.isintent_aligned4(var)
numpy.f2py.rules.isintent_aligned8(var)
numpy.f2py.rules.isintent_aux(var)
numpy.f2py.rules.isintent_c(var)
numpy.f2py.rules.isintent_cache(var)
numpy.f2py.rules.isintent_callback(var)
numpy.f2py.rules.isintent_copy(var)
numpy.f2py.rules.isintent_hide(var)
numpy.f2py.rules.isintent_in(var)
numpy.f2py.rules.isintent_inout(var)
numpy.f2py.rules.isintent_inplace(var)
numpy.f2py.rules.isintent_nothide(var)
numpy.f2py.rules.isintent_out(var)
numpy.f2py.rules.isintent_overwrite(var)
numpy.f2py.rules.islogical(var)
numpy.f2py.rules.islogicalfunction(rout)
numpy.f2py.rules.islong_complex(var)
numpy.f2py.rules.islong_double(var)
numpy.f2py.rules.islong_doublefunction(rout)
numpy.f2py.rules.islong_long(var)
numpy.f2py.rules.islong_longfunction(rout)
numpy.f2py.rules.ismodule(rout)
numpy.f2py.rules.ismoduleroutine(rout)
numpy.f2py.rules.ismutable(var)
numpy.f2py.rules.isoptional(var)
numpy.f2py.rules.isprivate(var)
numpy.f2py.rules.isreal(var)
numpy.f2py.rules.isrequired(var)
numpy.f2py.rules.isroutine(rout)
numpy.f2py.rules.isscalar(var)
numpy.f2py.rules.issigned_array(var)
numpy.f2py.rules.issigned_chararray(var)
numpy.f2py.rules.issigned_long_longarray(var)
numpy.f2py.rules.issigned_shortarray(var)
numpy.f2py.rules.isstring(var)
numpy.f2py.rules.isstringarray(var)
numpy.f2py.rules.isstringfunction(rout)
numpy.f2py.rules.issubroutine(rout)
numpy.f2py.rules.issubroutine_wrap(rout)
numpy.f2py.rules.isthreadsafe(rout)
numpy.f2py.rules.istrue(var)
numpy.f2py.rules.isunsigned(var)
numpy.f2py.rules.isunsigned_char(var)
numpy.f2py.rules.isunsigned_chararray(var)
numpy.f2py.rules.isunsigned_long_long(var)
numpy.f2py.rules.isunsigned_long_longarray(var)
numpy.f2py.rules.isunsigned_short(var)
numpy.f2py.rules.isunsigned_shortarray(var)
numpy.f2py.rules.isunsignedarray(var)
numpy.f2py.rules.l_not(f)
numpy.f2py.rules.markoutercomma(line, comma)
numpy.f2py.rules.modsign2map(m)
numpy.f2py.rules.write(self, string)
numpy.f2py.rules.reduce
(
function, sequence, initial
numpy.f2py.rules.replace(str, d, defaultsep)
numpy.f2py.rules.routsign2map(rout)
numpy.f2py.rules.pprint(object, stream, indent, width, depth)
numpy.f2py.rules.sign2map(a, var)
numpy.f2py.rules.stripcomma(s)

 
 

 
 
numpy.f2py.use_rules.applyrules(rules, d, var)
numpy.f2py.use_rules.buildusevar(name, realname, vars, usemodulename)
numpy.f2py.use_rules.buildusevars(m, r)
numpy.f2py.use_rules.containscommon(rout)
numpy.f2py.use_rules.containsmodule(block)
numpy.f2py.use_rules.debugcapi(var)
numpy.f2py.use_rules.dictappend(rd, ar)
numpy.f2py.use_rules.write(self, string)
numpy.f2py.use_rules.flatlist(l)
numpy.f2py.use_rules.gentitle(name)
numpy.f2py.use_rules.get_kind(var)
numpy.f2py.use_rules.getargs(rout)
numpy.f2py.use_rules.getargs2(rout)
numpy.f2py.use_rules.getcallprotoargument(rout, cb_map)
numpy.f2py.use_rules.getcallstatement(rout)
numpy.f2py.use_rules.getfortranname(rout)
numpy.f2py.use_rules.getmultilineblock(rout, blockname, comment, counter)
numpy.f2py.use_rules.getpymethoddef(rout)
numpy.f2py.use_rules.getrestdoc(rout)
numpy.f2py.use_rules.getusercode(rout)
numpy.f2py.use_rules.getusercode1(rout)
numpy.f2py.use_rules.hasassumedshape(rout)
numpy.f2py.use_rules.hasbody(rout)
numpy.f2py.use_rules.hascallstatement(rout)
numpy.f2py.use_rules.hascommon(rout)
numpy.f2py.use_rules.hasexternals(rout)
numpy.f2py.use_rules.hasinitvalue(var)
numpy.f2py.use_rules.hasinitvalueasstring(var)
numpy.f2py.use_rules.hasnote(var)
numpy.f2py.use_rules.hasresultnote(rout)
numpy.f2py.use_rules.hasvariables(rout)
numpy.f2py.use_rules.isallocatable(var)
numpy.f2py.use_rules.isarray(var)
numpy.f2py.use_rules.isarrayofstrings(var)
numpy.f2py.use_rules.ischaracter(var)
numpy.f2py.use_rules.iscomplex(var)
numpy.f2py.use_rules.iscomplexarray(var)
numpy.f2py.use_rules.iscomplexfunction(rout)
numpy.f2py.use_rules.iscomplexfunction_warn(rout)
numpy.f2py.use_rules.isdouble(var)
numpy.f2py.use_rules.isdummyroutine(rout)
numpy.f2py.use_rules.isexternal(var)
numpy.f2py.use_rules.isfalse(var)
numpy.f2py.use_rules.isfunction(rout)
numpy.f2py.use_rules.isfunction_wrap(rout)
numpy.f2py.use_rules.isint1array(var)
numpy.f2py.use_rules.isinteger(var)
numpy.f2py.use_rules.isintent_aligned16(var)
numpy.f2py.use_rules.isintent_aligned4(var)
numpy.f2py.use_rules.isintent_aligned8(var)
numpy.f2py.use_rules.isintent_aux(var)
numpy.f2py.use_rules.isintent_c(var)
numpy.f2py.use_rules.isintent_cache(var)
numpy.f2py.use_rules.isintent_callback(var)
numpy.f2py.use_rules.isintent_copy(var)
numpy.f2py.use_rules.isintent_hide(var)
numpy.f2py.use_rules.isintent_in(var)
numpy.f2py.use_rules.isintent_inout(var)
numpy.f2py.use_rules.isintent_inplace(var)
numpy.f2py.use_rules.isintent_nothide(var)
numpy.f2py.use_rules.isintent_out(var)
numpy.f2py.use_rules.isintent_overwrite(var)
numpy.f2py.use_rules.islogical(var)
numpy.f2py.use_rules.islogicalfunction(rout)
numpy.f2py.use_rules.islong_complex(var)
numpy.f2py.use_rules.islong_double(var)
numpy.f2py.use_rules.islong_doublefunction(rout)
numpy.f2py.use_rules.islong_long(var)
numpy.f2py.use_rules.islong_longfunction(rout)
numpy.f2py.use_rules.ismodule(rout)
numpy.f2py.use_rules.ismoduleroutine(rout)
numpy.f2py.use_rules.ismutable(var)
numpy.f2py.use_rules.isoptional(var)
numpy.f2py.use_rules.isprivate(var)
numpy.f2py.use_rules.isreal(var)
numpy.f2py.use_rules.isrequired(var)
numpy.f2py.use_rules.isroutine(rout)
numpy.f2py.use_rules.isscalar(var)
numpy.f2py.use_rules.issigned_array(var)
numpy.f2py.use_rules.issigned_chararray(var)
numpy.f2py.use_rules.issigned_long_longarray(var)
numpy.f2py.use_rules.issigned_shortarray(var)
numpy.f2py.use_rules.isstring(var)
numpy.f2py.use_rules.isstringarray(var)
numpy.f2py.use_rules.isstringfunction(rout)
numpy.f2py.use_rules.issubroutine(rout)
numpy.f2py.use_rules.issubroutine_wrap(rout)
numpy.f2py.use_rules.isthreadsafe(rout)
numpy.f2py.use_rules.istrue(var)
numpy.f2py.use_rules.isunsigned(var)
numpy.f2py.use_rules.isunsigned_char(var)
numpy.f2py.use_rules.isunsigned_chararray(var)
numpy.f2py.use_rules.isunsigned_long_long(var)
numpy.f2py.use_rules.isunsigned_long_longarray(var)
numpy.f2py.use_rules.isunsigned_short(var)
numpy.f2py.use_rules.isunsigned_shortarray(var)
numpy.f2py.use_rules.isunsignedarray(var)
numpy.f2py.use_rules.l_not(f)
numpy.f2py.use_rules.outmess(t)
numpy.f2py.use_rules.reduce
(
function, sequence, initial
numpy.f2py.use_rules.replace(str, d, defaultsep)
numpy.f2py.use_rules.pprint(object, stream, indent, width, depth)
numpy.f2py.use_rules.stripcomma(s)

 
 

 
 
numpy.fft.fftpack._cook_nd_args(a, s, axes, invreal)
numpy.fft.fftpack._raw_fft(a, n, axis, init_function, work_function, fft_cache)
numpy.fft.fftpack._raw_fftnd(a, s, axes, function)
numpy.fft.fftpack.asarray(a, dtype, order)
numpy.fft.fftpack.fft(a, n, axis)
numpy.fft.fftpack.fft2(a, s, axes)
numpy.fft.fftpack.fftn(a, s, axes)
numpy.fft.fftpack.hfft(a, n, axis)
numpy.fft.fftpack.ifft(a, n, axis)
numpy.fft.fftpack.ifft2(a, s, axes)
numpy.fft.fftpack.ifftn(a, s, axes)
numpy.fft.fftpack.ihfft(a, n, axis)
numpy.fft.fftpack.irfft(a, n, axis)
numpy.fft.fftpack.irfft2(a, s, axes)
numpy.fft.fftpack.irfftn(a, s, axes)
numpy.fft.fftpack.rfft(a, n, axis)
numpy.fft.fftpack.rfft2(a, s, axes)
numpy.fft.fftpack.rfftn(a, s, axes)
numpy.fft.fftpack.shape(a)
numpy.fft.fftpack.swapaxes(a, axis1, axis2)
numpy.fft.fftpack.take(a, indices, axis, out, mode)
numpy.fft.fftpack.zeros
(
shape, dtype=float, order=C

 
 
numpy.fft.fftpack_lite.cfftb
numpy.fft.fftpack_lite.cfftf
numpy.fft.fftpack_lite.cffti
numpy.fft.fftpack_lite.rfftb
numpy.fft.fftpack_lite.rfftf
numpy.fft.fftpack_lite.rffti

 
 
numpy.fft.helper.arange
(
start, stop, step,, dtype=None
numpy.fft.helper.asarray(a, dtype, order)
numpy.fft.helper.concatenate
(
(a1, a2, ...
numpy.fft.helper.empty
(
shape, dtype=float, order=C
numpy.fft.helper.fftfreq(n, d)
numpy.fft.helper.fftshift(x, axes)
numpy.fft.helper.ifftshift(x, axes)
numpy.fft.helper.rfftfreq(n, d)
numpy.fft.helper.take(a, indices, axis, out, mode)

 
 

 
 
numpy.fft.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.lib._compiled_base._insert
numpy.lib._compiled_base.add_docstring
(
obj, docstring
numpy.lib._compiled_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib._compiled_base.bincount
(
x, weights=None, minlength=None
numpy.lib._compiled_base.digitize
(
x, bins, right=False
numpy.lib._compiled_base.interp
numpy.lib._compiled_base.packbits
(
myarray, axis=None
numpy.lib._compiled_base.ravel_multi_index
(
multi_index, dims, mode=raise, order=C
numpy.lib._compiled_base.unpackbits
(
myarray, axis=None
numpy.lib._compiled_base.unravel_index
(
indices, dims, order=C

 
 

 
 

 
 

 
 
numpy.lib.arraypad._append_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._append_edge(arr, pad_amt, axis)
numpy.lib.arraypad._append_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._append_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._arange_ndarray(arr, shape, axis, reverse)
numpy.lib.arraypad._normalize_shape(narray, shape)
numpy.lib.arraypad._pad_ref(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_sym(arr, pad_amt, method, axis)
numpy.lib.arraypad._pad_wrap(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_const(arr, pad_amt, val, axis)
numpy.lib.arraypad._prepend_edge(arr, pad_amt, axis)
numpy.lib.arraypad._prepend_max(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_mean(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_med(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_min(arr, pad_amt, num, axis)
numpy.lib.arraypad._prepend_ramp(arr, pad_amt, end, axis)
numpy.lib.arraypad._round_ifneeded(arr, dtype)
numpy.lib.arraypad._validate_lengths(narray, number_elements)
numpy.lib.arraypad.pad(array, pad_width, mode)

 
 
numpy.lib.arraysetops.ediff1d(ary, to_end, to_begin)
numpy.lib.arraysetops.in1d(ar1, ar2, assume_unique, invert)
numpy.lib.arraysetops.intersect1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setdiff1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.setxor1d(ar1, ar2, assume_unique)
numpy.lib.arraysetops.union1d(ar1, ar2)
numpy.lib.arraysetops.unique(ar, return_index, return_inverse, return_counts)

 
 

 
 
numpy.lib.financial._convert_when(when)
numpy.lib.financial._g_div_gp(r, n, p, x, y, w)
numpy.lib.financial._rbl(rate, per, pmt, pv, when)
numpy.lib.financial.fv(rate, nper, pmt, pv, when)
numpy.lib.financial.ipmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.irr(values)
numpy.lib.financial.mirr(values, finance_rate, reinvest_rate)
numpy.lib.financial.nper(rate, pmt, pv, fv, when)
numpy.lib.financial.npv(rate, values)
numpy.lib.financial.pmt(rate, nper, pv, fv, when)
numpy.lib.financial.ppmt(rate, per, nper, pv, fv, when)
numpy.lib.financial.pv(rate, nper, pmt, fv, when)
numpy.lib.financial.rate(nper, pmt, pv, fv, when, guess, tol, maxiter)

 
 
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._read_array_header(fp, version)
numpy.lib.format._read_bytes(fp, size, error_template)
numpy.lib.format._write_array_header(fp, d, version)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.isfileobj(f)
numpy.lib.format.magic(major, minor)
numpy.lib.format.open_memmap(filename, mode, dtype, shape, fortran_order, version)
numpy.lib.format.read_array(fp)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_array_header_2_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.safe_eval(source)
numpy.lib.format.write_array(fp, array, version)
numpy.lib.format.write_array_header_1_0(fp, d)
numpy.lib.format.write_array_header_2_0(fp, d)

 
 
numpy.lib.function_base._chbevl(x, vals)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base._insert
numpy.lib.function_base._median(a, axis, out, overwrite_input)
numpy.lib.function_base._percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base._ureduce(a, func)
numpy.lib.function_base.add_docstring
(
obj, docstring
numpy.lib.function_base.add_newdoc(place, obj, doc)
numpy.lib.function_base.add_newdoc_ufunc
(
ufunc, new_docstring
numpy.lib.function_base.angle(z, deg)
numpy.lib.function_base.append(arr, values, axis)
numpy.lib.function_base.arange
(
start, stop, step,, dtype=None
numpy.lib.function_base.around(a, decimals, out)
numpy.lib.function_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.function_base.asanyarray(a, dtype, order)
numpy.lib.function_base.asarray(a, dtype, order)
numpy.lib.function_base.asarray_chkfinite(a, dtype, order)
numpy.lib.function_base.average(a, axis, weights, returned)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.bincount
(
x, weights=None, minlength=None
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.interp
numpy.lib.function_base.concatenate
(
(a1, a2, ...
numpy.lib.function_base.copy(a, order)
numpy.lib.function_base.corrcoef(x, y, rowvar, bias, ddof)
numpy.lib.function_base.cov(m, y, rowvar, bias, ddof)
numpy.lib.function_base.delete(arr, obj, axis)
numpy.lib.function_base.diag(v, k)
numpy.lib.function_base.diff(a, n, axis)
numpy.lib.function_base.digitize
(
x, bins, right=False
numpy.lib.function_base.disp(mesg, device, linefeed)
numpy.lib.function_base.dot
(
a, b, out=None
numpy.lib.function_base.empty
(
shape, dtype=float, order=C
numpy.lib.function_base.empty_like
(
a, dtype=None, order=K, subok=True
numpy.lib.function_base.extract(condition, arr)
numpy.lib.function_base.frompyfunc
(
func, nin, nout
numpy.lib.function_base.gradient(f)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.histogram(a, bins, range, normed, weights, density)
numpy.lib.function_base.histogramdd(sample, bins, range, normed, weights)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr, obj, values, axis)
numpy.lib.function_base.interp(x, xp, fp, left, right)
numpy.lib.function_base.isscalar(num)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M, beta)
numpy.lib.function_base.linspace(start, stop, num, endpoint, retstep, dtype)
numpy.lib.function_base.mean(a, axis, dtype, out, keepdims)
numpy.lib.function_base.median(a, axis, out, overwrite_input, keepdims)
numpy.lib.function_base.msort(a)
numpy.lib.function_base.nonzero(a)
numpy.lib.function_base.ones(shape, dtype, order)
numpy.lib.function_base.partition(a, kth, axis, kind, order)
numpy.lib.function_base.percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.function_base.piecewise(x, condlist, funclist)
numpy.lib.function_base.place(arr, mask, vals)
numpy.lib.function_base.ravel(a, order)
numpy.lib.function_base.select(condlist, choicelist, default)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort(a, axis, kind, order)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.take(a, indices, axis, out, mode)
numpy.lib.function_base.trapz(y, x, dx, axis)
numpy.lib.function_base.trim_zeros(filt, trim)
numpy.lib.function_base.unwrap(p, discont, axis)

 
 

 
 

 
 
numpy.lib.nanfunctions._copyto(a, val, mask)
numpy.lib.nanfunctions._divide_by_count(a, b, out)
numpy.lib.nanfunctions._nanmedian(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanmedian1d(arr1d, overwrite_input)
numpy.lib.nanfunctions._nanmedian_small(a, axis, out, overwrite_input)
numpy.lib.nanfunctions._nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions._nanpercentile1d(arr1d, q, overwrite_input, interpolation)
numpy.lib.nanfunctions._replace_nan(a, val)
numpy.lib.nanfunctions._ureduce(a, func)
numpy.lib.nanfunctions.nanargmax(a, axis)
numpy.lib.nanfunctions.nanargmin(a, axis)
numpy.lib.nanfunctions.nanmax(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanmean(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanmedian(a, axis, out, overwrite_input, keepdims)
numpy.lib.nanfunctions.nanmin(a, axis, out, keepdims)
numpy.lib.nanfunctions.nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
numpy.lib.nanfunctions.nanstd(a, axis, dtype, out, ddof, keepdims)
numpy.lib.nanfunctions.nansum(a, axis, dtype, out, keepdims)
numpy.lib.nanfunctions.nanvar(a, axis, dtype, out, ddof, keepdims)

 
 

 
 
numpy.lib.polynomial._raise_power(astr, wrap)
numpy.lib.polynomial.diag(v, k)
numpy.lib.polynomial.dot
(
a, b, out=None
numpy.lib.polynomial.eigvals(a)

 
 

 
 
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath.any(a, axis, out, keepdims)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.asarray(a, dtype, order)
numpy.lib.scimath.isreal(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n, x)
numpy.lib.scimath.power(x, p)
numpy.lib.scimath.sqrt(x)

 
 
numpy.lib.setup.configuration(parent_package, top_path)
numpy.lib.setup.join(path)

 
 
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base.apply_along_axis(func1d, axis, arr)
numpy.lib.shape_base.apply_over_axes(func, a, axes)
numpy.lib.shape_base.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.shape_base.array_split(ary, indices_or_sections, axis)
numpy.lib.shape_base.asanyarray(a, dtype, order)
numpy.lib.shape_base.asarray(a, dtype, order)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.concatenate
(
(a1, a2, ...
numpy.lib.shape_base.dsplit(ary, indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a, axis)
numpy.lib.shape_base.hsplit(ary, indices_or_sections)
numpy.lib.shape_base.isscalar(num)
numpy.lib.shape_base.kron(a, b)
numpy.lib.shape_base.outer(a, b, out)
numpy.lib.shape_base.product(a, axis, dtype, out, keepdims)
numpy.lib.shape_base.reshape(a, newshape, order)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.split(ary, indices_or_sections, axis)
numpy.lib.shape_base.tile(A, reps)
numpy.lib.shape_base.vsplit(ary, indices_or_sections)
numpy.lib.shape_base.vstack(tup)
numpy.lib.shape_base.zeros
(
shape, dtype=float, order=C

 
 

 
 
numpy.lib.twodim_base._min_int(low, high)
numpy.lib.twodim_base.arange
(
start, stop, step,, dtype=None
numpy.lib.twodim_base.asanyarray(a, dtype, order)
numpy.lib.twodim_base.asarray(a, dtype, order)
numpy.lib.twodim_base.diag(v, k)
numpy.lib.twodim_base.diagflat(v, k)
numpy.lib.twodim_base.empty
(
shape, dtype=float, order=C
numpy.lib.twodim_base.eye(N, M, k, dtype)
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x, y, bins, range, normed, weights)

 
 
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.type_check.asanyarray(a, dtype, order)
numpy.lib.type_check.asarray(a, dtype, order)
numpy.lib.type_check.asfarray(a, dtype)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isneginf(x, y)
numpy.lib.type_check.isposinf(x, y)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars, typeset, default)
numpy.lib.type_check.nan_to_num(x)
numpy.lib.type_check.obj2sctype(rep, default)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a, tol)
numpy.lib.type_check.typename(char)
numpy.lib.type_check.zeros
(
shape, dtype=float, order=C

 
 
numpy.lib.ufunclike.fix(x, y)
numpy.lib.ufunclike.isneginf(x, y)
numpy.lib.ufunclike.isposinf(x, y)

 
 
numpy.lib.user_array.arange
(
start, stop, step,, dtype=None
numpy.lib.user_array.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.lib.user_array.asarray(a, dtype, order)

 
 

 
 

 
 

 
 

 
 
numpy.linalg.lapack_lite.dgelsd
numpy.linalg.lapack_lite.dgeqrf
numpy.linalg.lapack_lite.dorgqr
numpy.linalg.lapack_lite.xerbla
numpy.linalg.lapack_lite.zgelsd
numpy.linalg.lapack_lite.zgeqrf
numpy.linalg.lapack_lite.zungqr

 
 
numpy.linalg.linalg._complexType(t, default)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._fastCopyAndTranspose
(
a
numpy.linalg.linalg._fastCopyAndTranspose(type)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._multi_svd_norm(x, row_axis, col_axis, op)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err, flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err, flag)
numpy.linalg.linalg._raise_linalgerror_singular(err, flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err, flag)
numpy.linalg.linalg._realType(t, default)
numpy.linalg.linalg.all(a, axis, out, keepdims)
numpy.linalg.linalg.amax(a, axis, out, keepdims)
numpy.linalg.linalg.amin(a, axis, out, keepdims)
numpy.linalg.linalg.array
(
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
numpy.linalg.linalg.asarray(a, dtype, order)
numpy.linalg.linalg.asfarray(a, dtype)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.cond(x, p)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.dot
(
a, b, out=None
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a, UPLO)
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a, UPLO)
numpy.linalg.linalg.empty
(
shape, dtype=float, order=C
numpy.linalg.linalg.empty_like
(
a, dtype=None, order=K, subok=True

 
 
numpy.linalg.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.ma.bench.compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
numpy.ma.bench.compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
numpy.ma.bench.compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
numpy.ma.bench.timer(s, v, nloop, nrep)

 
 

 
 

 
 

 
 
numpy.ma.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._eval(astr)
numpy.matrixlib.defmatrix._from_string(str, gdict, ldict)
numpy.matrixlib.defmatrix.asanyarray(a, dtype, order)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)
numpy.matrixlib.defmatrix.binary_repr(num, width)
numpy.matrixlib.defmatrix.bmat(obj, ldict, gdict)
numpy.matrixlib.defmatrix.concatenate
(
(a1, a2, ...
numpy.matrixlib.defmatrix.identity(n, dtype)
numpy.matrixlib.defmatrix.isscalar(num)
numpy.matrixlib.defmatrix.issubdtype(arg1, arg2)
numpy.matrixlib.defmatrix.asmatrix(data, dtype)

 
 
numpy.matrixlib.setup.configuration(parent_package, top_path)

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
numpy.polynomial.polyutils.as_series(alist, trim)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x, old, new)
numpy.polynomial.polyutils.mapparms(old, new)
numpy.polynomial.polyutils.trimcoef(c, tol)
numpy.polynomial.polyutils.trimseq(seq)

 
 
numpy.polynomial.setup.configuration(parent_package, top_path)

 
 
numpy.random.allocate_lock

 
 

 
 
numpy.random.mtrand.allocate_lock
numpy.random.mtrand._shape_from_size
numpy.random.mtrand.beta
numpy.random.mtrand.binomial
numpy.random.mtrand.bytes
numpy.random.mtrand.chisquare
numpy.random.mtrand.choice
numpy.random.mtrand.dirichlet
numpy.random.mtrand.exponential
numpy.random.mtrand.f
numpy.random.mtrand.gamma
numpy.random.mtrand.geometric
numpy.random.mtrand.get_state
numpy.random.mtrand.gumbel
numpy.random.mtrand.hypergeometric
numpy.random.mtrand.laplace
numpy.random.mtrand.logistic
numpy.random.mtrand.lognormal
numpy.random.mtrand.logseries
numpy.random.mtrand.multinomial
numpy.random.mtrand.multivariate_normal
numpy.random.mtrand.negative_binomial
numpy.random.mtrand.noncentral_chisquare
numpy.random.mtrand.noncentral_f
numpy.random.mtrand.normal
numpy.random.mtrand.pareto
numpy.random.mtrand.permutation
numpy.random.mtrand.poisson
numpy.random.mtrand.power
numpy.random.mtrand.rand
numpy.random.mtrand.randint
numpy.random.mtrand.randn
numpy.random.mtrand.random_integers
numpy.random.mtrand.random_sample
numpy.random.mtrand.rayleigh
numpy.random.mtrand.seed
numpy.random.mtrand.set_state
numpy.random.mtrand.shuffle
numpy.random.mtrand.standard_cauchy
numpy.random.mtrand.standard_exponential
numpy.random.mtrand.standard_gamma
numpy.random.mtrand.standard_normal
numpy.random.mtrand.standard_t
numpy.random.mtrand.triangular
numpy.random.mtrand.uniform
numpy.random.mtrand.vonmises
numpy.random.mtrand.wald
numpy.random.mtrand.weibull
numpy.random.mtrand.zipf

 
 
numpy.random.setup.configuration(parent_package, top_path)
numpy.random.setup.dirname(p)
numpy.random.setup.join(path)
numpy.random.setup.newer(source, target)
numpy.random.setup.split(p)

 
 
numpy.setup.configuration(parent_package, top_path)

 
 

 
 
numpy.testing.decorators.deprecated(conditional)
numpy.testing.decorators.knownfailureif(fail_condition, msg)
numpy.testing.decorators.setastest(tf)
numpy.testing.decorators.skipif(skip_condition, msg)
numpy.testing.decorators.slow(t)

 
 

 
 

 
 

 
 
numpy.testing.setup.configuration(parent_package, top_path)

 
 
numpy.testing.utils.GetPerformanceAttributes(object, counter, instance, inum, format, machine)

 
 

 
 
 
 -----------------------------------------------------------------------------

 
Module: numpy.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy._import_tools-------------------------------------------------
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: PackageLoaderDebug
          +  _execcmd(self, cmdstr)

 
Module: numpy.add_newdocs-------------------------------------------------
      +Func: add_newdoc(place, obj, doc)

 
Module: numpy.compat-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargspec(func)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat._inspect-------------------------------------------------
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3DBA8>), (formatvarkw, <function <lambda> at 0x0000000002E3DC18>), (formatvalue, <function <lambda> at 0x0000000002E3DC88>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: getargs(co)
      +Func: getargspec(func)
      +Func: getargvalues(frame)
      +Func: iscode(object)
      +Func: isfunction(object)
      +Func: ismethod(object)
      +Func: joinseq(seq)
      +Func: strseq(object, convert, join)
    	  	  Default_Args:(join, <function joinseq at 0x0000000002E3D898>)

 
Module: numpy.compat.py3k-------------------------------------------------
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
      +Func: asunicode(s)
      +Func: asunicode_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: sixu(s)
    
   +Class: unicode
        (No members)

 
Module: numpy.compat.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.core-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _ufunc_reconstruct(module, name)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: hstack(tup)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core._dotblas-------------------------------------------------
    +Built-in Function: alterdot
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: inner
    	-Method Arguments:
a, b
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: vdot
    	-Method Arguments:
a, b

 
Module: numpy.core._dummy-------------------------------------------------
    (No members)

 
Module: numpy.core._internal-------------------------------------------------
      +Func: _add_trailing_padding(value, padding)
      +Func: _array_descr(descriptor)
      +Func: _commastring(astr)
    
   +Class: _ctypes
          +  data_as(self, obj)
          +  get_shape(self)
          +  get_strides(self)
          +  get_data(self)
          +  shape_as(self, obj)
          +  strides_as(self, obj)
          +  __init__(self, array, ptr)
        	  	  Default_Args:(ptr, None)
          +  get_as_parameter(self)
      +Func: _dtype_from_pep3118(spec, byteorder, is_subdtype)
    	  	  Default_Args:(byteorder, @), (is_subdtype, False)
      +Func: _gcd(a, b)
      +Func: _index_fields(ary, fields)
      +Func: _makenames_list(adict, align)
    
   +Class: _missing_ctypes
          +  c_void_p(self, num)
          +  cast(self, num, obj)
      +Func: _newnames(datatype, order)
      +Func: _prod(a)
      +Func: _reconstruct(subtype, shape, dtype)
      +Func: _usefields(adict, align)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)

 
Module: numpy.core._methods-------------------------------------------------
      +Func: _all(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: _any(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _count_reduce_items(arr, axis)
      +Func: _mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: _sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: _var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False
    +Built-in Function: reduce
    	-Method Arguments:
a, axis=0, dtype=None, out=None, keepdims=False

 
Module: numpy.core.arrayprint-------------------------------------------------
    
   +Class: ComplexFormat
          +  __call__(self, x)
          +  __init__(self, x, precision, suppress_small)
    
   +Class: DatetimeFormat
          +  __call__(self, x)
          +  __init__(self, x, unit, timezone, casting)
        	  	  Default_Args:(unit, None), (timezone, None), (casting, same_kind)
    
   +Class: FloatFormat
          +  fillFormat(self, data)
          +  __call__(self, x, strip_zeros)
        	  	  Default_Args:(strip_zeros, True)
          +  __init__(self, data, precision, suppress_small, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: IntegerFormat
          +  __call__(self, x)
          +  __init__(self, data)
    
   +Class: LongComplexFormat
          +  __call__(self, x)
          +  __init__(self, precision)
    
   +Class: LongFloatFormat
          +  __call__(self, x)
          +  __init__(self, precision, sign)
        	  	  Default_Args:(sign, False)
    
   +Class: TimedeltaFormat
          +  __call__(self, x)
          +  __init__(self, data)
      +Func: _array2string(a, max_line_width, precision, suppress_small, separator, prefix, formatter)
    	  	  Default_Args:(separator,  ), (prefix, ), (formatter, None)
      +Func: _boolFormatter(x)
      +Func: _convert_arrays(obj)
      +Func: _digits(x, precision, format)
      +Func: _extendLine(s, line, word, max_line_len, next_line_prefix)
      +Func: _formatArray(a, format_function, rank, max_line_len, next_line_prefix, separator, edge_items, summary_insert)
      +Func: _leading_trailing(a)
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: format_longfloat
    	-Method Arguments: None
      +Func: product(x, y)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: repr_format(x)
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)

 
Module: numpy.core.defchararray-------------------------------------------------
    
   +Class: str
        (No members)
    	   Positional_Args: args
      +Func: _get_num_chars(a)
    +Built-in Function: len
    	-Method Arguments:
object
      +Func: _to_string_or_unicode_array(result)
    
   +Class: unicode
        (No members)
    	   Positional_Args: args
    +Built-in Function: _vec_string
    	-Method Arguments: None
      +Func: add(x1, x2)
      +Func: array(obj, itemsize, copy, unicode, order)
    	  	  Default_Args:(itemsize, None), (copy, True), (unicode, None), (order, None)
      +Func: asarray(obj, itemsize, unicode, order)
    	  	  Default_Args:(itemsize, None), (unicode, None), (order, None)
    
   +Class: str
        (No members)
    
   +Class: bool_
        (No members)
      +Func: capitalize(a)
      +Func: center(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
      +Func: count(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: decode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: encode(a, encoding, errors)
    	  	  Default_Args:(encoding, None), (errors, None)
      +Func: endswith(a, suffix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: equal(x1, x2)
      +Func: expandtabs(a, tabsize)
    	  	  Default_Args:(tabsize, 8)
      +Func: find(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: greater(x1, x2)
      +Func: greater_equal(x1, x2)
      +Func: index(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
    
   +Class: integer
        (No members)
      +Func: isalnum(a)
      +Func: isalpha(a)
      +Func: isdecimal(a)
      +Func: isdigit(a)
      +Func: islower(a)
      +Func: isnumeric(a)
      +Func: isspace(a)
      +Func: istitle(a)
      +Func: isupper(a)
      +Func: join(sep, seq)
      +Func: less(x1, x2)
      +Func: less_equal(x1, x2)
      +Func: ljust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
    
   +Class: long
        (No members)
      +Func: lower(a)
      +Func: lstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: mod(a, values)
      +Func: multiply(a, i)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: not_equal(x1, x2)
    
   +Class: object_
        (No members)
      +Func: partition(a, sep)
      +Func: replace(a, old, new, count)
    	  	  Default_Args:(count, None)
      +Func: rfind(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rindex(a, sub, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: rjust(a, width, fillchar)
    	  	  Default_Args:(fillchar,  )
      +Func: rpartition(a, sep)
      +Func: rsplit(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: rstrip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: split(a, sep, maxsplit)
    	  	  Default_Args:(sep, None), (maxsplit, None)
      +Func: splitlines(a, keepends)
    	  	  Default_Args:(keepends, None)
      +Func: startswith(a, prefix, start, end)
    	  	  Default_Args:(start, 0), (end, None)
      +Func: str_len(a)
    
   +Class: string_
        (No members)
      +Func: strip(a, chars)
    	  	  Default_Args:(chars, None)
      +Func: swapcase(a)
      +Func: title(a)
      +Func: translate(a, table, deletechars)
    	  	  Default_Args:(deletechars, None)
    
   +Class: unicode_
        (No members)
      +Func: upper(a)
      +Func: zfill(a, width)

 
Module: numpy.core.fromnumeric-------------------------------------------------
    
   +Class: VisibleDeprecationWarning
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: generator
        (No members)
    +Built-in Function: sum
    	-Method Arguments:
sequence, start
      +Func: _wrapit(obj, method)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ndim(a)
      +Func: nonzero(a)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: shape(a)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.core.function_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes

 
Module: numpy.core.getlimits-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: _frz(a)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)

 
Module: numpy.core.info-------------------------------------------------
    (No members)

 
Module: numpy.core.machar-------------------------------------------------
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs

 
Module: numpy.core.memmap-------------------------------------------------
    
   +Class: basestring
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: dtype
        (No members)
    
   +Class: long
        (No members)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    
   +Class: ndarray
        (No members)
    
   +Class: uint8
        (No members)

 
Module: numpy.core.multiarray-------------------------------------------------
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    +Built-in Function: _get_ndarray_c_version
    	-Method Arguments: None
    +Built-in Function: _reconstruct
    	-Method Arguments:
subtype, shape, dtype
    +Built-in Function: _vec_string
    	-Method Arguments: None
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
    +Built-in Function: correlate
    	-Method Arguments:
a,v, mode=0
    +Built-in Function: correlate2
    	-Method Arguments: None
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    +Built-in Function: dot
    	-Method Arguments: None
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: Exception
        (No members)
    
   +Class: flagsobj
        (No members)
    
   +Class: flatiter
        (No members)
    +Built-in Function: format_longfloat
    	-Method Arguments: None
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: inner
    	-Method Arguments: None
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
    +Built-in Function: may_share_memory
    	-Method Arguments: None
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
    +Built-in Function: scalar
    	-Method Arguments:
dtype, obj
    +Built-in Function: set_datetimeparse_function
    	-Method Arguments: None
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
    +Built-in Function: set_string_function
    	-Method Arguments:
f, repr=1
    +Built-in Function: set_typeDict
    	-Method Arguments:
dict
    +Built-in Function: test_interrupt
    	-Method Arguments: None
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.core.multiarray_tests-------------------------------------------------
    +Built-in Function: array_indexing
    	-Method Arguments: None
    +Built-in Function: get_buffer_info
    	-Method Arguments: None
    +Built-in Function: test_as_c_array
    	-Method Arguments: None
    +Built-in Function: test_inplace_increment
    	-Method Arguments: None
    +Built-in Function: test_int_subclass
    	-Method Arguments: None
    +Built-in Function: test_nditer_too_large
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator
    	-Method Arguments: None
    +Built-in Function: test_neighborhood_iterator_oob
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_end
    	-Method Arguments: None
    +Built-in Function: test_pydatamem_seteventhook_start
    	-Method Arguments: None

 
Module: numpy.core.numeric-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
      +Func: _maketup(descr, val)
      +Func: _mode_from_name(mode)
      +Func: _move_axis_to_0(a, axis)
    
   +Class: _unspecified
        (No members)
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: extend_all(module)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
    
   +Class: generic
        (No members)
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: float16
        (No members)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
    +Built-in Function: inner
    	-Method Arguments:
a, b
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: isfortran(a)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubdtype(arg1, arg2)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: load(file)
    +Built-in Function: loads
    	-Method Arguments:
string
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
    
   +Class: ndarray
        (No members)
      +Func: ndim(a)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: rank(a)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.core.numerictypes-------------------------------------------------
      +Func: _add_array_type(typename, bits)
      +Func: _can_coerce_all(dtypelist, start)
    	  	  Default_Args:(start, 0)
      +Func: _evalname(name)
      +Func: _find_common_coerce(a, b)
      +Func: _python_type(t)
    
   +Class: _typedict
          +  __getitem__(self, obj)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: bitname(obj)
    
   +Class: bool
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: buffer
        (No members)
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
    
   +Class: float64
        (No members)
    
   +Class: dtype
        (No members)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: english_capitalize(s)
      +Func: english_lower(s)
      +Func: english_upper(s)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: flexible
        (No members)
    
   +Class: float
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: generic
        (No members)
    
   +Class: float16
        (No members)
    
   +Class: inexact
        (No members)
    
   +Class: int
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
    
   +Class: int64
        (No members)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
    
   +Class: long
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: maximum_sctype(t)
    
   +Class: ndarray
        (No members)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object
        (No members)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: sctype2char(sctype)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: str
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: timedelta64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unsignedinteger
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)

 
Module: numpy.core.operand_flag_tests-------------------------------------------------
    (No members)

 
Module: numpy.core.records-------------------------------------------------
      +Func: array(obj, dtype, shape, offset, strides, formats, names, titles, aligned, byteorder, copy)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (strides, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (copy, True)
    
   +Class: str
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: find_duplicate(list)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromfile(fd, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromstring(datastring, dtype, shape, offset, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (offset, 0), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: get_remaining_size(fd)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
    
   +Class: ndarray
        (No members)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)

 
Module: numpy.core.scalarmath-------------------------------------------------
    +Built-in Function: alter_pythonmath
    	-Method Arguments: None
    +Built-in Function: restore_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_pythonmath
    	-Method Arguments: None
    +Built-in Function: use_scalarmath
    	-Method Arguments: None

 
Module: numpy.core.setup-------------------------------------------------
    
   +Class: CallOnceOnly
          +  check_complex(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_ieee_macros(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  check_types(self)
        	   Positional_Args: a
        	   Keyword_Args: kw
          +  __init__(self)
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_complex(config, mathlibs)
      +Func: check_ieee_macros(config)
      +Func: check_long_double_representation(cmd)
      +Func: check_math_capabilities(config, moredefs, mathlibs)
      +Func: check_mathlib(config_cmd)
      +Func: check_types(config_cmd, ext, build_dir)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: get_config_var(name)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: newer(source, target)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)
      +Func: visibility_define(config)
      +Func: win32_checks(deflist)

 
Module: numpy.core.setup_common-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: MismatchCAPIWarning
        (No members)
      +Func: check_api_version(apiversion, codegen_dir)
      +Func: check_long_double_representation(cmd)
      +Func: fname2def(name)
      +Func: get_api_versions(apiversion, codegen_dir)
      +Func: is_released(config)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: long_double_representation(lines)
      +Func: pyod(filename)
      +Func: sym2def(symbol)
      +Func: type2def(symbol)

 
Module: numpy.core.shape_base-------------------------------------------------
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: hstack(tup)
      +Func: vstack(tup)

 
Module: numpy.core.struct_ufunc_test-------------------------------------------------
    (No members)

 
Module: numpy.core.test_rational-------------------------------------------------
    
   +Class: rational
        (No members)

 
Module: numpy.core.umath-------------------------------------------------
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
    +Built-in Function: geterrobj
    	-Method Arguments: None
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj

 
Module: numpy.core.umath_tests-------------------------------------------------
    +Built-in Function: test_signature
    	-Method Arguments: None

 
Module: numpy.ctypeslib-------------------------------------------------
    
   +Class: PyCArrayType
        (No members)
    
   +Class: dtype
        (No members)
      +Func: _flags_fromnum(num)
    
   +Class: _ndptr
          +  from_param(cls, obj)
          +  _check_retval_(self)
    
   +Class: c_void_p
        (No members)
      +Func: _num_fromflags(flaglist)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_array(obj, shape)
    	  	  Default_Args:(shape, None)
      +Func: as_ctypes(obj)
    
   +Class: c_longlong
        (No members)
    	   Positional_Args: args
    	   Keyword_Args: kwds
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    
   +Class: flagsobj
        (No members)
    
   +Class: integer
        (No members)
      +Func: load_library(libname, loader_path)
    
   +Class: ndarray
        (No members)
      +Func: ndpointer(dtype, ndim, shape, flags)
    	  	  Default_Args:(dtype, None), (ndim, None), (shape, None), (flags, None)
      +Func: prep_array(array_type)
      +Func: prep_pointer(pointer_obj, shape)
      +Func: prep_simple(simple_type, dtype)
    
   +Class: c_double
        (No members)

 
Module: numpy.distutils-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: parse_flags(line)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.__config__-------------------------------------------------
      +Func: get_info(name)

 
Module: numpy.distutils.__version__-------------------------------------------------
    (No members)

 
Module: numpy.distutils.ccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
      +Func: CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
    	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
      +Func: CCompiler_customize(self, dist, need_cxx)
    	  	  Default_Args:(need_cxx, 0)
      +Func: CCompiler_customize_cmd(self, cmd, ignore)
    	  	  Default_Args:(ignore, ())
      +Func: CCompiler_cxx_compiler(self)
      +Func: CCompiler_get_version(self, force, ok_status)
    	  	  Default_Args:(force, False), (ok_status, 0)
      +Func: CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
    	  	  Default_Args:(strip_dir, 0), (output_dir, )
      +Func: CCompiler_show_customization(self)
      +Func: CCompiler_spawn(self, cmd, display)
    	  	  Default_Args:(display, None)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: LooseVersion
          +  __str__(self)
          +  parse(self, vstring)
          +  __repr__(self)
          +  __cmp__(self, other)
          +  __init__(self, vstring)
        	  	  Default_Args:(vstring, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: _compiler_to_string(compiler)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: copy(x)
      +Func: customize_compiler(compiler)
      +Func: cyg2win32(path)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: execute(func, args, msg, verbose, dry_run)
    	  	  Default_Args:(msg, None), (verbose, 0), (dry_run, 0)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: get_default_compiler(osname, platform)
    	  	  Default_Args:(osname, None), (platform, None)
      +Func: is_sequence(seq)
      +Func: mkpath(name, mode, verbose, dry_run)
    	  	  Default_Args:(mode, 511), (verbose, 1), (dry_run, 0)
      +Func: move_file(src, dst, verbose, dry_run)
    	  	  Default_Args:(verbose, 1), (dry_run, 0)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: quote_args(args)
      +Func: replace_method(klass, method_name, func)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )
      +Func: spawn(cmd, search_path, verbose, dry_run)
    	  	  Default_Args:(search_path, 1), (verbose, 0), (dry_run, 0)
      +Func: split_quoted(s)

 
Module: numpy.distutils.command-------------------------------------------------

 
Module: numpy.distutils.command.autodist-------------------------------------------------
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)

 
Module: numpy.distutils.command.bdist_rpm-------------------------------------------------
    
   +Class: bdist_rpm
          +  _make_spec_file(self)
    
   +Class: bdist_rpm
          +  run(self)
          +  initialize_options(self)
          +  _make_spec_file(self)
          +  _dist_path(self, path)
          +  _format_changelog(self, changelog)
          +  finalize_options(self)
          +  finalize_package_data(self)

 
Module: numpy.distutils.command.build-------------------------------------------------
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: build
          +  run(self)
          +  initialize_options(self)
          +  has_scripts(self)
          +  has_pure_modules(self)
          +  has_c_libraries(self)
          +  has_ext_modules(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_clib-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
      +Func: all_strings(lst)
    
   +Class: build_clib
          +  build_libraries(self, libraries)
          +  run(self)
          +  initialize_options(self)
          +  build_a_library(self, build_info, lib_name, libraries)
          +  have_cxx_sources(self)
          +  have_f_sources(self)
          +  get_source_files(self)
      +Func: filter_sources(sources)
      +Func: get_lib_source_files(lib)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_clib
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  build_libraries(self, libraries)
          +  check_library_list(self, libraries)
          +  get_library_names(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.build_ext-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsFileError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: build_ext
          +  run(self)
          +  initialize_options(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  get_outputs(self)
          +  finalize_options(self)
          +  _libs_with_msvc_and_fortran(self, fcompiler, c_libraries, c_library_dirs)
          +  _add_dummy_mingwex_sym(self, c_sources)
          +  swig_sources(self, sources)
    	   Positional_Args: args
    	   Keyword_Args: kws
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: filter_sources(sources)
      +Func: get_ext_source_files(ext)
      +Func: glob(pathname)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_sequence(seq)
      +Func: msvc_version(compiler)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
    
   +Class: build_ext
          +  get_ext_filename(self, ext_name)
          +  get_ext_fullpath(self, ext_name)
          +  get_export_symbols(self, ext)
          +  swig_sources(self, sources, extension)
          +  initialize_options(self)
          +  get_ext_fullname(self, ext_name)
          +  get_outputs(self)
          +  run(self)
          +  check_extensions_list(self, extensions)
          +  build_extensions(self)
          +  find_swig(self)
          +  build_extension(self, ext)
          +  get_source_files(self)
          +  finalize_options(self)
          +  get_libraries(self, ext)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.build_py-------------------------------------------------
    
   +Class: build_py
          +  find_modules(self)
          +  run(self)
          +  find_package_modules(self, package, package_dir)
      +Func: is_string(s)
    
   +Class: build_py
          +  check_package(self, package, package_dir)
          +  build_packages(self)
          +  check_module(self, module, module_file)
          +  build_package_data(self)
          +  initialize_options(self)
          +  get_package_dir(self, package)
          +  byte_compile(self, files)
          +  get_outputs(self, include_bytecode)
        	  	  Default_Args:(include_bytecode, 1)
          +  find_all_modules(self)
          +  run(self)
          +  get_module_outfile(self, build_dir, package, module)
          +  finalize_options(self)
          +  build_modules(self)
          +  find_modules(self)
          +  find_data_files(self, package, src_dir)
          +  get_source_files(self)
          +  get_data_files(self)
          +  build_module(self, module, module_file, package)
          +  find_package_modules(self, package, package_dir)

 
Module: numpy.distutils.command.build_scripts-------------------------------------------------
    
   +Class: build_scripts
          +  generate_scripts(self, scripts)
          +  get_source_files(self)
          +  run(self)
      +Func: is_string(s)
    
   +Class: build_scripts
          +  get_source_files(self)
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
          +  copy_scripts(self)

 
Module: numpy.distutils.command.build_src-------------------------------------------------
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _find_swig_target(target_dir, name)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: appendpath(prefix, path)
    
   +Class: build_src
          +  filter_py_files(self, sources)
          +  build_extension_sources(self, ext)
          +  _build_npy_pkg_config(self, info, gd)
          +  build_npy_pkg_config(self)
          +  swig_sources(self, sources, extension)
          +  f2py_sources(self, sources, extension)
          +  initialize_options(self)
          +  template_sources(self, sources, extension)
          +  pyrex_sources(self, sources, extension)
          +  filter_files(self, sources, exts)
        	  	  Default_Args:(exts, )
          +  build_py_modules_sources(self)
          +  run(self)
          +  finalize_options(self)
          +  build_library_sources(self, lib_name, build_info)
          +  generate_sources(self, sources, extension)
          +  build_sources(self)
          +  build_data_files_sources(self)
          +  generate_a_pyrex_source(self, base, ext_name, source, extension)
          +  filter_h_files(self, sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_f2py_modulename(source)
      +Func: get_swig_modulename(source)
      +Func: get_swig_target(source)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: newer(source, target)
      +Func: newer_group(sources, target, missing)
    	  	  Default_Args:(missing, error)
      +Func: process_file(source)
      +Func: process_file(source)
      +Func: subst_vars(target, source, d)

 
Module: numpy.distutils.command.config-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: GrabStdout
          +  restore(self)
          +  write(self, data)
          +  flush(self)
          +  __init__(self)
    
   +Class: LinkError
        (No members)
      +Func: check_compiler_gcc4(cmd)
      +Func: check_inline(cmd)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
      +Func: copy_file(src, dst, preserve_mode, preserve_times, update, link, verbose, dry_run)
    	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (update, 0), (link, None), (verbose, 1), (dry_run, 0)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: generate_manifest(config)
    
   +Class: config
          +  search_cpp(self, pattern, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)
          +  _compile(self, body, headers, include_dirs, lang)
          +  run(self)
          +  try_link(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, 0), (call, 0)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_lib(self, library, library_dirs, headers, include_dirs, other_libraries)
        	  	  Default_Args:(library_dirs, None), (headers, None), (include_dirs, None), (other_libraries, )
          +  _clean(self)
        	   Positional_Args: filenames
          +  try_compile(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (lang, c)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  finalize_options(self)
          +  _gen_temp_sourcefile(self, body, headers, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  _preprocess(self, body, headers, include_dirs, lang)
          +  try_cpp(self, body, headers, include_dirs, lang)
        	  	  Default_Args:(body, None), (headers, None), (include_dirs, None), (lang, c)

 
Module: numpy.distutils.command.config_compiler-------------------------------------------------
    
   +Class: Command
          +  _ensure_tested_string(self, option, tester, what, error_fmt, default)
        	  	  Default_Args:(default, None)
          +  spawn(self, cmd, search_path, level)
        	  	  Default_Args:(search_path, 1), (level, 1)
          +  ensure_finalized(self)
          +  __init__(self, dist)
          +  initialize_options(self)
          +  dump_options(self, header, indent)
        	  	  Default_Args:(header, None), (indent, )
          +  __getattr__(self, attr)
          +  get_sub_commands(self)
          +  copy_tree(self, infile, outfile, preserve_mode, preserve_times, preserve_symlinks, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (preserve_symlinks, 0), (level, 1)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  run_command(self, command)
          +  set_undefined_options(self, src_cmd)
        	   Positional_Args: option_pairs
          +  run(self)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  copy_file(self, infile, outfile, preserve_mode, preserve_times, link, level)
        	  	  Default_Args:(preserve_mode, 1), (preserve_times, 1), (link, None), (level, 1)
          +  warn(self, msg)
          +  ensure_dirname(self, option)
          +  move_file(self, src, dst, level)
        	  	  Default_Args:(level, 1)
          +  ensure_string_list(self, option)
          +  _ensure_stringlike(self, option, what, default)
        	  	  Default_Args:(default, None)
          +  get_finalized_command(self, command, create)
        	  	  Default_Args:(create, 1)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  ensure_string(self, option, default)
        	  	  Default_Args:(default, None)
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  make_archive(self, base_name, format, root_dir, base_dir, owner, group)
        	  	  Default_Args:(root_dir, None), (base_dir, None), (owner, None), (group, None)
          +  get_command_name(self)
          +  make_file(self, infiles, outfile, func, args, exec_msg, skip_msg, level)
        	  	  Default_Args:(exec_msg, None), (skip_msg, None), (level, 1)
          +  finalize_options(self)
          +  ensure_filename(self, option)
          +  debug_print(self, msg)
    
   +Class: config_cc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
    
   +Class: config_fc
          +  run(self)
          +  initialize_options(self)
          +  finalize_options(self)
      +Func: show_fortran_compilers(_cache)
    	  	  Default_Args:(_cache, )

 
Module: numpy.distutils.command.develop-------------------------------------------------
    
   +Class: develop
          +  install_for_development(self)
    
   +Class: develop
          +  install_for_development(self)
          +  run(self)
          +  initialize_options(self)
          +  install_egg_scripts(self, dist)
          +  uninstall_link(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.egg_info-------------------------------------------------
    
   +Class: egg_info
          +  run(self)
          +  initialize_options(self)
          +  save_version_info(self, filename)
          +  tags(self)
          +  check_broken_egg_info(self)
          +  tagged_version(self)
          +  write_or_delete_file(self, what, filename, data, force)
        	  	  Default_Args:(force, False)
          +  delete_file(self, filename)
          +  find_sources(self)
          +  write_file(self, what, filename, data)
          +  finalize_options(self)
    
   +Class: egg_info
          +  run(self)

 
Module: numpy.distutils.command.install-------------------------------------------------
    
   +Class: install
          +  setuptools_run(self)
          +  run(self)
          +  finalize_options(self)
    
   +Class: install
          +  handle_extra_path(self)
          +  initialize_options(self)
          +  do_egg_install(self)
          +  run(self)
          +  finalize_options(self)
      +Func: write_file(filename, contents)

 
Module: numpy.distutils.command.install_clib-------------------------------------------------
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
    
   +Class: install_clib
          +  run(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)
      +Func: new_compiler(plat, compiler, verbose, dry_run, force)
    	  	  Default_Args:(plat, None), (compiler, None), (verbose, 0), (dry_run, 0), (force, 0)

 
Module: numpy.distutils.command.install_data-------------------------------------------------
    
   +Class: install_data
          +  finalize_options(self)
          +  run(self)
    
   +Class: install_data
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.install_headers-------------------------------------------------
    
   +Class: install_headers
          +  run(self)
    
   +Class: install_headers
          +  run(self)
          +  get_inputs(self)
          +  initialize_options(self)
          +  get_outputs(self)
          +  finalize_options(self)

 
Module: numpy.distutils.command.sdist-------------------------------------------------
      +Func: get_data_files(data)
    
   +Class: sdist
          +  make_release_tree(self, base_dir, files)
          +  check_readme(self)
          +  run(self)
          +  _manifest_is_not_generated(self)
          +  read_manifest(self)
          +  add_defaults(self)
          +  __read_template_hack(self)
    
   +Class: sdist
          +  add_defaults(self)

 
Module: numpy.distutils.compat-------------------------------------------------

 
Module: numpy.distutils.conv_template-------------------------------------------------
      +Func: paren_repl(obj)
      +Func: parse_loop_header(loophead)
      +Func: parse_string(astr, env, level, line)
      +Func: parse_structure(astr, level)
      +Func: parse_values(astr)
      +Func: process_file(source)
      +Func: process_str(astr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.core-------------------------------------------------
    
   +Class: CCompilerError
        (No members)
    
   +Class: Command
          +  __init__(self, dist)
        	   Keyword_Args: kw
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
        	   Keyword_Args: kw
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: DistutilsArgError
        (No members)
    
   +Class: DistutilsError
        (No members)
    
   +Class: DistutilsSetupError
        (No members)
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
    
   +Class: PyPIRCCommand
          +  initialize_options(self)
          +  _store_pypirc(self, username, password)
          +  finalize_options(self)
          +  _read_pypirc(self)
          +  _get_rc_file(self)
      +Func: _check_append_ext_library(libraries, lib_name, build_info)
      +Func: _check_append_library(libraries, item)
      +Func: _command_line_ok(_cache)
    	  	  Default_Args:(_cache, )
      +Func: _dict_append(d)
    	   Keyword_Args: kws
      +Func: gen_usage(script_name)
      +Func: get_data_files(data)
      +Func: get_distribution(always)
    	  	  Default_Args:(always, False)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    	   Keyword_Args: attrs
      +Func: run_setup(script_name, script_args, stop_after)
    	  	  Default_Args:(script_args, None), (stop_after, run)
    	   Keyword_Args: attr

 
Module: numpy.distutils.cpuinfo-------------------------------------------------
    
   +Class: CPUInfoBase
          +  _is_64bit(self)
          +  _getNCPUs(self)
          +  __getattr__(self, name)
          +  _try_call(self, func)
          +  __get_nbits(self)
          +  _is_32bit(self)
    
   +Class: DarwinCPUInfo
          +  _is_ppc604e(self)
          +  _is_ppc860(self)
          +  _is_ppc801(self)
          +  _is_ppc603e(self)
          +  __machine(self, n)
          +  _is_Power_Macintosh(self)
          +  _is_ppc7400(self)
          +  _is_ppc7450(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ppc505(self)
          +  _is_ppc(self)
          +  _getNCPUs(self)
          +  _is_ppc620(self)
          +  _is_i386(self)
          +  _is_ppc602(self)
          +  _is_ppc601(self)
          +  _is_ppc750(self)
          +  _is_ppc740(self)
          +  _is_ppc604(self)
          +  _is_ppc603(self)
          +  _is_ppc630(self)
          +  _is_ppc403(self)
          +  _is_ppc823(self)
          +  _is_ppc821(self)
    
   +Class: IRIXCPUInfo
          +  _is_r4600(self)
          +  _is_IP22_4k(self)
          +  _is_r4400(self)
          +  _is_r8000(self)
          +  _is_r4300(self)
          +  _is_r12000(self)
          +  __init__(self)
          +  _is_IP27(self)
          +  _is_IP26(self)
          +  _is_IP25(self)
          +  _is_IP24(self)
          +  _getNCPUs(self)
          +  _is_IP21(self)
          +  _is_r10000(self)
          +  _is_r6000(self)
          +  _is_IP28(self)
          +  _is_rorion(self)
          +  _is_r2000(self)
          +  _is_r4650(self)
          +  _not_impl(self)
          +  _is_r3000(self)
          +  _is_IP32_5k(self)
          +  __machine(self, n)
          +  get_ip(self)
          +  _is_r4100(self)
          +  _is_r3900(self)
          +  _is_r4000(self)
          +  _is_IP19(self)
          +  _is_IP22_5k(self)
          +  _is_r5000(self)
          +  _is_IP22(self)
          +  __cputype(self, n)
          +  _is_IP30(self)
          +  _is_IP32(self)
          +  _is_IP32_10k(self)
          +  _is_IP20(self)
          +  _is_singleCPU(self)
    
   +Class: LinuxCPUInfo
          +  _is_Itanium(self)
          +  _is_Intel(self)
          +  _is_AthlonK7(self)
          +  _is_AthlonK6(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_sse3(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _is_Opteron(self)
          +  _getNCPUs(self)
          +  _not_impl(self)
          +  _is_Nocona(self)
          +  _is_Core2(self)
          +  _has_ssse3(self)
          +  _is_Athlon64(self)
          +  _is_EV56(self)
          +  _has_f00f_bug(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _is_XEON(self)
          +  _is_Prescott(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_i486(self)
          +  _is_AMD(self)
          +  _is_Alpha(self)
          +  _has_fdiv_bug(self)
          +  _is_PentiumII(self)
          +  _not_impl(self)
          +  _is_EV4(self)
          +  _is_Celeron(self)
          +  _is_XEON(self)
          +  _is_AthlonMP(self)
          +  _is_Pentium(self)
          +  _is_AthlonK6_2(self)
          +  _is_AthlonK6_3(self)
          +  _has_3dnowext(self)
          +  _is_EV5(self)
          +  _is_Hammer(self)
          +  _is_PCA56(self)
          +  _is_AthlonHX(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
    
   +Class: SunOSCPUInfo
          +  _is_ultra(self)
          +  _is_ultraenterprice(self)
          +  _is_sunfire(self)
          +  _is_ultra1(self)
          +  _is_ultra5_10(self)
          +  _is_sparc(self)
          +  _is_ultra80(self)
          +  _not_impl(self)
          +  __init__(self)
          +  _is_ultra2(self)
          +  _getNCPUs(self)
          +  _is_ultra4(self)
          +  _is_ultra5(self)
          +  _is_i386(self)
          +  _is_sparcstation5(self)
          +  _is_ultra250(self)
          +  _is_ultra60(self)
          +  _is_ultraenterprice10k(self)
          +  _is_cpusparcv9(self)
          +  _is_cpusparcv8(self)
          +  _is_cpusparcv7(self)
          +  _is_ultra30(self)
          +  _is_sun4(self)
          +  _is_sparcv9(self)
          +  _is_SUNW(self)
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: command_by_line(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: command_info(successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
    	   Keyword_Args: kw
    
   +Class: Win32CPUInfo
          +  _is_AMDK5(self)
          +  _is_AMDK6_2(self)
          +  _is_Am486(self)
          +  _is_AMDK6(self)
          +  _has_3dnowext(self)
          +  _is_AMDK7(self)
          +  _is_i686(self)
          +  _has_sse2(self)
          +  _has_mmx(self)
          +  _is_singleCPU(self)
          +  __init__(self)
          +  _is_PentiumMMX(self)
          +  _getNCPUs(self)
          +  _is_i386(self)
          +  _is_Pentium(self)
          +  _is_Core2(self)
          +  _is_Am5x86(self)
          +  _is_AMDK6_3(self)
          +  _not_impl(self)
          +  _is_AMD64(self)
          +  _has_3dnow(self)
          +  _is_PentiumPro(self)
          +  _has_sse(self)
          +  _is_PentiumIV(self)
          +  _is_PentiumIII(self)
          +  _is_Intel(self)
          +  _is_PentiumII(self)
          +  _is_AMD(self)
          +  _is_i486(self)
          +  _is_PentiumM(self)
          +  _is_i586(self)
      +Func: getoutput(cmd, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)
      +Func: getstatusoutput(cmd)
      +Func: key_value_from_command(cmd, sep, successful_status, stacklevel)
    	  	  Default_Args:(successful_status, (0,)), (stacklevel, 1)

 
Module: numpy.distutils.environment-------------------------------------------------
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: type

 
Module: numpy.distutils.exec_command-------------------------------------------------
      +Func: _exec_command(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_posix(command, use_shell, use_tee)
    	  	  Default_Args:(use_shell, None), (use_tee, None)
    	   Keyword_Args: env
      +Func: _exec_command_python(command, exec_command_dir)
    	  	  Default_Args:(exec_command_dir, )
    	   Keyword_Args: env
      +Func: _preserve_environment(names)
      +Func: _supports_fileno(stream)
    	   Keyword_Args: env
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: is_sequence(seq)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: open_latin1(filename, mode)
    	  	  Default_Args:(mode, r)
      +Func: quote_arg(arg)
      +Func: splitcmdline(line)
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws
    	   Keyword_Args: kws

 
Module: numpy.distutils.extension-------------------------------------------------
    
   +Class: Extension
          +  has_cxx_sources(self)
          +  __init__(self, name, sources, include_dirs, define_macros, undef_macros, library_dirs, libraries, runtime_library_dirs, extra_objects, extra_compile_args, extra_link_args, export_symbols, swig_opts, depends, language, f2py_options, module_dirs, extra_f77_compile_args, extra_f90_compile_args)
        	  	  Default_Args:(include_dirs, None), (define_macros, None), (undef_macros, None), (library_dirs, None), (libraries, None), (runtime_library_dirs, None), (extra_objects, None), (extra_compile_args, None), (extra_link_args, None), (export_symbols, None), (swig_opts, None), (depends, None), (language, None), (f2py_options, None), (module_dirs, None), (extra_f77_compile_args, None), (extra_f90_compile_args, None)
          +  has_f2py_sources(self)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    
   +Class: Extension
          +  _convert_pyx_sources_to_lang(self)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw

 
Module: numpy.distutils.fcompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: CompilerNotFound
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: DistutilsModuleError
        (No members)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: EnvironmentConfig
          +  dump_variable(self, name)
          +  get(self, name, default)
        	  	  Default_Args:(default, None)
          +  clone(self, hook_handler)
          +  __getattr__(self, name)
          +  use_distribution(self, dist)
          +  _get_var(self, name, conf_desc)
          +  dump_variables(self)
          +  __init__(self, distutils_section)
        	  	  Default_Args:(distutils_section, ALL)
        	   Keyword_Args: kw
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: FancyGetopt
          +  print_help(self, header, file)
        	  	  Default_Args:(header, None), (file, None)
          +  _grok_option_table(self)
          +  has_option(self, long_option)
          +  generate_help(self, header)
        	  	  Default_Args:(header, None)
          +  get_attr_name(self, long_option)
          +  _check_alias_dict(self, aliases, what)
          +  get_option_order(self)
          +  set_option_table(self, option_table)
          +  _build_index(self)
          +  add_option(self, long_option, short_option, help_string)
        	  	  Default_Args:(short_option, None), (help_string, None)
          +  set_aliases(self, alias)
          +  getopt(self, args, object)
        	  	  Default_Args:(args, None), (object, None)
          +  set_negative_aliases(self, negative_alias)
          +  __init__(self, option_table)
        	  	  Default_Args:(option_table, None)
    
   +Class: LinkError
        (No members)
    
   +Class: type

 
Module: numpy.distutils.fcompiler.absoft-------------------------------------------------
    
   +Class: AbsoftFCompiler
          +  get_library_dirs(self)
          +  get_flags_fix(self)
          +  get_flags(self)
          +  update_executables(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags_f77(self)
          +  get_libraries(self)
          +  library_dir_option(self, dir)
          +  get_flags_f90(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
      +Func: cyg2win32(path)

 
Module: numpy.distutils.fcompiler.compaq-------------------------------------------------
    
   +Class: CompaqFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)
    
   +Class: CompaqVisualFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags(self)
          +  get_flags_arch(self)
    
   +Class: DistutilsPlatformError
        (No members)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)

 
Module: numpy.distutils.fcompiler.g95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: G95FCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.gnu-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: Gnu95FCompiler
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  _universal_flags(self, cmd)
          +  version_match(self, version_string)
          +  get_flags_opt(self)
          +  get_target(self)
          +  get_libraries(self)
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: Popen
          +  _make_inheritable(self, handle)
          +  __del__(self, _maxint)
        	  	  Default_Args:(_maxint, 2147483647)
          +  communicate(self, input)
        	  	  Default_Args:(input, None)
          +  terminate(self)
          +  _readerthread(self, fh, buffer)
          +  terminate(self)
          +  _internal_poll(self, _deadstate, _WaitForSingleObject, _WAIT_OBJECT_0, _GetExitCodeProcess)
        	  	  Default_Args:(_deadstate, None), (_WaitForSingleObject, <built-in function WaitForSingleObject>), (_WAIT_OBJECT_0, 0), (_GetExitCodeProcess, <built-in function GetExitCodeProcess>)
          +  _get_handles(self, stdin, stdout, stderr)
          +  _execute_child(self, args, executable, preexec_fn, close_fds, cwd, env, universal_newlines, startupinfo, creationflags, shell, to_close, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite)
          +  poll(self)
          +  __init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags)
        	  	  Default_Args:(bufsize, 0), (executable, None), (stdin, None), (stdout, None), (stderr, None), (preexec_fn, None), (close_fds, False), (shell, False), (cwd, None), (env, None), (universal_newlines, False), (startupinfo, None), (creationflags, 0)
          +  wait(self)
          +  _find_w9xpopen(self)
          +  _translate_newlines(self, data)
          +  _communicate(self, input)
          +  send_signal(self, sig)
      +Func: _can_target(cmd, arch)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env

 
Module: numpy.distutils.fcompiler.hpux-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: HPUXFCompiler
          +  get_library_dirs(self)
          +  get_flags(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, 0), (ok_status, 256, 0, 1)
          +  get_flags_opt(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.ibm-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IBMFCompiler
          +  get_flags(self)
          +  get_version(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)

 
Module: numpy.distutils.fcompiler.intel-------------------------------------------------
    
   +Class: BaseIntelFCompiler
          +  update_executables(self)
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: IntelEM64TFCompiler
          +  get_flags_opt(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelEM64VisualFCompiler
          +  matcher(self, version_string)
          +  get_flags_arch(self)
    
   +Class: IntelFCompiler
          +  get_flags_opt(self)
          +  get_flags_linker_so(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_free(self)
          +  get_flags_arch(self)
    
   +Class: IntelItaniumFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelItaniumVisualFCompiler
          +  matcher(self, version_string)
    
   +Class: IntelVisualFCompiler
          +  update_executables(self)
          +  get_flags(self)
          +  matcher(self, version_string)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_free(self)
          +  get_flags_debug(self)
      +Func: intel_version_match(type)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.lahey-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: LaheyFCompiler
          +  get_library_dirs(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_libraries(self)

 
Module: numpy.distutils.fcompiler.mips-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: MIPSFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_arch(self)
          +  get_flags_arch_f77(self)
          +  get_flags_arch_f90(self)

 
Module: numpy.distutils.fcompiler.nag-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NAGFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)
          +  get_flags_linker_so(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.fcompiler.none-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: NoneFCompiler
          +  find_executables(self)

 
Module: numpy.distutils.fcompiler.pathf95-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PathScaleFCompiler
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.pg-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: PGroupFCompiler
          +  get_flags(self)
          +  get_flags_opt(self)
          +  get_flags_debug(self)

 
Module: numpy.distutils.fcompiler.sun-------------------------------------------------
    
   +Class: FCompiler
          +  get_flags_linker_exe(self)
          +  get_flags_arch(self)
          +  get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  update_executables(elf)
          +  get_flags_debug(self)
          +  get_flags_opt(self)
          +  customize(self, dist)
        	  	  Default_Args:(dist, None)
          +  get_flags_arch(self)
          +  get_library_dirs(self)
          +  library_option(self, lib)
          +  get_flags_opt(self)
          +  get_flags_opt(self)
          +  module_options(self, module_dirs, module_build_dir)
          +  _get_command_flags(self, key)
          +  __init__(self)
        	   Positional_Args: args
        	   Keyword_Args: kw
          +  copy(self)
          +  get_flags(self)
          +  get_flags_ar(self)
          +  _command_property(key)
          +  get_flags_debug(self)
          +  get_flags_fix(self)
          +  dump_properties(self)
          +  get_flags_f90(self)
          +  _environment_hook(self, name, hook_name)
          +  get_flags_f77(self)
          +  set_executable(self, key, value)
          +  get_flags_free(self)
          +  find_executables(self)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  get_flags_arch(self)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  get_flags_debug(self)
          +  set_commands(self)
        	   Keyword_Args: kw
          +  library_dir_option(self, dir)
          +  get_flags_linker_so(self)
          +  __copy__(self)
          +  get_libraries(self)
          +  set_command(self, key, value)
    
   +Class: SunFCompiler
          +  get_arch(self)
          +  get_flags_f77(self)
          +  matcher(self, version_string)
          +  get_libraries(self)
          +  get_opt(self)
      +Func: simple_version_match(pat, ignore, start)
    	  	  Default_Args:(pat, -.\\d+), (ignore, ), (start, )

 
Module: numpy.distutils.fcompiler.vast-------------------------------------------------
    
   +Class: GnuFCompiler
          +  get_flags_debug(self)
          +  get_flags_arch(self)
          +  runtime_library_dir_option(self, dir)
          +  get_libgcc_dir(self)
          +  get_flags_opt(self)
          +  gnu_version_match(self, version_string)
          +  get_library_dirs(self)
          +  get_flags_linker_so(self)
          +  version_match(self, version_string)
          +  _c_arch_flags(self)
          +  get_libraries(self)
    
   +Class: VastFCompiler
          +  find_executables(self)
          +  get_version_cmd(self)
          +  get_flags_arch(self)

 
Module: numpy.distutils.from_template-------------------------------------------------
      +Func: conv(astr)
      +Func: expand_sub(substr, names)
      +Func: find_repl_patterns(astr)
      +Func: parse_structure(astr)
      +Func: process_file(source)
      +Func: process_str(allstr)
      +Func: resolve_includes(source)
      +Func: unique_key(adict)

 
Module: numpy.distutils.info-------------------------------------------------
    (No members)

 
Module: numpy.distutils.intelccompiler-------------------------------------------------
    
   +Class: IntelCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelEM64TCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: IntelItaniumCCompiler
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})

 
Module: numpy.distutils.lib2def-------------------------------------------------
      +Func: getnm(nm_cmd)
    	  	  Default_Args:(nm_cmd, nm, -Cs, python27.lib)
      +Func: output_def(dlist, flist, header, file)
    	  	  Default_Args:(file, <IPython.kernel.zmq.iostream.OutStream object at 0x0000000019534358>)
      +Func: parse_nm(nm_output)

 
Module: numpy.distutils.line_endings-------------------------------------------------
      +Func: dos2unix(file)
      +Func: dos2unix_dir(dir_name)
      +Func: dos2unix_one_dir(modified_files, dir_name, file_names)
      +Func: unix2dos(file)
      +Func: unix2dos_dir(dir_name)
      +Func: unix2dos_one_dir(modified_files, dir_name, file_names)

 
Module: numpy.distutils.log-------------------------------------------------
    
   +Class: Log
          +  good(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
      +Func: _fix_args(args, flag)
    	  	  Default_Args:(flag, 1)
      +Func: cyan_text(s)
      +Func: debug(self, msg)
    	   Positional_Args: args
      +Func: default_text(s)
      +Func: error(self, msg)
    	   Positional_Args: args
      +Func: fatal(self, msg)
    	   Positional_Args: args
      +Func: good(self, msg)
    	   Positional_Args: args
      +Func: green_text(s)
      +Func: info(self, msg)
    	   Positional_Args: args
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: log(self, level, msg)
    	   Positional_Args: args
    
   +Class: Log
          +  info(self, msg)
        	   Positional_Args: args
          +  log(self, level, msg)
        	   Positional_Args: args
          +  error(self, msg)
        	   Positional_Args: args
          +  warn(self, msg)
        	   Positional_Args: args
          +  _log(self, level, msg, args)
          +  debug(self, msg)
        	   Positional_Args: args
          +  fatal(self, msg)
        	   Positional_Args: args
          +  __init__(self, threshold)
        	  	  Default_Args:(threshold, 3)
      +Func: red_text(s)
      +Func: set_threshold(level, force)
    	  	  Default_Args:(force, False)
      +Func: set_verbosity(v, force)
    	  	  Default_Args:(force, False)
      +Func: warn(self, msg)
    	   Positional_Args: args

 
Module: numpy.distutils.mingw32ccompiler-------------------------------------------------
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: Mingw32CCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
    
   +Class: StrictVersion
          +  __str__(self)
          +  __cmp__(self, other)
          +  parse(self, vstring)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
    
   +Class: UnknownFileError
        (No members)
      +Func: build_msvcr_library(debug)
    	  	  Default_Args:(debug, False)
      +Func: check_embedded_msvcr_match_linked(msver)
      +Func: configtest_name(config)
      +Func: dump_table(dll)
      +Func: find_dll(dll_name)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: generate_def(dll, dfile)
      +Func: generate_manifest(config)
      +Func: manifest_name(config)
      +Func: manifest_rc(name, type)
    	  	  Default_Args:(type, dll)
      +Func: msvc_manifest_xml(maj, min)
      +Func: rc_name(config)

 
Module: numpy.distutils.misc_util-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
    
   +Class: DistutilsError
        (No members)
    
   +Class: InstallableLib
          +  __init__(self, name, build_info, target_dir)
      +Func: _fix_paths(paths, local_path, include_non_existing)
      +Func: _get_directories(list_of_sources)
      +Func: _get_f90_modules(source)
      +Func: _get_headers(directory_list)
      +Func: all_strings(lst)
      +Func: allpath(name)
      +Func: appendpath(prefix, path)
      +Func: as_list(seq)
      +Func: blue_text(s)
      +Func: colour_text(s, fg, bg)
    	  	  Default_Args:(fg, None), (bg, None)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: cyan_text(s)
      +Func: cyg2win32(path)
      +Func: default_config_dict(name, parent_name, local_path)
    	  	  Default_Args:(name, None), (parent_name, None), (local_path, None)
      +Func: default_text(s)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    	   Positional_Args: args
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: filter_sources(sources)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: general_source_directories_files(top_path)
      +Func: general_source_files(top_path)
      +Func: generate_config_py(target)
      +Func: get_cmd(cmdname, _cache)
    	  	  Default_Args:(_cache, {})
      +Func: get_data_files(data)
      +Func: get_dependencies(sources)
      +Func: get_ext_source_files(ext)
      +Func: get_frame(level)
    	  	  Default_Args:(level, 0)
      +Func: get_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_language(sources)
      +Func: get_lib_source_files(lib)
      +Func: get_mathlibs(path)
    	  	  Default_Args:(path, None)
      +Func: get_path_from_frame(frame, parent_path)
    	  	  Default_Args:(parent_path, None)
      +Func: get_pkg_info(pkgname, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: get_script_files(scripts)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: gpaths(paths, local_path, include_non_existing)
    	  	  Default_Args:(local_path, ), (include_non_existing, True)
      +Func: green_text(s)
      +Func: has_cxx_sources(sources)
      +Func: has_f_sources(sources)
      +Func: is_glob_pattern(s)
      +Func: is_local_src_dir(directory)
      +Func: is_sequence(seq)
      +Func: is_string(s)
      +Func: make_temp_file(suffix, prefix, text)
    	  	  Default_Args:(suffix, ), (prefix, ), (text, True)
      +Func: minrelpath(path)
      +Func: msvc_version(compiler)
    	   Positional_Args: path
      +Func: quote_args(args)
      +Func: red_text(s)
      +Func: rel_path(path, parent_path)
      +Func: yellow_text(s)

 
Module: numpy.distutils.npy_pkg_config-------------------------------------------------
    
   +Class: FormatError
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: LibraryInfo
          +  cflags(self, section)
        	  	  Default_Args:(section, default)
          +  libs(self, section)
        	  	  Default_Args:(section, default)
          +  __str__(self)
          +  sections(self)
          +  __init__(self, name, description, version, sections, vars, requires)
        	  	  Default_Args:(requires, None)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: PkgNotFound
          +  __str__(self)
          +  __init__(self, msg)
    
   +Class: SafeConfigParser
          +  set(self, section, option, value)
        	  	  Default_Args:(value, None)
          +  _interpolate_some(self, option, accum, rest, section, map, depth)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: VariableSet
          +  _init_parse_var(self, name, value)
          +  __getitem__(self, name)
          +  variables(self)
          +  _init_parse(self)
          +  interpolate(self, value)
          +  __setitem__(self, name, value)
          +  __init__(self, d)
      +Func: _escape_backslash(val)
      +Func: _read_config_imp(filenames, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_config(filename, dirs)
    	  	  Default_Args:(dirs, None)
      +Func: parse_flags(line)
      +Func: parse_meta(config)
      +Func: parse_sections(config)
      +Func: parse_variables(config)
      +Func: pkg_to_filename(pkg_name)
      +Func: read_config(pkgname, dirs)
    	  	  Default_Args:(dirs, None)

 
Module: numpy.distutils.numpy_distribution-------------------------------------------------
    
   +Class: Distribution
          +  _exclude_packages(self, packages)
          +  patch_missing_pkg_info(self, attrs)
          +  parse_command_line(self)
          +  _finalize_features(self)
          +  exclude(self)
        	   Keyword_Args: attrs
          +  include_feature(self, name)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  iter_distribution_names(self)
          +  has_contents_for(self, package)
          +  feature_is_included(self, name)
          +  _set_feature(self, name, status)
          +  _include_misc(self, name, value)
          +  exclude_package(self, package)
          +  include(self)
        	   Keyword_Args: attrs
          +  get_command_class(self, command)
          +  _parse_command_opts(self, parser, args)
          +  _exclude_misc(self, name, value)
          +  handle_display_options(self, option_order)
          +  fetch_build_eggs(self, requires)
          +  get_cmdline_options(self)
          +  print_commands(self)
          +  get_egg_cache_dir(self)
          +  _feature_attrname(self, name)
          +  fetch_build_egg(self, req)
          +  _set_global_opts_from_features(self)
          +  finalize_options(self)
    
   +Class: NumpyDistribution
          +  has_scons_scripts(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)

 
Module: numpy.distutils.pathccompiler-------------------------------------------------
    
   +Class: PathScaleCCompiler
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)

 
Module: numpy.distutils.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.distutils.system_info-------------------------------------------------
    
   +Class: AtlasNotFoundError
        (No members)
    
   +Class: BlasNotFoundError
        (No members)
    
   +Class: BlasSrcNotFoundError
        (No members)
    
   +Class: ConfigParser
          +  get(self, section, option, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolation_replace(self, match)
          +  items(self, section, raw, vars)
        	  	  Default_Args:(raw, False), (vars, None)
          +  _interpolate(self, section, option, rawval, vars)
    
   +Class: DJBFFTNotFoundError
        (No members)
    
   +Class: Distribution
          +  parse_command_line(self)
          +  has_modules(self)
          +  __init__(self, attrs)
        	  	  Default_Args:(attrs, None)
          +  run_commands(self)
          +  has_headers(self)
          +  parse_config_files(self, filenames)
        	  	  Default_Args:(filenames, None)
          +  _get_toplevel_options(self)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 2)
          +  get_command_packages(self)
          +  _set_command_options(self, command_obj, option_dict)
        	  	  Default_Args:(option_dict, None)
          +  reinitialize_command(self, command, reinit_subcommands)
        	  	  Default_Args:(reinit_subcommands, 0)
          +  _parse_command_opts(self, parser, args)
          +  has_pure_modules(self)
          +  handle_display_options(self, option_order)
          +  find_config_files(self)
          +  has_ext_modules(self)
          +  is_pure(self)
          +  dump_option_dicts(self, header, commands, indent)
        	  	  Default_Args:(header, None), (commands, None), (indent, )
          +  print_commands(self)
          +  get_command_obj(self, command, create)
        	  	  Default_Args:(create, 1)
          +  get_command_list(self)
          +  _show_help(self, parser, global_options, display_options, commands)
        	  	  Default_Args:(global_options, 1), (display_options, 1), (commands, )
          +  has_data_files(self)
          +  has_scripts(self)
          +  print_command_list(self, commands, header, max_length)
          +  has_c_libraries(self)
          +  get_command_class(self, command)
          +  finalize_options(self)
          +  get_option_dict(self, command)
          +  run_command(self, command)
    
   +Class: DistutilsError
        (No members)
    
   +Class: FFTWNotFoundError
        (No members)
    
   +Class: LapackNotFoundError
        (No members)
    
   +Class: LapackSrcNotFoundError
        (No members)
    
   +Class: NoOptionError
          +  __init__(self, option, section)
    
   +Class: NotFoundError
        (No members)
    
   +Class: NumericNotFoundError
        (No members)
    
   +Class: Numeric_info
        (No members)
    
   +Class: UmfpackNotFoundError
        (No members)
    
   +Class: X11NotFoundError
        (No members)
    
   +Class: _numpy_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: _pkg_config_info
          +  calc_info(self)
          +  get_config_exe(self)
          +  get_config_output(self, config_exe, option)
    
   +Class: agg2_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: amd_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_info
          +  calc_info(self)
    
   +Class: atlas_3_10_blas_threads_info
        (No members)
    
   +Class: atlas_3_10_info
        (No members)
    
   +Class: atlas_3_10_threads_info
        (No members)
    
   +Class: atlas_blas_info
          +  calc_info(self)
    
   +Class: atlas_blas_threads_info
        (No members)
    
   +Class: atlas_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: atlas_threads_info
        (No members)
    
   +Class: blas_info
          +  calc_info(self)
    
   +Class: blas_mkl_info
        (No members)
    
   +Class: blas_opt_info
          +  calc_info(self)
    
   +Class: blas_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: boost_python_info
          +  get_paths(self, section, key)
          +  calc_info(self)
    
   +Class: config
          +  check_inline(self)
          +  _wrap_method(self, mth, lang, args)
          +  initialize_options(self)
          +  _check_compiler(self)
          +  get_output(self, body, headers, include_dirs, libraries, library_dirs, lang, use_tee)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c), (use_tee, None)
          +  check_func(self, func, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_macro_true(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  _link(self, body, headers, include_dirs, libraries, library_dirs, lang)
          +  check_funcs_once(self, funcs, headers, include_dirs, libraries, library_dirs, decl, call, call_args)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (decl, False), (call, False), (call_args, None)
          +  check_type_size(self, type_name, headers, include_dirs, library_dirs, expected)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None), (expected, None)
          +  check_decl(self, symbol, headers, include_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None)
          +  try_run(self, body, headers, include_dirs, libraries, library_dirs, lang)
        	  	  Default_Args:(headers, None), (include_dirs, None), (libraries, None), (library_dirs, None), (lang, c)
          +  check_compiler_gcc4(self)
          +  _compile(self, body, headers, include_dirs, lang)
          +  check_header(self, header, include_dirs, library_dirs, lang)
        	  	  Default_Args:(include_dirs, None), (library_dirs, None), (lang, c)
          +  check_type(self, type_name, headers, include_dirs, library_dirs)
        	  	  Default_Args:(headers, None), (include_dirs, None), (library_dirs, None)
    	   Positional_Args: args
    	   Keyword_Args: kws
    
   +Class: dfftw_info
        (No members)
    
   +Class: dfftw_threads_info
        (No members)
      +Func: dict_append(d)
    	   Keyword_Args: kws
    
   +Class: djbfft_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: exec_command(command, execute_in, use_shell, use_tee, _with_python)
    	  	  Default_Args:(execute_in, ), (use_shell, None), (use_tee, None), (_with_python, 1)
    	   Keyword_Args: env
    
   +Class: f2py_info
          +  calc_info(self)
    
   +Class: fft_opt_info
          +  calc_info(self)
    
   +Class: fftw2_info
        (No members)
    
   +Class: fftw3_info
        (No members)
    
   +Class: fftw_info
          +  calc_ver_info(self, ver_param)
          +  calc_info(self)
    
   +Class: fftw_threads_info
        (No members)
      +Func: find_executable(exe, path, _cache)
    	  	  Default_Args:(path, None), (_cache, {})
    
   +Class: freetype2_info
        (No members)
    
   +Class: gdk_2_info
        (No members)
    
   +Class: gdk_info
        (No members)
    
   +Class: gdk_pixbuf_2_info
        (No members)
    
   +Class: gdk_pixbuf_xlib_2_info
        (No members)
    
   +Class: gdk_x11_2_info
        (No members)
    	   Keyword_Args: config
      +Func: get_info(name, notfound_action)
    	  	  Default_Args:(notfound_action, 0)
      +Func: get_shared_lib_extension(is_python_ext)
    	  	  Default_Args:(is_python_ext, False)
      +Func: get_standard_file(fname)
      +Func: glob(pathname)
    
   +Class: gtkp_2_info
        (No members)
    
   +Class: gtkp_x11_2_info
        (No members)
      +Func: is_sequence(seq)
      +Func: is_string(s)
    
   +Class: lapack_atlas_3_10_info
        (No members)
    
   +Class: lapack_atlas_3_10_threads_info
        (No members)
    
   +Class: lapack_atlas_info
        (No members)
    
   +Class: lapack_atlas_threads_info
        (No members)
    
   +Class: lapack_info
          +  calc_info(self)
    
   +Class: lapack_mkl_info
          +  calc_info(self)
    
   +Class: lapack_opt_info
          +  calc_info(self)
    
   +Class: lapack_src_info
          +  get_paths(self, section, key)
          +  calc_info(self)
      +Func: libpaths(paths, bits)
    
   +Class: mkl_info
          +  calc_info(self)
          +  get_mkl_rootdir(self)
          +  __init__(self)
    
   +Class: numarray_info
        (No members)
    
   +Class: numerix_info
          +  calc_info(self)
    
   +Class: numpy_info
        (No members)
    
   +Class: openblas_info
          +  calc_info(self)
          +  check_embedded_lapack(self, info)
    
   +Class: openblas_lapack_info
          +  check_embedded_lapack(self, info)
      +Func: parseCmdLine(argv)
    	  	  Default_Args:(argv, (None,))
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
    
   +Class: sfftw_info
        (No members)
    
   +Class: sfftw_threads_info
        (No members)
      +Func: show_all(argv)
    	  	  Default_Args:(argv, None)
    
   +Class: system_info
          +  get_lib_dirs(self, key)
        	  	  Default_Args:(key, library_dirs)
          +  check_libs(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  has_info(self)
          +  get_info(self, notfound_action)
        	  	  Default_Args:(notfound_action, 0)
          +  get_libs(self, key, default)
          +  __init__(self, default_lib_dirs, default_include_dirs, verbosity)
        	  	  Default_Args:(default_lib_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib, C:\\, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\libs), (default_include_dirs, D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\include), (verbosity, 1)
          +  combine_paths(self)
        	   Positional_Args: args
          +  _lib_list(self, lib_dir, libs, exts)
          +  _check_libs(self, lib_dirs, libs, opt_libs, exts)
          +  parse_config_files(self)
          +  get_include_dirs(self, key)
        	  	  Default_Args:(key, include_dirs)
          +  get_paths(self, section, key)
          +  check_libs2(self, lib_dirs, libs, opt_libs)
        	  	  Default_Args:(opt_libs, )
          +  get_libraries(self, key)
        	  	  Default_Args:(key, libraries)
          +  library_extensions(self)
          +  set_info(self)
        	   Keyword_Args: info
          +  calc_libraries_info(self)
          +  get_src_dirs(self, key)
        	  	  Default_Args:(key, src_dirs)
    
   +Class: umfpack_info
          +  calc_info(self)
    
   +Class: wx_info
        (No members)
    
   +Class: x11_info
          +  calc_info(self)
          +  __init__(self)
    
   +Class: xft_info
        (No members)

 
Module: numpy.distutils.unixccompiler-------------------------------------------------
    
   +Class: CCompiler
          +  CCompiler_spawn(self, cmd, display)
        	  	  Default_Args:(display, None)
          +  runtime_library_dir_option(self, dir)
          +  set_runtime_library_dirs(self, dirs)
          +  CCompiler_cxx_compiler(self)
          +  _get_cc_args(self, pp_opts, debug, before)
          +  add_runtime_library_dir(self, dir)
          +  add_link_object(self, object)
          +  _fix_object_args(self, objects, output_dir)
          +  set_library_dirs(self, dirs)
          +  set_executables(self)
        	   Keyword_Args: args
          +  create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
          +  library_dir_option(self, dir)
          +  __init__(self, verbose, dry_run, force)
        	  	  Default_Args:(verbose, 0), (dry_run, 0), (force, 0)
          +  library_option(self, lib)
          +  add_library_dir(self, dir)
          +  define_macro(self, name, value)
        	  	  Default_Args:(value, None)
          +  library_filename(self, libname, lib_type, strip_dir, output_dir)
        	  	  Default_Args:(lib_type, static), (strip_dir, 0), (output_dir, )
          +  CCompiler_show_customization(self)
          +  _need_link(self, objects, output_file)
          +  CCompiler_get_version(self, force, ok_status)
        	  	  Default_Args:(force, False), (ok_status, 0)
          +  link_shared_lib(self, objects, output_libname, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  link_shared_object(self, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  CCompiler_customize_cmd(self, cmd, ignore)
        	  	  Default_Args:(ignore, ())
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  CCompiler_object_filenames(self, source_filenames, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  undefine_macro(self, name)
          +  set_include_dirs(self, dirs)
          +  CCompiler_customize(self, dist, need_cxx)
        	  	  Default_Args:(need_cxx, 0)
          +  _fix_compile_args(self, output_dir, macros, include_dirs)
          +  set_link_objects(self, objects)
          +  _check_macro_definitions(self, definitions)
          +  warn(self, msg)
          +  add_include_dir(self, dir)
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  announce(self, msg, level)
        	  	  Default_Args:(level, 1)
          +  set_executable(self, key, value)
          +  set_libraries(self, libnames)
          +  move_file(self, src, dst)
          +  has_function(self, funcname, includes, include_dirs, libraries, library_dirs)
        	  	  Default_Args:(includes, None), (include_dirs, None), (libraries, None), (library_dirs, None)
          +  execute(self, func, args, msg, level)
        	  	  Default_Args:(msg, None), (level, 1)
          +  executable_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  mkpath(self, name, mode)
        	  	  Default_Args:(mode, 511)
          +  link_executable(self, objects, output_progname, output_dir, libraries, library_dirs, runtime_library_dirs, debug, extra_preargs, extra_postargs, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (target_lang, None)
          +  _setup_compile(self, outdir, macros, incdirs, sources, depends, extra)
          +  _find_macro(self, name)
          +  _fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)
          +  add_library(self, libname)
          +  CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
        	  	  Default_Args:(output_dir, None), (macros, None), (include_dirs, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (depends, None)
          +  detect_language(self, sources)
          +  shared_object_filename(self, basename, strip_dir, output_dir)
        	  	  Default_Args:(strip_dir, 0), (output_dir, )
          +  debug_print(self, msg)
    
   +Class: CompileError
        (No members)
    
   +Class: DistutilsExecError
        (No members)
    
   +Class: LibError
        (No members)
    
   +Class: LinkError
        (No members)
    
   +Class: NoneType
        (No members)
    
   +Class: str
        (No members)
    
   +Class: UnixCCompiler
          +  link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)
        	  	  Default_Args:(output_dir, None), (libraries, None), (library_dirs, None), (runtime_library_dirs, None), (export_symbols, None), (debug, 0), (extra_preargs, None), (extra_postargs, None), (build_temp, None), (target_lang, None)
          +  _is_gcc(self, compiler_name)
          +  library_option(self, lib)
          +  library_dir_option(self, dir)
          +  runtime_library_dir_option(self, dir)
          +  preprocess(self, source, output_file, macros, include_dirs, extra_preargs, extra_postargs)
        	  	  Default_Args:(output_file, None), (macros, None), (include_dirs, None), (extra_preargs, None), (extra_postargs, None)
          +  UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
          +  find_library_file(self, dirs, lib, debug)
        	  	  Default_Args:(debug, 0)
          +  UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
        	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
      +Func: UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir, debug, target_lang)
    	  	  Default_Args:(output_dir, None), (debug, 0), (target_lang, None)
      +Func: gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
      +Func: gen_preprocess_options(macros, include_dirs)
      +Func: newer(source, target)
      +Func: replace_method(klass, method_name, func)

 
Module: numpy.doc-------------------------------------------------
    (No members)

 
Module: numpy.doc.basics-------------------------------------------------
    (No members)

 
Module: numpy.doc.broadcasting-------------------------------------------------
    (No members)

 
Module: numpy.doc.byteswapping-------------------------------------------------
    (No members)

 
Module: numpy.doc.constants-------------------------------------------------
    (No members)

 
Module: numpy.doc.creation-------------------------------------------------
    (No members)

 
Module: numpy.doc.glossary-------------------------------------------------
    (No members)

 
Module: numpy.doc.howtofind-------------------------------------------------
    (No members)

 
Module: numpy.doc.indexing-------------------------------------------------
    (No members)

 
Module: numpy.doc.internals-------------------------------------------------
    (No members)

 
Module: numpy.doc.io-------------------------------------------------
    (No members)

 
Module: numpy.doc.jargon-------------------------------------------------
    (No members)

 
Module: numpy.doc.methods_vs_functions-------------------------------------------------
    (No members)

 
Module: numpy.doc.misc-------------------------------------------------
    (No members)

 
Module: numpy.doc.performance-------------------------------------------------
    (No members)

 
Module: numpy.doc.structured_arrays-------------------------------------------------
    (No members)

 
Module: numpy.doc.subclassing-------------------------------------------------
    (No members)

 
Module: numpy.doc.ufuncs-------------------------------------------------
    (No members)

 
Module: numpy.dual-------------------------------------------------
      +Func: cholesky(a, lower, overwrite_a, check_finite)
    	  	  Default_Args:(lower, False), (overwrite_a, False), (check_finite, True)
      +Func: det(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: eig(a, b, left, right, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(b, None), (left, False), (right, True), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: eigh(a, b, lower, eigvals_only, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (eigvals_only, False), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: eigvals(a, b, overwrite_a, check_finite)
    	  	  Default_Args:(b, None), (overwrite_a, False), (check_finite, True)
      +Func: eigvalsh(a, b, lower, overwrite_a, overwrite_b, turbo, eigvals, type, check_finite)
    	  	  Default_Args:(b, None), (lower, True), (overwrite_a, False), (overwrite_b, False), (turbo, True), (eigvals, None), (type, 1), (check_finite, True)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: inv(a, overwrite_a, check_finite)
    	  	  Default_Args:(overwrite_a, False), (check_finite, True)
      +Func: lstsq(a, b, cond, overwrite_a, overwrite_b, check_finite)
    	  	  Default_Args:(cond, None), (overwrite_a, False), (overwrite_b, False), (check_finite, True)
      +Func: norm(a, ord)
    	  	  Default_Args:(ord, None)
      +Func: pinv2(a, cond, rcond, return_rank, check_finite)
    	  	  Default_Args:(cond, None), (rcond, None), (return_rank, False), (check_finite, True)
      +Func: register_func(name, func)
      +Func: restore_func(name)
      +Func: solve(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite)
    	  	  Default_Args:(sym_pos, False), (lower, False), (overwrite_a, False), (overwrite_b, False), (debug, False), (check_finite, True)
      +Func: svd(a, full_matrices, compute_uv, overwrite_a, check_finite)
    	  	  Default_Args:(full_matrices, True), (compute_uv, True), (overwrite_a, False), (check_finite, True)

 
Module: numpy.f2py-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: compile(source, modulename, extra_args, verbose, source_fn)
    	  	  Default_Args:(modulename, untitled), (extra_args, ), (verbose, 1), (source_fn, None)
      +Func: run_main(comline_list)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.f2py.__version__-------------------------------------------------
    (No members)

 
Module: numpy.f2py.auxfuncs-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _isstring(var)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.capi_maps-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cb_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildcallback(rout, um)
      +Func: buildcallbacks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.cfuncs-------------------------------------------------
      +Func: append_needs(need, flag)
    	  	  Default_Args:(flag, 1)
      +Func: write(self, string)

 
Module: numpy.f2py.common_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(m)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findcommonblocks(block, top)
    	  	  Default_Args:(top, 1)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.crackfortran-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: _calc_depend_dict(vars)
      +Func: _ensure_exprdict(r)
      +Func: _eval_length(length, params)
      +Func: _eval_scalar(value, params)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _get_depend_dict(name, vars, deps)
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
    +Built-in Function: search
    	-Method Arguments:
string, pos, endpos
      +Func: _is_intent_callback(vdecl)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: _kind_func(string)
      +Func: _resolvenameargspattern(line)
      +Func: _selected_int_kind_func(r)
      +Func: _selected_real_kind_func(p, r, radix)
    	  	  Default_Args:(r, 0), (radix, 0)
      +Func: _simplifyargs(argsline)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: analyzeargs(block)
      +Func: analyzebody(block, args, tab)
    	  	  Default_Args:(tab, )
      +Func: analyzecommon(block)
      +Func: analyzeline(m, case, line)
      +Func: analyzevars(block)
      +Func: appenddecl(decl, decl2, force)
    	  	  Default_Args:(force, 1)
      +Func: appendmultiline(group, context_name, ml)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildimplicitrules(block)
      +Func: common2fortran(common, tab)
    	  	  Default_Args:(tab, )
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: crack2fortran(block)
      +Func: crack2fortrangen(block, tab, as_interface)
    	  	  Default_Args:(tab, \n), (as_interface, False)
      +Func: crackfortran(files)
      +Func: crackline(line, reset)
    	  	  Default_Args:(reset, 0)
      +Func: cracktypespec(typespec, selector)
      +Func: cracktypespec0(typespec, ll)
      +Func: debugcapi(var)
      +Func: determineexprtype(expr, vars, rules)
    	  	  Default_Args:(rules, {})
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: expr2name(a, block, args)
    	  	  Default_Args:(args, )
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: get_parameters(vars, global_params)
    	  	  Default_Args:(global_params, {})
      +Func: get_sorted_names(vars)
      +Func: get_usedict(block)
      +Func: get_useparameters(block, param_map)
    	  	  Default_Args:(param_map, None)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrlen(dl, args, star)
    	  	  Default_Args:(star, *)
      +Func: getblockname(block, unknown)
    	  	  Default_Args:(unknown, unknown)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getextension(name)
      +Func: getfortranname(rout)
      +Func: getlincoef(e, xset)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
    +Built-in Function: match
    	-Method Arguments:
string, pos, endpos
      +Func: is_free_format(file)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markinnerspaces(line)
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: markouterparen(line)
      +Func: myeval(e, g, l)
    	  	  Default_Args:(g, None), (l, None)
      +Func: outmess(line, flag)
    	  	  Default_Args:(flag, 1)
      +Func: postcrack(block, args, tab)
    	  	  Default_Args:(args, None), (tab, )
      +Func: postcrack2(block, tab, param_map)
    	  	  Default_Args:(tab, ), (param_map, None)
      +Func: readfortrancode(ffile, dowithline, istop)
    	  	  Default_Args:(dowithline, <function show at 0x00000000221C0A58>), (istop, 1)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: removespaces(expr)
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: rmbadname(names)
      +Func: rmbadname1(name)
      +Func: setattrspec(decl, attr, force)
    	  	  Default_Args:(force, 0)
      +Func: setcharselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setkindselector(decl, sel, force)
    	  	  Default_Args:(force, 0)
      +Func: setmesstext(block)
      +Func: show(o, f)
    	  	  Default_Args:(f, 0)
      +Func: sortvarnames(vars)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: true_intent_list(var)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)
      +Func: unmarkouterparen(line)
      +Func: updatevars(typespec, selector, attrspec, entitydecl)
      +Func: use2fortran(use, tab)
    	  	  Default_Args:(tab, )
      +Func: vars2fortran(block, vars, args, tab, as_interface)
    	  	  Default_Args:(tab, ), (as_interface, False)

 
Module: numpy.f2py.diagnose-------------------------------------------------
      +Func: run_command(cmd)

 
Module: numpy.f2py.f2py2e-------------------------------------------------
      +Func: buildmodules(lst)
      +Func: callcrackfortran(files, options)
      +Func: dict_append(d_out, d_in)
      +Func: write(self, string)
      +Func: filter_files(prefix, suffix, files, remove_prefix)
    	  	  Default_Args:(remove_prefix, None)
      +Func: get_prefix(module)
      +Func: outmess(t)
      +Func: run_main(comline_list)
      +Func: scaninputline(inputline)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)

 
Module: numpy.f2py.f2py_testing-------------------------------------------------
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: run(runtest, test_functions, repeat)
    	  	  Default_Args:(repeat, 1)

 
Module: numpy.f2py.f90mod_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildhooks(pymod)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: findf90modules(m)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: undo_rmbadname(names)
      +Func: undo_rmbadname1(name)

 
Module: numpy.f2py.func2subr-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: assubr(rout)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: createfuncwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: createsubrwrapper(rout, signature)
    	  	  Default_Args:(signature, 0)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)
      +Func: var2fixfortran(vars, a, fa, f90mode)
    	  	  Default_Args:(fa, None), (f90mode, None)

 
Module: numpy.f2py.info-------------------------------------------------
    (No members)

 
Module: numpy.f2py.rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildapi(rout)
      +Func: buildmodule(m, um)
      +Func: cb_routsign2map(rout, um)
      +Func: cb_sign2map(a, var, index)
    	  	  Default_Args:(index, None)
      +Func: common_sign2map(a, var)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getarrdims(a, var, verbose)
    	  	  Default_Args:(verbose, 0)
      +Func: getarrdocsign(a, var)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getctype(var)
      +Func: getfortranname(rout)
      +Func: getinit(a, var)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpydocsign(a, var)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getstrlength(var)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: markoutercomma(line, comma)
    	  	  Default_Args:(comma, ,)
      +Func: modsign2map(m)
      +Func: write(self, string)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: routsign2map(rout)
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: sign2map(a, var)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.f2py.setup-------------------------------------------------
    
   +Class: Configuration
          +  add_scripts(self)
        	   Positional_Args: files
          +  __str__(self)
          +  add_subpackage(self, subpackage_name, subpackage_path, standalone)
        	  	  Default_Args:(subpackage_path, None), (standalone, False)
          +  add_data_files(self)
        	   Positional_Args: files
          +  add_extension(self, name, sources)
        	   Keyword_Args: kw
          +  get_info(self)
        	   Positional_Args: names
          +  todict(self)
          +  __init__(self, package_name, parent_name, top_path, package_path, caller_level, setup_name)
        	  	  Default_Args:(package_name, None), (parent_name, None), (top_path, None), (package_path, None), (caller_level, 1), (setup_name, setup.py)
        	   Keyword_Args: attrs
          +  paths(self)
        	   Positional_Args: paths
        	   Keyword_Args: kws
          +  add_data_dir(self, data_path)
          +  make_config_py(self, name)
        	  	  Default_Args:(name, __config__)
          +  add_installed_library(self, name, sources, install_dir, build_info)
        	  	  Default_Args:(build_info, None)
          +  dict_append(self)
        	   Keyword_Args: dict
          +  get_version(self, version_file, version_variable)
        	  	  Default_Args:(version_file, None), (version_variable, None)
          +  have_f77c(self)
          +  get_build_temp_dir(self)
          +  _optimize_data_files(self)
          +  _fix_paths_dict(self, kw)
          +  append_to(self, extlib)
          +  info(self, message)
          +  have_f90c(self)
          +  get_distribution(self)
          +  add_include_dirs(self)
        	   Positional_Args: paths
          +  warn(self, message)
          +  _wildcard_get_subpackage(self, subpackage_name, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _get_configuration_from_setup_py(self, setup_py, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(caller_level, 1)
          +  _add_library(self, name, sources, install_dir, build_info)
          +  get_subpackage(self, subpackage_name, subpackage_path, parent_name, caller_level)
        	  	  Default_Args:(subpackage_path, None), (parent_name, None), (caller_level, 1)
          +  set_options(self)
        	   Keyword_Args: options
          +  _get_svn_revision(self, path)
          +  add_headers(self)
        	   Positional_Args: files
          +  add_library(self, name, sources)
        	   Keyword_Args: build_info
          +  make_hg_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  make_svn_version_py(self, delete)
        	  	  Default_Args:(delete, True)
          +  _get_hg_revision(self, path)
          +  add_npy_pkg_config(self, template, install_dir, subst_dict)
        	  	  Default_Args:(subst_dict, None)
          +  get_config_cmd(self)
          +  add_define_macros(self, macros)
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: newer(source, target)
    	   Keyword_Args: attr

 
Module: numpy.f2py.use_rules-------------------------------------------------
    
   +Class: F2PYError
        (No members)
      +Func: applyrules(rules, d, var)
    	  	  Default_Args:(var, {})
      +Func: buildusevar(name, realname, vars, usemodulename)
      +Func: buildusevars(m, r)
      +Func: containscommon(rout)
      +Func: containsmodule(block)
      +Func: debugcapi(var)
      +Func: dictappend(rd, ar)
      +Func: write(self, string)
      +Func: flatlist(l)
      +Func: gentitle(name)
      +Func: get_kind(var)
      +Func: getargs(rout)
      +Func: getargs2(rout)
      +Func: getcallprotoargument(rout, cb_map)
    	  	  Default_Args:(cb_map, {})
      +Func: getcallstatement(rout)
      +Func: getfortranname(rout)
      +Func: getmultilineblock(rout, blockname, comment, counter)
    	  	  Default_Args:(comment, 1), (counter, 0)
      +Func: getpymethoddef(rout)
      +Func: getrestdoc(rout)
      +Func: getusercode(rout)
      +Func: getusercode1(rout)
      +Func: hasassumedshape(rout)
      +Func: hasbody(rout)
      +Func: hascallstatement(rout)
      +Func: hascommon(rout)
      +Func: hasexternals(rout)
      +Func: hasinitvalue(var)
      +Func: hasinitvalueasstring(var)
      +Func: hasnote(var)
      +Func: hasresultnote(rout)
      +Func: hasvariables(rout)
      +Func: isallocatable(var)
      +Func: isarray(var)
      +Func: isarrayofstrings(var)
      +Func: ischaracter(var)
      +Func: iscomplex(var)
      +Func: iscomplexarray(var)
      +Func: iscomplexfunction(rout)
      +Func: iscomplexfunction_warn(rout)
      +Func: isdouble(var)
      +Func: isdummyroutine(rout)
      +Func: isexternal(var)
      +Func: isfalse(var)
      +Func: isfunction(rout)
      +Func: isfunction_wrap(rout)
      +Func: isint1array(var)
      +Func: isinteger(var)
      +Func: isintent_aligned16(var)
      +Func: isintent_aligned4(var)
      +Func: isintent_aligned8(var)
      +Func: isintent_aux(var)
      +Func: isintent_c(var)
      +Func: isintent_cache(var)
      +Func: isintent_callback(var)
      +Func: isintent_copy(var)
      +Func: isintent_hide(var)
      +Func: isintent_in(var)
      +Func: isintent_inout(var)
      +Func: isintent_inplace(var)
      +Func: isintent_nothide(var)
      +Func: isintent_out(var)
      +Func: isintent_overwrite(var)
      +Func: islogical(var)
      +Func: islogicalfunction(rout)
      +Func: islong_complex(var)
      +Func: islong_double(var)
      +Func: islong_doublefunction(rout)
      +Func: islong_long(var)
      +Func: islong_longfunction(rout)
      +Func: ismodule(rout)
      +Func: ismoduleroutine(rout)
      +Func: ismutable(var)
      +Func: isoptional(var)
      +Func: isprivate(var)
      +Func: isreal(var)
      +Func: isrequired(var)
      +Func: isroutine(rout)
      +Func: isscalar(var)
      +Func: issigned_array(var)
      +Func: issigned_chararray(var)
      +Func: issigned_long_longarray(var)
      +Func: issigned_shortarray(var)
      +Func: isstring(var)
      +Func: isstringarray(var)
      +Func: isstringfunction(rout)
      +Func: issubroutine(rout)
      +Func: issubroutine_wrap(rout)
      +Func: isthreadsafe(rout)
      +Func: istrue(var)
      +Func: isunsigned(var)
      +Func: isunsigned_char(var)
      +Func: isunsigned_chararray(var)
      +Func: isunsigned_long_long(var)
      +Func: isunsigned_long_longarray(var)
      +Func: isunsigned_short(var)
      +Func: isunsigned_shortarray(var)
      +Func: isunsignedarray(var)
    	   Positional_Args: f
      +Func: l_not(f)
    	   Positional_Args: f
      +Func: outmess(t)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: replace(str, d, defaultsep)
    	  	  Default_Args:(defaultsep, )
      +Func: pprint(object, stream, indent, width, depth)
    	  	  Default_Args:(stream, None), (indent, 1), (width, 80), (depth, None)
      +Func: stripcomma(s)
    
   +Class: throw_error
          +  __call__(self, var)
          +  __init__(self, mess)

 
Module: numpy.fft-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.fft.fftpack-------------------------------------------------
      +Func: _cook_nd_args(a, s, axes, invreal)
    	  	  Default_Args:(s, None), (axes, None), (invreal, 0)
      +Func: _raw_fft(a, n, axis, init_function, work_function, fft_cache)
    	  	  Default_Args:(n, None), (axis, -1), (init_function, <built-in function cffti>), (work_function, <built-in function cfftf>), (fft_cache, {})
      +Func: _raw_fftnd(a, s, axes, function)
    	  	  Default_Args:(s, None), (axes, None), (function, <function fft at 0x00000000031A5D68>)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: fft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: fft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: fftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: hfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: ifft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: ifftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: ihfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: irfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: irfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: rfft(a, n, axis)
    	  	  Default_Args:(n, None), (axis, -1)
      +Func: rfft2(a, s, axes)
    	  	  Default_Args:(s, None), (axes, (-2, -1))
      +Func: rfftn(a, s, axes)
    	  	  Default_Args:(s, None), (axes, None)
      +Func: shape(a)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.fft.fftpack_lite-------------------------------------------------
    +Built-in Function: cfftb
    	-Method Arguments: None
    +Built-in Function: cfftf
    	-Method Arguments: None
    +Built-in Function: cffti
    	-Method Arguments: None
    
   +Class: error
        (No members)
    +Built-in Function: rfftb
    	-Method Arguments: None
    +Built-in Function: rfftf
    	-Method Arguments: None
    +Built-in Function: rffti
    	-Method Arguments: None

 
Module: numpy.fft.helper-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: fftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: fftshift(x, axes)
    	  	  Default_Args:(axes, None)
      +Func: ifftshift(x, axes)
    	  	  Default_Args:(axes, None)
    
   +Class: integer
        (No members)
      +Func: rfftfreq(n, d)
    	  	  Default_Args:(d, 1.0)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)

 
Module: numpy.fft.info-------------------------------------------------
    (No members)

 
Module: numpy.fft.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.lib-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: RankWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    	   Positional_Args: args
      +Func: byte_bounds(a)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: fromregex(file, regexp, dtype)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: i0(x)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sinc(x)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: tile(A, reps)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
      +Func: vsplit(ary, indices_or_sections)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.lib._compiled_base-------------------------------------------------
    +Built-in Function: _insert
    	-Method Arguments: None
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
    
   +Class: Exception
        (No members)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib._datasource-------------------------------------------------
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: Repository
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  listdir(self)
          +  _fullpath(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, baseurl, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: _FileOpeners
          +  _load(self)
          +  __getitem__(self, key)
          +  keys(self)
          +  __init__(self)
    +Built-in Function: open
    	-Method Arguments:
name, mode, buffering
      +Func: open(path, mode, destpath)
    	  	  Default_Args:(mode, r), (destpath, .)

 
Module: numpy.lib._iotools-------------------------------------------------
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: complex
        (No members)
    
   +Class: str
        (No members)
      +Func: _is_bytes_like(obj)
      +Func: _is_string_like(obj)
      +Func: _to_filehandle(fname, flag, return_opened)
    	  	  Default_Args:(flag, r), (return_opened, False)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: basestring
        (No members)
    
   +Class: bool
        (No members)
    
   +Class: str
        (No members)
    
   +Class: complex
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
    
   +Class: float
        (No members)
      +Func: has_nested_fields(ndtype)
    
   +Class: int
        (No members)
    
   +Class: object
        (No members)
    
   +Class: str
        (No members)
      +Func: str2bool(value)
    
   +Class: unicode
        (No members)

 
Module: numpy.lib._version-------------------------------------------------
    
   +Class: NumpyVersion
          +  __ne__(self, other)
          +  __repr(self)
          +  _compare_pre_release(self, other)
          +  _compare(self, other)
          +  _compare_version(self, other)
          +  __le__(self, other)
          +  __ge__(self, other)
          +  __gt__(self, other)
          +  __lt__(self, other)
          +  __eq__(self, other)
          +  __init__(self, vstring)
    
   +Class: basestring
        (No members)

 
Module: numpy.lib.arraypad-------------------------------------------------
      +Func: _append_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _append_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _arange_ndarray(arr, shape, axis, reverse)
    	  	  Default_Args:(reverse, False)
      +Func: _normalize_shape(narray, shape)
      +Func: _pad_ref(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_sym(arr, pad_amt, method, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _pad_wrap(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_const(arr, pad_amt, val, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_edge(arr, pad_amt, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_max(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_mean(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_med(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_min(arr, pad_amt, num, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _prepend_ramp(arr, pad_amt, end, axis)
    	  	  Default_Args:(axis, -1)
      +Func: _round_ifneeded(arr, dtype)
      +Func: _validate_lengths(narray, number_elements)
    
   +Class: long
        (No members)
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs

 
Module: numpy.lib.arraysetops-------------------------------------------------
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)

 
Module: numpy.lib.arrayterator-------------------------------------------------
    
   +Class: Arrayterator
          +  __array__(self)
          +  __getitem__(self, index)
          +  __getattr__(self, attr)
          +  __iter__(self)
          +  __init__(self, var, buf_size)
        	  	  Default_Args:(buf_size, None)
    
   +Class: long
        (No members)
    +Built-in Function: mul
    	-Method Arguments:
a, b
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial

 
Module: numpy.lib.financial-------------------------------------------------
      +Func: _convert_when(when)
      +Func: _g_div_gp(r, n, p, x, y, w)
      +Func: _rbl(rate, per, pmt, pv, when)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)

 
Module: numpy.lib.format-------------------------------------------------
      +Func: _check_version(version)
      +Func: _filter_header(s)
      +Func: _read_array_header(fp, version)
      +Func: _read_bytes(fp, size, error_template)
    	  	  Default_Args:(error_template, ran out of data)
      +Func: _write_array_header(fp, d, version)
    	  	  Default_Args:(version, None)
    
   +Class: str
        (No members)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
      +Func: dtype_to_descr(dtype)
      +Func: header_data_from_array_1_0(array)
      +Func: isfileobj(f)
    
   +Class: long
        (No members)
      +Func: magic(major, minor)
      +Func: open_memmap(filename, mode, dtype, shape, fortran_order, version)
    	  	  Default_Args:(mode, r+), (dtype, None), (shape, None), (fortran_order, False), (version, None)
      +Func: read_array(fp)
      +Func: read_array_header_1_0(fp)
      +Func: read_array_header_2_0(fp)
      +Func: read_magic(fp)
      +Func: safe_eval(source)
      +Func: write_array(fp, array, version)
    	  	  Default_Args:(version, None)
      +Func: write_array_header_1_0(fp, d)
      +Func: write_array_header_2_0(fp, d)

 
Module: numpy.lib.function_base-------------------------------------------------
      +Func: _chbevl(x, vals)
      +Func: _i0_1(x)
      +Func: _i0_2(x)
    +Built-in Function: _insert
    	-Method Arguments: None
      +Func: _median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
    +Built-in Function: interp
    	-Method Arguments: None
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
      +Func: extract(condition, arr)
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: i0(x)
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
    
   +Class: int64
        (No members)
      +Func: isscalar(num)
      +Func: iterable(y)
      +Func: kaiser(M, beta)
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
    
   +Class: long
        (No members)
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
      +Func: msort(a)
    
   +Class: ndarray
        (No members)
      +Func: nonzero(a)
    
   +Class: number
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: place(arr, mask, vals)
    
   +Class: xrange
        (No members)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
      +Func: sinc(x)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.index_tricks-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: CClass
          +  __init__(self)
    
   +Class: IndexExpression
          +  __getitem__(self, item)
          +  __init__(self, maketuple)
    
   +Class: RClass
          +  __init__(self)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    	   Positional_Args: args
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: nd_grid
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  __init__(self, sparse)
        	  	  Default_Args:(sparse, False)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C

 
Module: numpy.lib.info-------------------------------------------------
    (No members)

 
Module: numpy.lib.nanfunctions-------------------------------------------------
      +Func: _copyto(a, val, mask)
      +Func: _divide_by_count(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: _nanmedian(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanmedian1d(arr1d, overwrite_input)
    	  	  Default_Args:(overwrite_input, False)
      +Func: _nanmedian_small(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: _nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: _nanpercentile1d(arr1d, q, overwrite_input, interpolation)
    	  	  Default_Args:(overwrite_input, False), (interpolation, linear)
      +Func: _replace_nan(a, val)
      +Func: _ureduce(a, func)
    	   Keyword_Args: kwargs
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)

 
Module: numpy.lib.npyio-------------------------------------------------
    
   +Class: BagObj
          +  __getattribute__(self, key)
          +  __init__(self, obj)
    
   +Class: ConversionWarning
        (No members)
    
   +Class: ConverterError
        (No members)
    
   +Class: ConverterLockError
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: LineSplitter
          +  _variablewidth_splitter(self, line)
          +  _delimited_splitter(self, line)
          +  __call__(self, line)
          +  _fixedwidth_splitter(self, line)
          +  autostrip(self, method)
          +  __init__(self, delimiter, comments, autostrip)
        	  	  Default_Args:(delimiter, None), (comments, #), (autostrip, True)
    
   +Class: NameValidator
          +  __call__(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  validate(self, names, defaultfmt, nbfields)
        	  	  Default_Args:(defaultfmt, f%i), (nbfields, None)
          +  __init__(self, excludelist, deletechars, case_sensitive, replace_space)
        	  	  Default_Args:(excludelist, None), (deletechars, None), (case_sensitive, None), (replace_space, _)
    
   +Class: NpzFile
          +  __exit__(self, exc_type, exc_value, traceback)
          +  __getitem__(self, key)
          +  __contains__(self, key)
          +  __del__(self)
          +  items(self)
          +  __enter__(self)
          +  keys(self)
          +  __iter__(self)
          +  __init__(self, fid, own_fid)
        	  	  Default_Args:(own_fid, False)
          +  iteritems(self)
          +  close(self)
          +  iterkeys(self)
    
   +Class: StringConverter
          +  _getsubdtype(cls, val)
          +  update(self, func, default, testing_value, missing_values, locked)
        	  	  Default_Args:(default, None), (testing_value, None), (missing_values, ), (locked, False)
          +  _strict_call(self, value)
          +  _loose_call(self, value)
          +  _dtypeortype(cls, dtype)
          +  __init__(self, dtype_or_func, default, missing_values, locked)
        	  	  Default_Args:(dtype_or_func, None), (default, None), (missing_values, None), (locked, False)
          +  iterupgrade(self, value)
          +  upgrade_mapper(cls, func, default)
        	  	  Default_Args:(default, None)
          +  upgrade(self, value)
          +  __call__(self, value)
          +  _getdtype(cls, val)
    
   +Class: str
        (No members)
      +Func: _getconv(dtype)
      +Func: _is_string_like(obj)
      +Func: _savez(file, args, kwds, compress)
    
   +Class: str
        (No members)
      +Func: asbytes_nested(x)
    
   +Class: str
        (No members)
    
   +Class: basestring
        (No members)
    
   +Class: str
        (No members)
      +Func: easy_dtype(ndtype, names, defaultfmt)
    	  	  Default_Args:(names, None), (defaultfmt, f%i)
    	   Keyword_Args: validationargs
      +Func: flatten_dtype(ndtype, flatten_base)
    	  	  Default_Args:(flatten_base, False)
      +Func: fromregex(file, regexp, dtype)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
      +Func: has_nested_fields(ndtype)
    
   +Class: itemgetter
        (No members)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: imap
        (No members)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: seek_gzip_factory(f)
    
   +Class: unicode
        (No members)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    	   Positional_Args: args
    	   Keyword_Args: kwargs

 
Module: numpy.lib.polynomial-------------------------------------------------
    
   +Class: RankWarning
        (No members)
      +Func: _raise_power(astr, wrap)
    	  	  Default_Args:(wrap, 70)
    	   Positional_Args: arys
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
      +Func: eigvals(a)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: hstack(tup)
      +Func: imag(val)
      +Func: inv(a)
      +Func: iscomplex(x)
      +Func: isscalar(num)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: real(val)
      +Func: roots(p)
      +Func: sort_complex(a)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)

 
Module: numpy.lib.recfunctions-------------------------------------------------
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _fix_defaults(output, defaults)
    	  	  Default_Args:(defaults, None)
      +Func: _fix_output(output, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: _is_string_like(obj)
      +Func: _izip_fields(iterable)
      +Func: _izip_fields_flat(iterable)
      +Func: append_fields(base, names, data, dtypes, fill_value, usemask, asrecarray)
    	  	  Default_Args:(dtypes, None), (fill_value, -1), (usemask, True), (asrecarray, False)
    
   +Class: basestring
        (No members)
      +Func: drop_fields(base, drop_names, usemask, asrecarray)
    	  	  Default_Args:(usemask, True), (asrecarray, False)
      +Func: find_duplicates(a, key, ignoremask, return_index)
    	  	  Default_Args:(key, None), (ignoremask, True), (return_index, False)
      +Func: flatten_descr(ndtype)
      +Func: get_fieldstructure(adtype, lastname, parents)
    	  	  Default_Args:(lastname, None), (parents, None)
      +Func: get_names(adtype)
      +Func: get_names_flat(adtype)
      +Func: izip_records(seqarrays, fill_value, flatten)
    	  	  Default_Args:(fill_value, None), (flatten, True)
      +Func: join_by(key, r1, r2, jointype, r1postfix, r2postfix, defaults, usemask, asrecarray)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None), (usemask, True), (asrecarray, False)
      +Func: merge_arrays(seqarrays, fill_value, flatten, usemask, asrecarray)
    	  	  Default_Args:(fill_value, -1), (flatten, False), (usemask, False), (asrecarray, False)
    
   +Class: ndarray
        (No members)
      +Func: rec_append_fields(base, names, data, dtypes)
    	  	  Default_Args:(dtypes, None)
      +Func: rec_drop_fields(base, drop_names)
      +Func: rec_join(key, r1, r2, jointype, r1postfix, r2postfix, defaults)
    	  	  Default_Args:(jointype, inner), (r1postfix, 1), (r2postfix, 2), (defaults, None)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recursive_fill_fields(input, output)
      +Func: rename_fields(base, namemapper)
      +Func: stack_arrays(arrays, defaults, usemask, asrecarray, autoconvert)
    	  	  Default_Args:(defaults, None), (usemask, True), (asrecarray, False), (autoconvert, False)
    
   +Class: izip
        (No members)
      +Func: zip_descr(seqarrays, flatten)
    	  	  Default_Args:(flatten, False)

 
Module: numpy.lib.scimath-------------------------------------------------
      +Func: _fix_int_lt_zero(x)
      +Func: _fix_real_abs_gt_1(x)
      +Func: _fix_real_lt_zero(x)
      +Func: _tocomplex(arr)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: arccos(x)
      +Func: arcsin(x)
      +Func: arctanh(x)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: isreal(x)
      +Func: log(x)
      +Func: log10(x)
      +Func: log2(x)
      +Func: logn(n, x)
      +Func: power(x, p)
      +Func: sqrt(x)

 
Module: numpy.lib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: join(path)
    	   Positional_Args: paths

 
Module: numpy.lib.shape_base-------------------------------------------------
      +Func: _replace_zero_by_x_arrays(sub_arys)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    	   Positional_Args: arys
      +Func: column_stack(tup)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
      +Func: expand_dims(a, axis)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: hsplit(ary, indices_or_sections)
      +Func: isscalar(num)
      +Func: kron(a, b)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: vstack(tup)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: tile(A, reps)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.stride_tricks-------------------------------------------------
    
   +Class: DummyArray
          +  __init__(self, interface, base)
        	  	  Default_Args:(base, None)
      +Func: as_strided(x, shape, strides)
    	  	  Default_Args:(shape, None), (strides, None)
    	   Positional_Args: args

 
Module: numpy.lib.twodim_base-------------------------------------------------
      +Func: _min_int(low, high)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
      +Func: eye(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: fliplr(m)
      +Func: flipud(m)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.type_check-------------------------------------------------
      +Func: _getmaxmin(t)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asscalar(a)
    	   Positional_Args: arrays
      +Func: imag(val)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: nan_to_num(x)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
      +Func: typename(char)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.lib.ufunclike-------------------------------------------------
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)

 
Module: numpy.lib.user_array-------------------------------------------------
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: container
          +  __int__(self)
          +  __ror__(self, other)
          +  __getslice__(self, i, j)
          +  __rsub__(self, other)
          +  astype(self, typecode)
          +  __rdiv__(self, other)
          +  __and__(self, other)
          +  __rmod__(self, other)
          +  __complex__(self)
          +  __rshift__(self, other)
          +  _rc(self, a)
          +  __abs__(self)
          +  __divmod__(self, other)
          +  __ixor__(self, other)
          +  __len__(self)
          +  __isub__(self, other)
          +  __rdivmod__(self, other)
          +  __invert__(self)
          +  tostring(self)
          +  __pow__(self, other)
          +  __lshift__(self, other)
          +  __gt__(self, other)
          +  __oct__(self)
          +  copy(self)
          +  __eq__(self, other)
          +  __rxor__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __mod__(self, other)
          +  __iadd__(self, other)
          +  __le__(self, other)
          +  _scalarfunc(self, func)
          +  byteswap(self)
          +  __irshift__(self, other)
          +  __long__(self)
          +  __ge__(self, other)
          +  __ne__(self, other)
          +  __add__(self, other)
          +  __mul__(self, other)
          +  __rrshift__(self, other)
          +  __imod__(self, other)
          +  __lt__(self, other)
          +  __init__(self, data, dtype, copy)
        	  	  Default_Args:(dtype, None), (copy, True)
          +  __array_wrap__(self)
        	   Positional_Args: args
          +  __rand__(self, other)
          +  __setattr__(self, attr, value)
          +  __iand__(self, other)
          +  __getitem__(self, index)
          +  __ipow__(self, other)
          +  __getattr__(self, attr)
          +  __pos__(self)
          +  __float__(self)
          +  __neg__(self)
          +  __rpow__(self, other)
          +  __idiv__(self, other)
          +  __setitem__(self, index, value)
          +  __or__(self, other)
          +  __add__(self, other)
          +  __sub__(self, other)
          +  __hex__(self)
          +  __ilshift__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  __xor__(self, other)
          +  __ior__(self, other)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __rlshift__(self, other)
    
   +Class: long
        (No members)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: shape(a)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)

 
Module: numpy.lib.utils-------------------------------------------------
    
   +Class: SafeEval
          +  visitExpression(self, node)
        	   Keyword_Args: kw
          +  visitDict(self, node)
        	   Keyword_Args: kw
          +  visitTuple(self, node)
        	   Keyword_Args: kw
          +  default(self, node)
        	   Keyword_Args: kw
          +  visitName(self, node)
        	   Keyword_Args: kw
          +  visit(self, node)
        	   Keyword_Args: kw
          +  visitUnarySub(self, node)
        	   Keyword_Args: kw
          +  visitConst(self, node)
        	   Keyword_Args: kw
          +  visitList(self, node)
        	   Keyword_Args: kw
          +  visitUnaryAdd(self, node)
        	   Keyword_Args: kw
    
   +Class: _Deprecate
          +  __call__(self, func)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, old_name, new_name, message)
        	  	  Default_Args:(old_name, None), (new_name, None), (message, None)
      +Func: _getmembers(item)
      +Func: _info(obj, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: _lookfor_generate_cache(module, import_modules, regenerate)
      +Func: _makenamedict(module)
    	  	  Default_Args:(module, numpy)
      +Func: _set_function_name(func, name)
      +Func: _split_line(name, arguments, width)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: byte_bounds(a)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
    
   +Class: ndarray
        (No members)
      +Func: safe_eval(source)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
    
   +Class: ufunc
        (No members)
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)

 
Module: numpy.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: cholesky(a)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
      +Func: det(a)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: inv(a)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.linalg._umath_linalg-------------------------------------------------
    (No members)

 
Module: numpy.linalg.info-------------------------------------------------
    (No members)

 
Module: numpy.linalg.lapack_lite-------------------------------------------------
    
   +Class: LapackError
        (No members)
    +Built-in Function: dgelsd
    	-Method Arguments: None
    +Built-in Function: dgeqrf
    	-Method Arguments: None
    +Built-in Function: dorgqr
    	-Method Arguments: None
    +Built-in Function: xerbla
    	-Method Arguments: None
    +Built-in Function: zgelsd
    	-Method Arguments: None
    +Built-in Function: zgeqrf
    	-Method Arguments: None
    +Built-in Function: zungqr
    	-Method Arguments: None

 
Module: numpy.linalg.linalg-------------------------------------------------
    
   +Class: LinAlgError
        (No members)
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
    	   Positional_Args: arrays
      +Func: _complexType(t, default)
    	  	  Default_Args:(default, <type numpy.complex128>)
      +Func: _convertarray(a)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: _fastCopyAndTranspose(type)
    	   Positional_Args: arrays
      +Func: _linalgRealType(t)
      +Func: _makearray(a)
      +Func: _multi_svd_norm(x, row_axis, col_axis, op)
      +Func: _raise_linalgerror_eigenvalues_nonconvergence(err, flag)
      +Func: _raise_linalgerror_nonposdef(err, flag)
      +Func: _raise_linalgerror_singular(err, flag)
      +Func: _raise_linalgerror_svd_nonconvergence(err, flag)
      +Func: _realType(t, default)
    	  	  Default_Args:(default, <type numpy.float64>)
    	   Positional_Args: arrays
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: str
        (No members)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
    
   +Class: broadcast
        (No members)
    
   +Class: complex128
        (No members)
      +Func: cholesky(a)
    
   +Class: complexfloating
        (No members)
      +Func: cond(x, p)
    	  	  Default_Args:(p, None)
    
   +Class: complex64
        (No members)
      +Func: det(a)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: eig(a)
      +Func: eigh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
      +Func: eigvals(a)
      +Func: eigvalsh(a, UPLO)
    	  	  Default_Args:(UPLO, L)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
    
   +Class: int32
        (No members)
      +Func: get_linalg_error_extobj(callback)
    +Built-in Function: geterrobj
    	-Method Arguments: None
    
   +Class: inexact
        (No members)
    
   +Class: int32
        (No members)
      +Func: inv(a)
      +Func: isComplexType(t)
    
   +Class: float64
        (No members)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: matrix_power(M, n)
      +Func: matrix_rank(M, tol)
    	  	  Default_Args:(tol, None)
      +Func: norm(x, ord, axis)
    	  	  Default_Args:(ord, None), (axis, None)
      +Func: pinv(a, rcond)
    	  	  Default_Args:(rcond, 1e-15)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: qr(a, mode)
    	  	  Default_Args:(mode, reduced)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
    
   +Class: float32
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: slogdet(a)
      +Func: solve(a, b)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: svd(a, full_matrices, compute_uv)
    	  	  Default_Args:(full_matrices, 1), (compute_uv, 1)
      +Func: tensorinv(a, ind)
    	  	  Default_Args:(ind, 2)
      +Func: tensorsolve(a, b, axes)
    	  	  Default_Args:(axes, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
    +Built-in Function: zeros
    	-Method Arguments:
shape, dtype=float, order=C

 
Module: numpy.linalg.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: common_fill_value(a, b)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)

 
Module: numpy.ma.bench-------------------------------------------------
      +Func: compare_functions_1v(func, nloop, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(nloop, 500), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_functions_2v(func, nloop, test, xs, nmxs, ys, nmys, xl, nmxl, yl, nmyl)
    	  	  Default_Args:(nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (ys, array( 0.34843229, -0.10939329,  0.62696634,
        0.94232586, -0.06726402,  0.03514856)), (nmys, masked_array(data =
 -- -0.10939329482826499 --
 0.9423258562761581 -0.06726401964733753 --,
             mask =
  True False  True
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
), (yl, array(-0.46249881, -0.05874306, -0.71484842, ...,  0.14061846,
         0.80100493,  0.53842998,
        0.7129914 , -0.90300466,  0.34166902, ..., -0.57858636,
        -0.52616738, -0.57006057,
       -0.56423836,  0.23460203, -0.43691832, ..., -0.47697874,
         0.29446437, -0.16488538,
       ..., 
        0.22230502,  0.86568315,  0.55734931, ..., -0.44402869,
        -0.2260675 , -0.69556173,
       -0.29070712,  0.73921475,  0.84455725, ...,  0.19090893,
        -0.90885152,  0.07729246,
       -0.70177409,  0.89406624, -0.35730562, ...,  0.85289606,
         0.1499418 ,  0.2239394 )), (nmyl, masked_array(data =
 -0.46249880999122217 -0.05874305688659032 -0.7148484224177971 ...,
  0.14061846335518458 0.8010049305123075 0.5384299756239201
 0.7129914005708506 -- 0.3416690187654263 ..., -0.5785863592262126
  -0.5261673775494202 -0.5700605652599355
 -0.5642383618298537 0.23460203408249392 -0.43691832119092533 ...,
  -0.476978743419465 0.2944643705191894 -0.1648853752385866
 ..., 
 0.22230502142300446 0.8656831471608304 0.5573493121728217 ...,
  -0.4440286904623043 -0.2260675040010951 -0.6955617327401138
 -0.29070711701496377 0.7392147529732043 0.8445572458954209 ...,
  0.19090893426129263 -- 0.0772924634518748
 -0.7017740927812843 0.8940662389667464 -0.3573056186125081 ...,
  0.852896064928353 0.149941795161332 0.22393939941941365,
             mask =
 False False False ..., False False False
 False  True False ..., False False False
 False False False ..., False False False
 ..., 
 False False False ..., False False False
 False False False ..., False  True False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: compare_methods(methodname, args, vars, nloop, test, xs, nmxs, xl, nmxl)
    	  	  Default_Args:(vars, x), (nloop, 500), (test, True), (xs, array(-0.44054744, -0.43870622,  0.76859012,
        0.72720563,  0.13663219,  0.40318698)), (nmxs, masked_array(data =
 -- -0.4387062198024232 0.7685901189762747
 0.7272056256129231 0.13663218832303148 --,
             mask =
  True False False
 False False  True,
       fill_value = 1e+20)
), (xl, array(-0.62204979,  0.64723147,  0.84115542, ...,  0.44719177,
        -0.16166536,  0.36175353,
        0.026326  , -0.37905274,  0.54069206, ...,  0.80147884,
         0.28952217,  0.62481675,
        0.76903029, -0.44659454, -0.09499864, ..., -0.71517097,
         0.96732033, -0.82831296,
       ..., 
       -0.30276925, -0.82713959, -0.25008952, ...,  0.31737039,
         0.88984337, -0.41281081,
       -0.71864201,  0.99656159, -0.05664297, ...,  0.6359231 ,
        -0.91292161, -0.49055286,
        0.11641028, -0.72524491, -0.22680187, ..., -0.21982708,
         0.02751579, -0.14164664)), (nmxl, masked_array(data =
 -0.6220497854358156 0.6472314713907155 -- ..., 0.4471917715748257
  -0.16166536104297524 0.3617535253719819
 0.02632599846875161 -0.37905273542163287 0.5406920641315447 ..., --
  0.28952216624848104 0.6248167478447875
 0.7690302910041771 -0.44659453787926484 -0.094998637888835 ...,
  -0.7151709672626227 -- -0.8283129622717609
 ..., 
 -0.3027692455054549 -0.8271395873962926 -0.25008951553842973 ...,
  0.31737038780759264 -- -0.412810808904966
 -0.7186420067067152 -- -0.05664296619872222 ..., 0.6359231027054852
  -0.9129216067530026 -0.49055285659352355
 0.11641027925282521 -0.7252449100893694 -0.22680187197648083 ...,
  -0.21982708471525347 0.027515794035017915 -0.14164664292603146,
             mask =
 False False  True ..., False False False
 False False False ...,  True False False
 False False False ..., False  True False
 ..., 
 False False False ..., False  True False
 False  True False ..., False False False
 False False False ..., False False False,
       fill_value = 1e+20)
)
      +Func: timer(s, v, nloop, nrep)
    	  	  Default_Args:(v, ), (nloop, 500), (nrep, 3)

 
Module: numpy.ma.core-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskError
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedConstant
          +  __array_wrap__(self, obj)
          +  __str__(self)
          +  __reduce__(self)
          +  __array_finalize__(self, obj)
          +  __repr__(self)
          +  flatten(self)
    
   +Class: MaskedIterator
          +  __getitem__(self, indx)
          +  __next__(self)
          +  __setitem__(self, index, value)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, ma)
    
   +Class: _DomainCheckInterval
          +  __call__(self, x)
          +  __init__(self, a, b)
    
   +Class: _DomainGreater
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainGreaterEqual
          +  __call__(self, x)
          +  __init__(self, critical_value)
    
   +Class: _DomainSafeDivide
          +  __call__(self, a, b)
          +  __init__(self, tolerance)
        	  	  Default_Args:(tolerance, None)
    
   +Class: _DomainTan
          +  __call__(self, x)
          +  __init__(self, eps)
    
   +Class: _DomainedBinaryOperation
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, dbfunc, domain, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedBinaryOperation
          +  outer(self, a, b)
          +  __str__(self)
          +  reduce(self, target, axis, dtype)
        	  	  Default_Args:(axis, 0), (dtype, None)
          +  accumulate(self, target, axis)
        	  	  Default_Args:(axis, 0)
          +  __call__(self, a, b)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __init__(self, mbfunc, fillx, filly)
        	  	  Default_Args:(fillx, 0), (filly, 0)
    
   +Class: _MaskedPrintOption
          +  enable(self, shrink)
        	  	  Default_Args:(shrink, 1)
          +  __str__(self)
          +  enabled(self)
          +  display(self)
          +  set_display(self, s)
          +  __str__(self)
          +  __init__(self, display)
    
   +Class: _MaskedUnaryOperation
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  __str__(self)
          +  __init__(self, mufunc, fill, domain)
        	  	  Default_Args:(fill, 0), (domain, None)
    
   +Class: _arraymethod
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, onmask)
        	  	  Default_Args:(onmask, True)
          +  __get__(self, obj, objtype)
        	  	  Default_Args:(objtype, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _check_mask_axis(mask, axis)
    
   +Class: _convert2ma
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname, params)
        	  	  Default_Args:(params, None)
    
   +Class: _extrema_operation
          +  outer(self, a, b)
          +  reduce(self, target, axis)
        	  	  Default_Args:(axis, None)
          +  __call__(self, a, b)
        	  	  Default_Args:(b, None)
    
   +Class: _frommethod
          +  getdoc(self)
          +  __call__(self, a)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, methodname, reversed)
        	  	  Default_Args:(reversed, False)
      +Func: _mareconstruct(subtype, baseclass, baseshape, basetype)
    
   +Class: _maximum_operation
          +  __init__(self)
    
   +Class: _minimum_operation
          +  __init__(self)
      +Func: _recursive_extremum_fill_value(ndtype, extremum)
      +Func: _recursive_filled(a, mask, fill_value)
      +Func: _recursive_make_descr(datatype, newtype)
    	  	  Default_Args:(newtype, <type numpy.bool_>)
      +Func: _recursive_printoption(result, mask, printopt)
      +Func: _recursive_set_default_fill_value(dtypedescr)
      +Func: _recursive_set_fill_value(fillvalue, dtypedescr)
      +Func: allclose(a, b, masked_equal, rtol, atol)
    	  	  Default_Args:(masked_equal, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: allequal(a, b, fill_value)
    	  	  Default_Args:(fill_value, True)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(a, b, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmax(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argmin(a, axis, fill_value)
    	  	  Default_Args:(axis, None), (fill_value, None)
      +Func: argsort(a, axis, kind, order, fill_value)
    	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asanyarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
      +Func: choose(indices, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
      +Func: common_fill_value(a, b)
      +Func: compressed(x)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: default_fill_value(obj)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
      +Func: doc_note(initialdoc, note)
      +Func: dump(a, F)
      +Func: dumps(a)
      +Func: expand_dims(x, axis)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fix_invalid(a, mask, copy, fill_value)
    	  	  Default_Args:(mask, False), (copy, True), (fill_value, None)
      +Func: flatten_mask(mask)
      +Func: flatten_structured_array(a)
      +Func: formatargspec(args, varargs, varkw, defaults, formatarg, formatvarargs, formatvarkw, formatvalue, join)
    	  	  Default_Args:(varargs, None), (varkw, None), (defaults, None), (formatarg, <type str>), (formatvarargs, <function <lambda> at 0x0000000002E3D978>), (formatvarkw, <function <lambda> at 0x0000000002E3D9E8>), (formatvalue, <function <lambda> at 0x0000000002E3DA58>), (join, <function joinseq at 0x0000000002E3D898>)
      +Func: fromfile(file, dtype, count, sep)
    	  	  Default_Args:(dtype, <type float>), (count, -1), (sep, )
      +Func: fromflex(fxarray)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: get_fill_value(a)
      +Func: getmask(a)
    	   Positional_Args: arrays
      +Func: get_object_signature(obj)
      +Func: getargspec(func)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
      +Func: inner(a, b)
      +Func: inner(a, b)
      +Func: isMaskedArray(x)
      +Func: isMaskedArray(x)
      +Func: is_mask(m)
      +Func: is_masked(x)
      +Func: isMaskedArray(x)
      +Func: iscomplexobj(x)
    
   +Class: float64
        (No members)
      +Func: left_shift(a, n)
      +Func: load(F)
      +Func: loads(strg)
    
   +Class: long
        (No members)
      +Func: make_mask(m, copy, shrink, dtype)
    	  	  Default_Args:(copy, False), (shrink, True), (dtype, <type numpy.bool_>)
      +Func: make_mask_descr(ndtype)
      +Func: make_mask_none(newshape, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: masked_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_greater_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_inside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_invalid(a, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_less_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_not_equal(x, value, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_object(x, value, copy, shrink)
    	  	  Default_Args:(copy, True), (shrink, True)
      +Func: masked_outside(x, v1, v2, copy)
    	  	  Default_Args:(copy, True)
      +Func: masked_values(x, value, rtol, atol, copy, shrink)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (copy, True), (shrink, True)
      +Func: masked_where(condition, a, copy)
    	  	  Default_Args:(copy, True)
      +Func: max(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: maximum_fill_value(obj)
      +Func: min(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: minimum_fill_value(obj)
    
   +Class: mvoid
          +  tolist(self)
          +  __getitem__(self, indx)
          +  __str__(self)
          +  __setitem__(self, indx, value)
          +  _get_data(self)
          +  __iter__(self)
          +  __len__(self)
          +  __repr__(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
      +Func: expand_dims(a, axis)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b)
      +Func: outer(a, b)
      +Func: power(a, b, third)
    	  	  Default_Args:(third, None)
      +Func: ptp(obj, axis, out, fill_value)
    	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
      +Func: put(a, indices, values, mode)
    	  	  Default_Args:(mode, raise)
      +Func: putmask(a, mask, values)
      +Func: rank(obj)
    +Built-in Function: reduce
    	-Method Arguments:
function, sequence, initial
      +Func: reshape(a, new_shape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(x, new_shape)
      +Func: right_shift(a, n)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: set_fill_value(a, fill_value)
      +Func: shape(obj)
      +Func: size(obj, axis)
    	  	  Default_Args:(axis, None)
      +Func: reduce(self, target, axis, dtype)
    	  	  Default_Args:(axis, 0), (dtype, None)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: where(condition, x, y)
    	  	  Default_Args:(x, None), (y, None)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.ma.extras-------------------------------------------------
    
   +Class: AxisConcatenator
          +  __init__(self, axis, matrix, ndmin, trans1d)
        	  	  Default_Args:(axis, 0), (matrix, False), (ndmin, 1), (trans1d, -1)
          +  __len__(self)
          +  __getslice__(self, i, j)
          +  __getitem__(self, key)
          +  _retval(self, res)
    
   +Class: MAError
        (No members)
    
   +Class: MAxisConcatenator
          +  __init__(self, axis)
        	  	  Default_Args:(axis, 0)
          +  __getitem__(self, key)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: _covhelper(x, y, rowvar, allow_masked)
    	  	  Default_Args:(y, None), (rowvar, True), (allow_masked, True)
      +Func: _ezclump(mask)
    
   +Class: _fromnxfunction
          +  getdoc(self)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: params
          +  __init__(self, funcname)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
      +Func: array(data, dtype, copy, order, mask, fill_value, keep_mask, hard_mask, shrink, subok, ndmin)
    	  	  Default_Args:(dtype, None), (copy, False), (order, False), (mask, False), (fill_value, None), (keep_mask, True), (hard_mask, False), (shrink, True), (subok, True), (ndmin, 0)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: clump_masked(a)
      +Func: clump_unmasked(a)
      +Func: compress_cols(a)
      +Func: compress_rowcols(x, axis)
    	  	  Default_Args:(axis, None)
      +Func: compress_rows(a)
      +Func: concatenate(arrays, axis)
    	  	  Default_Args:(axis, 0)
      +Func: corrcoef(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: count(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: count_masked(arr, axis)
    	  	  Default_Args:(axis, None)
      +Func: cov(x, y, rowvar, bias, allow_masked, ddof)
    	  	  Default_Args:(y, None), (rowvar, True), (bias, False), (allow_masked, True), (ddof, None)
      +Func: dot(a, b, strict)
    	  	  Default_Args:(strict, False)
      +Func: ediff1d(arr, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: flatnotmasked_contiguous(a)
      +Func: flatnotmasked_edges(a)
      +Func: flatten_inplace(seq)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmask(a)
      +Func: getmaskarray(arr)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: issequence(seq)
      +Func: lstsq(a, b, rcond)
    	  	  Default_Args:(rcond, -1)
      +Func: make_mask_descr(ndtype)
      +Func: mask_cols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
      +Func: mask_rowcols(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: mask_rows(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: masked_all(shape, dtype)
    	  	  Default_Args:(dtype, <type float>)
      +Func: masked_all_like(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: median(a, axis, out, overwrite_input)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False)
    
   +Class: mr_class
          +  __init__(self)
    
   +Class: ndarray
        (No members)
      +Func: notmasked_contiguous(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: notmasked_edges(a, axis)
    	  	  Default_Args:(axis, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: sort(a, axis, kind, order, endwith, fill_value)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar1, return_index, return_inverse)
    	  	  Default_Args:(return_index, False), (return_inverse, False)
      +Func: vander(x, n)
    	  	  Default_Args:(n, None)

 
Module: numpy.ma.mrecords-------------------------------------------------
    
   +Class: MAError
        (No members)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: _check_fill_value(fill_value, ndtype)
      +Func: _checknames(descr, names)
    	  	  Default_Args:(names, None)
      +Func: _get_fieldmask(self)
      +Func: _getformats(data)
      +Func: _guessvartypes(arr)
      +Func: _mrreconstruct(subtype, baseclass, baseshape, basetype)
      +Func: addfield(mrecord, newfield, newfieldname)
    	  	  Default_Args:(newfieldname, None)
    
   +Class: basestring
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: dtype
        (No members)
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
      +Func: fromarrays(arraylist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None)
      +Func: fromrecords(reclist, dtype, shape, formats, names, titles, aligned, byteorder, fill_value, mask)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None), (fill_value, None), (mask, False)
      +Func: fromtextfile(fname, delimitor, commentchar, missingchar, varnames, vartypes)
    	  	  Default_Args:(delimitor, None), (commentchar, #), (missingchar, ), (varnames, None), (vartypes, None)
      +Func: getdata(a, subok)
    	  	  Default_Args:(subok, True)
      +Func: getmaskarray(arr)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
    
   +Class: MaskedRecords
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  _getdata(self)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __reduce__(self)
          +  __str__(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  _getfieldmask(self)
          +  copy(self)
          +  harden_mask(self)
          +  __array_finalize__(self, obj)
          +  soften_mask(self)
          +  __setitem__(self, indx, value)
          +  __repr__(self)
          +  __getstate__(self)
          +  __len__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
    
   +Class: ndarray
        (No members)
      +Func: openfile(fname)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: fromarrays(arrayList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)
      +Func: fromrecords(recList, dtype, shape, formats, names, titles, aligned, byteorder)
    	  	  Default_Args:(dtype, None), (shape, None), (formats, None), (names, None), (titles, None), (aligned, False), (byteorder, None)

 
Module: numpy.ma.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.ma.testutils-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: _assert_equal_on_sequences(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: almost(a, b, decimal, fill_value)
    	  	  Default_Args:(decimal, 6), (fill_value, True)
      +Func: approx(a, b, fill_value, rtol, atol)
    	  	  Default_Args:(fill_value, True), (rtol, 1e-05), (atol, 1e-08)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_approx_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, fill_value)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (fill_value, True)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_equal_records(a, b)
      +Func: assert_mask_equal(m1, m2, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: fail_if_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: fail_if_equal(actual, desired, err_msg)
    	  	  Default_Args:(err_msg, )
      +Func: filled(a, fill_value)
    	  	  Default_Args:(fill_value, None)
    
   +Class: float64
        (No members)
      +Func: getmask(a)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: mask_or(m1, m2, copy, shrink)
    	  	  Default_Args:(copy, False), (shrink, True)
    
   +Class: MaskedArray
          +  __int__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __getslice__(self, i, j)
          +  _update_from(self, obj)
          +  __str__(self)
          +  _get_recordmask(self)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  put(self, indices, values, mode)
        	  	  Default_Args:(mode, raise)
          +  __rsub__(self, other)
          +  astype(self, newtype)
          +  __rmul__(self, other)
          +  cumsum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  ptp(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __rpow__(self, other)
          +  _set_recordmask(self)
          +  _get_flat(self)
          +  __getstate__(self)
          +  __rfloordiv__(self, other)
          +  nonzero(self)
          +  ravel(self)
          +  __itruediv__(self, other)
          +  __getitem__(self, indx)
          +  __setstate__(self, state)
          +  __deepcopy__(self, memo)
        	  	  Default_Args:(memo, None)
          +  compress(self, condition, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __float__(self)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  tostring(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  __pow__(self, other)
          +  __eq__(self, other)
          +  resize(self, newshape, refcheck, order)
        	  	  Default_Args:(refcheck, True), (order, False)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  get_real(self)
          +  argmin(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __ipow__(self, other)
          +  __iadd__(self, other)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  round(self, decimals, out)
        	  	  Default_Args:(decimals, 0), (out, None)
          +  soften_mask(self)
          +  sort(self, axis, kind, order, endwith, fill_value)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None), (endwith, True), (fill_value, None)
          +  __rtruediv__(self, other)
          +  __ne__(self, other)
          +  argmax(self, axis, fill_value, out)
        	  	  Default_Args:(axis, None), (fill_value, None), (out, None)
          +  __reduce__(self)
          +  ids(self)
          +  mini(self, axis)
        	  	  Default_Args:(axis, None)
          +  __truediv__(self, other)
          +  tofile(self, fid, sep, format)
        	  	  Default_Args:(sep, ), (format, %s)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  shrink_mask(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __array_wrap__(self, obj, context)
        	  	  Default_Args:(context, None)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  reshape(self)
        	   Positional_Args: s
        	   Keyword_Args: kwargs
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  _get_data(self)
          +  take(self, indices, axis, out, mode)
        	  	  Default_Args:(axis, None), (out, None), (mode, raise)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  toflex(self)
          +  filled(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  __repr__(self)
          +  tolist(self, fill_value)
        	  	  Default_Args:(fill_value, None)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  iscontiguous(self)
          +  unshare_mask(self)
          +  trace(self, offset, axis1, axis2, dtype, out)
        	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
          +  __ifloordiv__(self, other)
          +  _set_flat(self, value)
          +  max(self, axis, out, fill_value)
        	  	  Default_Args:(axis, None), (out, None), (fill_value, None)
          +  __idiv__(self, other)
          +  get_imag(self)
          +  toflex(self)
          +  get_fill_value(self)
          +  compressed(self)
          +  __add__(self, other)
          +  tobytes(self, fill_value, order)
        	  	  Default_Args:(fill_value, None), (order, C)
          +  set_fill_value(self, value)
        	  	  Default_Args:(value, None)
          +  harden_mask(self)
          +  __isub__(self, other)
          +  count(self, axis)
        	  	  Default_Args:(axis, None)
          +  __radd__(self, other)
          +  __imul__(self, other)
          +  __setslice__(self, i, j, value)
          +  anom(self, axis, dtype)
        	  	  Default_Args:(axis, None), (dtype, None)
          +  __setitem__(self, indx, value)
          +  argsort(self, axis, kind, order, fill_value)
        	  	  Default_Args:(axis, None), (kind, quicksort), (order, None), (fill_value, None)
          +  cumprod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __setmask__(self, mask, copy)
        	  	  Default_Args:(copy, False)
          +  view(self, dtype, type, fill_value)
        	  	  Default_Args:(dtype, None), (type, None), (fill_value, None)
          +  _get_mask(self)
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
    
   +Class: ndarray
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matlib-------------------------------------------------
    
   +Class: ComplexWarning
        (No members)
    
   +Class: DataSource
          +  _iswritemode(self, mode)
          +  _isurl(self, path)
          +  _findfile(self, path)
          +  exists(self, path)
          +  __del__(self)
          +  abspath(self, path)
          +  _possible_names(self, filename)
          +  _iszip(self, filename)
          +  _splitzipext(self, filename)
          +  _cache(self, path)
          +  _sanitize_relative_path(self, path)
          +  open(self, path, mode)
        	  	  Default_Args:(mode, r)
          +  __init__(self, destpath)
        	  	  Default_Args:(destpath, .)
    
   +Class: MachAr
          +  _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title)
          +  __str__(self)
          +  __init__(self, float_conv, int_conv, float_to_float, float_to_str, title)
        	  	  Default_Args:(float_conv, <type float>), (int_conv, <type int>), (float_to_float, <type float>), (float_to_str, <function <lambda> at 0x0000000002F7DAC8>), (title, Python floating point number)
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: PackageLoader
          +  _obj2repr(self, obj)
          +  _get_info_files(self, package_dir, parent_path, parent_package)
        	  	  Default_Args:(parent_package, None)
          +  log(self, mess)
          +  _get_sorted_names(self)
          +  _format_titles(self, titles, colsep)
        	  	  Default_Args:(colsep, ---)
          +  get_pkgdocs(self)
          +  warn(self, mess)
          +  _init_info_modules(self, packages)
        	  	  Default_Args:(packages, None)
          +  error(self, mess)
          +  __call__(self)
        	   Positional_Args: packages
        	   Keyword_Args: options
          +  _execcmd(self, cmdstr)
          +  __init__(self, verbose, infunc)
        	  	  Default_Args:(verbose, False), (infunc, False)
          +  _get_doc_title(self, info_module)
    
   +Class: RankWarning
        (No members)
    
   +Class: VisibleDeprecationWarning
        (No members)
    +Built-in Function: add_docstring
    	-Method Arguments:
obj, docstring
      +Func: add_newdoc(place, obj, doc)
    +Built-in Function: add_newdoc_ufunc
    	-Method Arguments:
ufunc, new_docstring
      +Func: alen(a)
      +Func: all(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: allclose(a, b, rtol, atol)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08)
      +Func: alltrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
    +Built-in Function: alterdot
    	-Method Arguments: None
      +Func: amax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: amin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: angle(z, deg)
    	  	  Default_Args:(deg, 0)
      +Func: any(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: append(arr, values, axis)
    	  	  Default_Args:(axis, None)
      +Func: apply_along_axis(func1d, axis, arr)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: apply_over_axes(func, a, axes)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: argmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: argpartition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: argsort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: argwhere(a)
      +Func: around(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
    +Built-in Function: array
    	-Method Arguments:
object, dtype=None, copy=True, order=None, subok=False, ndmin=0
      +Func: array2string(a, max_line_width, precision, suppress_small, separator, prefix, style, formatter)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None), (separator,  ), (prefix, ), (style, <built-in function repr>), (formatter, None)
      +Func: array_equal(a1, a2)
      +Func: array_equiv(a1, a2)
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: array_split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: array_str(a, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asarray_chkfinite(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: ascontiguousarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asfarray(a, dtype)
    	  	  Default_Args:(dtype, <type numpy.float64>)
      +Func: asfortranarray(a, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: asscalar(a)
    	   Positional_Args: arys
    	   Positional_Args: arys
    	   Positional_Args: arys
      +Func: average(a, axis, weights, returned)
    	  	  Default_Args:(axis, None), (weights, None), (returned, False)
      +Func: bartlett(M)
      +Func: base_repr(number, base, padding)
    	  	  Default_Args:(base, 2), (padding, 0)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
    +Built-in Function: bincount
    	-Method Arguments:
x, weights=None, minlength=None
      +Func: blackman(M)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    
   +Class: bool_
        (No members)
    
   +Class: bool_
        (No members)
    
   +Class: broadcast
        (No members)
    	   Positional_Args: args
    +Built-in Function: busday_count
    	-Method Arguments:
begindates, enddates, weekmask=1111100, holidays=, busdaycal=None, out=None
    +Built-in Function: busday_offset
    	-Method Arguments:
dates, offsets, roll=raise, weekmask=1111100, holidays=None, busdaycal=None, out=None
    
   +Class: busdaycalendar
        (No members)
    
   +Class: int8
        (No members)
      +Func: byte_bounds(a)
    
   +Class: string_
        (No members)
    +Built-in Function: can_cast
    	-Method Arguments:
from, totype, casting = safe
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: character
        (No members)
    
   +Class: chararray
          +  upper(self)
          +  __ne__(self, other)
          +  lstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  capitalize(self)
          +  rpartition(self, sep)
          +  __radd__(self, other)
          +  __rmul__(self, i)
          +  endswith(self, suffix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  splitlines(self, keepends)
        	  	  Default_Args:(keepends, None)
          +  expandtabs(self, tabsize)
        	  	  Default_Args:(tabsize, 8)
          +  strip(self, chars)
        	  	  Default_Args:(chars, None)
          +  isdigit(self)
          +  __rmod__(self, other)
          +  ljust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  isdecimal(self)
          +  __lt__(self, other)
          +  index(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __array_finalize__(self, obj)
          +  isalnum(self)
          +  title(self)
          +  rindex(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __eq__(self, other)
          +  find(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  decode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  isalpha(self)
          +  split(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  rstrip(self, chars)
        	  	  Default_Args:(chars, None)
          +  encode(self, encoding, errors)
        	  	  Default_Args:(encoding, None), (errors, None)
          +  translate(self, table, deletechars)
        	  	  Default_Args:(deletechars, None)
          +  argsort(self, axis, kind, order)
        	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
          +  startswith(self, prefix, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  __getitem__(self, obj)
          +  rjust(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  swapcase(self)
          +  isnumeric(self)
          +  zfill(self, width)
          +  __add__(self, other)
          +  __gt__(self, other)
          +  replace(self, old, new, count)
        	  	  Default_Args:(count, None)
          +  rsplit(self, sep, maxsplit)
        	  	  Default_Args:(sep, None), (maxsplit, None)
          +  count(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  lower(self)
          +  join(self, seq)
          +  center(self, width, fillchar)
        	  	  Default_Args:(fillchar,  )
          +  __mod__(self, i)
          +  partition(self, sep)
          +  rfind(self, sub, start, end)
        	  	  Default_Args:(start, 0), (end, None)
          +  isspace(self)
          +  istitle(self)
          +  __le__(self, other)
          +  __mul__(self, i)
          +  islower(self)
          +  isupper(self)
          +  __ge__(self, other)
      +Func: choose(a, choices, out, mode)
    	  	  Default_Args:(out, None), (mode, raise)
      +Func: clip(a, a_min, a_max, out)
    	  	  Default_Args:(out, None)
    
   +Class: complex128
        (No members)
    
   +Class: complex128
        (No members)
      +Func: column_stack(tup)
    	   Positional_Args: arrays
    +Built-in Function: compare_chararrays
    	-Method Arguments: None
    
   +Class: complex128
        (No members)
    
   +Class: complex64
        (No members)
    
   +Class: complex128
        (No members)
    
   +Class: complexfloating
        (No members)
      +Func: compress(condition, a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: convolve(a, v, mode)
    	  	  Default_Args:(mode, full)
      +Func: copy(a, order)
    	  	  Default_Args:(order, K)
    +Built-in Function: copyto
    	-Method Arguments:
dst, src, casting=same_kind, where=None
      +Func: corrcoef(x, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: correlate(a, v, mode, old_behavior)
    	  	  Default_Args:(mode, valid), (old_behavior, False)
    +Built-in Function: count_nonzero
    	-Method Arguments:
a
      +Func: cov(m, y, rowvar, bias, ddof)
    	  	  Default_Args:(y, None), (rowvar, 1), (bias, 0), (ddof, None)
      +Func: cross(a, b, axisa, axisb, axisc, axis)
    	  	  Default_Args:(axisa, -1), (axisb, -1), (axisc, -1), (axis, None)
    
   +Class: complex64
        (No members)
      +Func: cumprod(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumproduct(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: cumsum(a, axis, dtype, out)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None)
    
   +Class: datetime64
        (No members)
    +Built-in Function: datetime_as_string
    	-Method Arguments: None
    +Built-in Function: datetime_data
    	-Method Arguments: None
      +Func: delete(arr, obj, axis)
    	  	  Default_Args:(axis, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: <lambda>(msg)
      +Func: diag(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diag_indices(n, ndim)
    	  	  Default_Args:(ndim, 2)
      +Func: diag_indices_from(arr)
      +Func: diagflat(v, k)
    	  	  Default_Args:(k, 0)
      +Func: diagonal(a, offset, axis1, axis2)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1)
      +Func: diff(a, n, axis)
    	  	  Default_Args:(n, 1), (axis, -1)
    +Built-in Function: digitize
    	-Method Arguments:
x, bins, right=False
      +Func: disp(mesg, device, linefeed)
    	  	  Default_Args:(device, None), (linefeed, True)
    +Built-in Function: dot
    	-Method Arguments:
a, b, out=None
    
   +Class: float64
        (No members)
      +Func: dsplit(ary, indices_or_sections)
      +Func: dstack(tup)
    
   +Class: dtype
        (No members)
      +Func: ediff1d(ary, to_end, to_begin)
    	  	  Default_Args:(to_end, None), (to_begin, None)
    +Built-in Function: einsum
    	-Method Arguments:
subscripts, *operands, out=None, dtype=None, order=K, casting=safe
      +Func: empty(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
    +Built-in Function: empty_like
    	-Method Arguments:
a, dtype=None, order=K, subok=True
    
   +Class: errstate
          +  __exit__(self)
        	   Positional_Args: exc_info
          +  __enter__(self)
          +  __init__(self)
        	   Keyword_Args: kwargs
      +Func: expand_dims(a, axis)
      +Func: extract(condition, arr)
      +Func: eye(n, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
    +Built-in Function: _fastCopyAndTranspose
    	-Method Arguments:
a
      +Func: fill_diagonal(a, val, wrap)
    	  	  Default_Args:(wrap, False)
      +Func: find_common_type(array_types, scalar_types)
    
   +Class: finfo
          +  _init(self, dtype)
          +  __str__(self)
          +  __repr__(self)
      +Func: fix(x, y)
    	  	  Default_Args:(y, None)
    
   +Class: flatiter
        (No members)
      +Func: flatnonzero(a)
    
   +Class: flexible
        (No members)
      +Func: fliplr(m)
      +Func: flipud(m)
    
   +Class: float16
        (No members)
    
   +Class: float32
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: floating
        (No members)
    
   +Class: format_parser
          +  _setfieldnames(self, names, titles)
          +  _createdescr(self, byteorder)
          +  _parseFormats(self, formats, aligned)
        	  	  Default_Args:(aligned, 0)
          +  __init__(self, formats, names, titles, aligned, byteorder)
        	  	  Default_Args:(aligned, False), (byteorder, None)
    +Built-in Function: frombuffer
    	-Method Arguments:
buffer, dtype=float, count=-1, offset=0
    +Built-in Function: fromfile
    	-Method Arguments:
file, dtype=float, count=-1, sep=
      +Func: fromfunction(function, shape)
    	   Keyword_Args: kwargs
    +Built-in Function: fromiter
    	-Method Arguments:
iterable, dtype, count=-1
    +Built-in Function: frompyfunc
    	-Method Arguments:
func, nin, nout
      +Func: fromregex(file, regexp, dtype)
    +Built-in Function: fromstring
    	-Method Arguments:
string, dtype=float, count=-1, sep=
      +Func: full(shape, fill_value, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: full_like(a, fill_value, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: fv(rate, nper, pmt, pv, when)
    	  	  Default_Args:(when, end)
    
   +Class: generic
        (No members)
      +Func: genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (skiprows, 0), (skip_header, 0), (skip_footer, 0), (converters, None), (missing, ), (missing_values, None), (filling_values, None), (usecols, None), (names, None), (excludelist, None), (deletechars, None), (replace_space, _), (autostrip, False), (case_sensitive, True), (defaultfmt, f%i), (unpack, None), (usemask, False), (loose, True), (invalid_raise, True)
    	   Positional_Args: args
    +Built-in Function: getbuffer
    	-Method Arguments:
obj ,offset, size
    +Built-in Function: geterrobj
    	-Method Arguments: None
      +Func: gradient(f)
    	   Positional_Args: varargs
    	   Keyword_Args: kwargs
    
   +Class: float16
        (No members)
      +Func: hamming(M)
      +Func: hanning(M)
      +Func: histogram(a, bins, range, normed, weights, density)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None), (density, None)
      +Func: histogram2d(x, y, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: histogramdd(sample, bins, range, normed, weights)
    	  	  Default_Args:(bins, 10), (range, None), (normed, False), (weights, None)
      +Func: hsplit(ary, indices_or_sections)
      +Func: hstack(tup)
      +Func: i0(x)
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: iinfo
          +  __str__(self)
          +  __repr__(self)
          +  __init__(self, int_type)
      +Func: imag(val)
      +Func: in1d(ar1, ar2, assume_unique, invert)
    	  	  Default_Args:(assume_unique, False), (invert, False)
      +Func: indices(dimensions, dtype)
    	  	  Default_Args:(dtype, <type int>)
    
   +Class: inexact
        (No members)
      +Func: info(object, maxwidth, output, toplevel)
    	  	  Default_Args:(object, None), (maxwidth, 76), (output, <open file <stdout>, mode w at 0x00000000024120C0>), (toplevel, numpy)
    +Built-in Function: inner
    	-Method Arguments:
a, b
      +Func: insert(arr, obj, values, axis)
    	  	  Default_Args:(axis, None)
    
   +Class: int64
        (No members)
    
   +Class: int16
        (No members)
    
   +Class: int32
        (No members)
    
   +Class: int64
        (No members)
    
   +Class: int8
        (No members)
    
   +Class: int32
        (No members)
    +Built-in Function: int_asbuffer
    	-Method Arguments: None
    
   +Class: int32
        (No members)
    
   +Class: integer
        (No members)
      +Func: interp(x, xp, fp, left, right)
    	  	  Default_Args:(left, None), (right, None)
      +Func: intersect1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
    
   +Class: int64
        (No members)
      +Func: ipmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: irr(values)
    +Built-in Function: is_busday
    	-Method Arguments:
dates, weekmask=1111100, holidays=None, busdaycal=None, out=None
      +Func: isclose(a, b, rtol, atol, equal_nan)
    	  	  Default_Args:(rtol, 1e-05), (atol, 1e-08), (equal_nan, False)
      +Func: iscomplex(x)
      +Func: iscomplexobj(x)
      +Func: isfortran(a)
      +Func: isneginf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isposinf(x, y)
    	  	  Default_Args:(y, None)
      +Func: isreal(x)
      +Func: isrealobj(x)
      +Func: isscalar(num)
      +Func: issctype(rep)
      +Func: issubclass_(arg1, arg2)
      +Func: issubdtype(arg1, arg2)
      +Func: issubsctype(arg1, arg2)
      +Func: iterable(y)
    	   Positional_Args: args
      +Func: kaiser(M, beta)
      +Func: kron(a, b)
    +Built-in Function: lexsort
    	-Method Arguments:
keys, axis=-1
      +Func: linspace(start, stop, num, endpoint, retstep, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (retstep, False), (dtype, None)
      +Func: load(file, mmap_mode)
    	  	  Default_Args:(mmap_mode, None)
    +Built-in Function: loads
    	-Method Arguments:
string
      +Func: loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    	  	  Default_Args:(dtype, <type float>), (comments, #), (delimiter, None), (converters, None), (skiprows, 0), (usecols, None), (unpack, False), (ndmin, 0)
      +Func: logspace(start, stop, num, endpoint, base, dtype)
    	  	  Default_Args:(num, 50), (endpoint, True), (base, 10.0), (dtype, None)
    
   +Class: complex128
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: float64
        (No members)
    
   +Class: int64
        (No members)
      +Func: lookfor(what, module, import_modules, regenerate, output)
    	  	  Default_Args:(module, None), (import_modules, True), (regenerate, False), (output, None)
      +Func: mafromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: mask_indices(n, mask_func, k)
    	  	  Default_Args:(k, 0)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: maximum_sctype(t)
    +Built-in Function: may_share_memory
    	-Method Arguments: None
      +Func: mean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: median(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
    
   +Class: memmap
          +  flush(self)
          +  __array_finalize__(self, obj)
    	   Positional_Args: xi
    	   Keyword_Args: kwargs
    +Built-in Function: min_scalar_type
    	-Method Arguments:
a
      +Func: mintypecode(typechars, typeset, default)
    	  	  Default_Args:(typeset, GDFgdf), (default, d)
      +Func: mirr(values, finance_rate, reinvest_rate)
      +Func: msort(a)
      +Func: nan_to_num(x)
      +Func: nanargmax(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanargmin(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: nanmax(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanmean(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: nanmedian(a, axis, out, overwrite_input, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (keepdims, False)
      +Func: nanmin(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: nanpercentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: nanstd(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
      +Func: nansum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, 0)
      +Func: nanvar(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: ndarray
        (No members)
    
   +Class: ndenumerate
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self, arr)
          +  __next__(self)
      +Func: ndfromtxt(fname)
    	   Keyword_Args: kwargs
      +Func: ndim(a)
    
   +Class: ndindex
          +  ndincr(self)
          +  __next__(self)
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: shape
          +  __next__(self)
    
   +Class: nditer
        (No members)
    +Built-in Function: nested_iters
    	-Method Arguments: None
    +Built-in Function: newbuffer
    	-Method Arguments:
size
      +Func: nonzero(a)
      +Func: nper(rate, pmt, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: npv(rate, values)
    
   +Class: number
        (No members)
      +Func: obj2sctype(rep, default)
    	  	  Default_Args:(default, None)
    
   +Class: object_
        (No members)
    
   +Class: object_
        (No members)
      +Func: ones(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: ones_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)
      +Func: outer(a, b, out)
    	  	  Default_Args:(out, None)
    +Built-in Function: packbits
    	-Method Arguments:
myarray, axis=None
      +Func: pad(array, pad_width, mode)
    	  	  Default_Args:(mode, None)
    	   Keyword_Args: kwargs
      +Func: partition(a, kth, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, introselect), (order, None)
      +Func: percentile(a, q, axis, out, overwrite_input, interpolation, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (overwrite_input, False), (interpolation, linear), (keepdims, False)
      +Func: piecewise(x, condlist, funclist)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: packages
    	   Keyword_Args: options
      +Func: place(arr, mask, vals)
      +Func: pmt(rate, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0), (when, end)
      +Func: poly(seq_of_zeros)
    
   +Class: poly1d
          +  __rdiv__(self, other)
          +  __str__(self)
          +  __radd__(self, other)
          +  __div__(self, other)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  __init__(self, c_or_r, r, variable)
        	  	  Default_Args:(r, 0), (variable, None)
          +  __setattr__(self, key, val)
          +  __getattr__(self, key)
          +  __pos__(self)
          +  __call__(self, val)
          +  __len__(self)
          +  __neg__(self)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  __getitem__(self, val)
          +  __setitem__(self, key, val)
          +  __pow__(self, val)
          +  __add__(self, other)
          +  __eq__(self, other)
          +  __array__(self, t)
        	  	  Default_Args:(t, None)
          +  __iter__(self)
          +  integ(self, m, k)
        	  	  Default_Args:(m, 1), (k, 0)
          +  __div__(self, other)
          +  __mul__(self, other)
          +  __repr__(self)
          +  __sub__(self, other)
      +Func: polyadd(a1, a2)
      +Func: polyder(p, m)
    	  	  Default_Args:(m, 1)
      +Func: polydiv(u, v)
      +Func: polyfit(x, y, deg, rcond, full, w, cov)
    	  	  Default_Args:(rcond, None), (full, False), (w, None), (cov, False)
      +Func: polyint(p, m, k)
    	  	  Default_Args:(m, 1), (k, None)
      +Func: polymul(a1, a2)
      +Func: polysub(a1, a2)
      +Func: polyval(p, x)
      +Func: ppmt(rate, per, nper, pv, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
      +Func: prod(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: product(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
    +Built-in Function: promote_types
    	-Method Arguments:
type1, type2
      +Func: ptp(a, axis, out)
    	  	  Default_Args:(axis, None), (out, None)
      +Func: put(a, ind, v, mode)
    	  	  Default_Args:(mode, raise)
    +Built-in Function: putmask
    	-Method Arguments:
a, mask, values
      +Func: pv(rate, nper, pmt, fv, when)
    	  	  Default_Args:(fv, 0.0), (when, end)
    	   Positional_Args: args
    	   Positional_Args: args
      +Func: rank(a)
      +Func: rate(nper, pmt, pv, fv, when, guess, tol, maxiter)
    	  	  Default_Args:(when, end), (guess, 0.1), (tol, 1e-06), (maxiter, 100)
      +Func: ravel(a, order)
    	  	  Default_Args:(order, C)
    +Built-in Function: ravel_multi_index
    	-Method Arguments:
multi_index, dims, mode=raise, order=C
      +Func: real(val)
      +Func: real_if_close(a, tol)
    	  	  Default_Args:(tol, 100)
    
   +Class: recarray
          +  __getitem__(self, indx)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
          +  field(self, attr, val)
        	  	  Default_Args:(val, None)
          +  __repr__(self)
          +  view(self, dtype, type)
        	  	  Default_Args:(dtype, None), (type, None)
      +Func: recfromcsv(fname)
    	   Keyword_Args: kwargs
      +Func: recfromtxt(fname)
    	   Keyword_Args: kwargs
    
   +Class: record
          +  __repr__(self)
          +  __str__(self)
          +  pprint(self)
          +  __getattribute__(self, attr)
          +  __setattr__(self, attr, val)
      +Func: repeat(a, repeats, axis)
    	  	  Default_Args:(axis, None)
      +Func: repmat(a, m, n)
      +Func: require(a, dtype, requirements)
    	  	  Default_Args:(dtype, None), (requirements, None)
      +Func: reshape(a, newshape, order)
    	  	  Default_Args:(order, C)
      +Func: resize(a, new_shape)
    +Built-in Function: restoredot
    	-Method Arguments: None
    +Built-in Function: result_type
    	-Method Arguments:
*arrays_and_dtypes
      +Func: roll(a, shift, axis)
    	  	  Default_Args:(axis, None)
      +Func: rollaxis(a, axis, start)
    	  	  Default_Args:(start, 0)
      +Func: roots(p)
      +Func: rot90(m, k)
    	  	  Default_Args:(k, 1)
      +Func: round_(a, decimals, out)
    	  	  Default_Args:(decimals, 0), (out, None)
      +Func: vstack(tup)
      +Func: safe_eval(source)
      +Func: save(file, arr)
      +Func: savetxt(fname, X, fmt, delimiter, newline, header, footer, comments)
    	  	  Default_Args:(fmt, %.18e), (delimiter,  ), (newline, \n), (header, ), (footer, ), (comments, # )
      +Func: savez(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: savez_compressed(file)
    	   Positional_Args: args
    	   Keyword_Args: kwds
      +Func: sctype2char(sctype)
      +Func: searchsorted(a, v, side, sorter)
    	  	  Default_Args:(side, left), (sorter, None)
      +Func: select(condlist, choicelist, default)
    	  	  Default_Args:(default, 0)
    +Built-in Function: set_numeric_ops
    	-Method Arguments:
op1=func1, op2=func2, ...
      +Func: set_printoptions(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, formatter)
    	  	  Default_Args:(precision, None), (threshold, None), (edgeitems, None), (linewidth, None), (suppress, None), (nanstr, None), (infstr, None), (formatter, None)
      +Func: set_string_function(f, repr)
    	  	  Default_Args:(repr, True)
      +Func: setbufsize(size)
      +Func: setdiff1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: seterr(all, divide, over, under, invalid)
    	  	  Default_Args:(all, None), (divide, None), (over, None), (under, None), (invalid, None)
      +Func: seterrcall(func)
    +Built-in Function: seterrobj
    	-Method Arguments:
errobj
      +Func: setxor1d(ar1, ar2, assume_unique)
    	  	  Default_Args:(assume_unique, False)
      +Func: shape(a)
    
   +Class: int16
        (No members)
    
   +Class: signedinteger
        (No members)
      +Func: sinc(x)
    
   +Class: float32
        (No members)
    
   +Class: complex64
        (No members)
      +Func: size(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: sometrue(a, axis, out, keepdims)
    	  	  Default_Args:(axis, None), (out, None), (keepdims, False)
      +Func: sort(a, axis, kind, order)
    	  	  Default_Args:(axis, -1), (kind, quicksort), (order, None)
      +Func: sort_complex(a)
      +Func: source(object, output)
    	  	  Default_Args:(output, <open file <stdout>, mode w at 0x00000000024120C0>)
      +Func: split(ary, indices_or_sections, axis)
    	  	  Default_Args:(axis, 0)
      +Func: squeeze(a, axis)
    	  	  Default_Args:(axis, None)
      +Func: std(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
    
   +Class: string_
        (No members)
      +Func: sum(a, axis, dtype, out, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (keepdims, False)
      +Func: swapaxes(a, axis1, axis2)
      +Func: take(a, indices, axis, out, mode)
    	  	  Default_Args:(axis, None), (out, None), (mode, raise)
      +Func: tensordot(a, b, axes)
    	  	  Default_Args:(axes, 2)
      +Func: tile(A, reps)
    
   +Class: timedelta64
        (No members)
      +Func: trace(a, offset, axis1, axis2, dtype, out)
    	  	  Default_Args:(offset, 0), (axis1, 0), (axis2, 1), (dtype, None), (out, None)
      +Func: transpose(a, axes)
    	  	  Default_Args:(axes, None)
      +Func: trapz(y, x, dx, axis)
    	  	  Default_Args:(x, None), (dx, 1.0), (axis, -1)
      +Func: tri(N, M, k, dtype)
    	  	  Default_Args:(M, None), (k, 0), (dtype, <type float>)
      +Func: tril(m, k)
    	  	  Default_Args:(k, 0)
      +Func: tril_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: tril_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: trim_zeros(filt, trim)
    	  	  Default_Args:(trim, fb)
      +Func: triu(m, k)
    	  	  Default_Args:(k, 0)
      +Func: triu_indices(n, k, m)
    	  	  Default_Args:(k, 0), (m, None)
      +Func: triu_indices_from(arr, k)
    	  	  Default_Args:(k, 0)
      +Func: typename(char)
    
   +Class: uint8
        (No members)
    
   +Class: ufunc
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint16
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint8
        (No members)
    
   +Class: uint32
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: uint64
        (No members)
    
   +Class: unicode_
        (No members)
    
   +Class: unicode_
        (No members)
      +Func: union1d(ar1, ar2)
      +Func: unique(ar, return_index, return_inverse, return_counts)
    	  	  Default_Args:(return_index, False), (return_inverse, False), (return_counts, False)
    +Built-in Function: unpackbits
    	-Method Arguments:
myarray, axis=None
    +Built-in Function: unravel_index
    	-Method Arguments:
indices, dims, order=C
    
   +Class: unsignedinteger
        (No members)
      +Func: unwrap(p, discont, axis)
    	  	  Default_Args:(discont, 3.141592653589793), (axis, -1)
    
   +Class: uint16
        (No members)
      +Func: vander(x, N, increasing)
    	  	  Default_Args:(N, None), (increasing, False)
      +Func: var(a, axis, dtype, out, ddof, keepdims)
    	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0), (keepdims, False)
    +Built-in Function: vdot
    	-Method Arguments:
a, b
    
   +Class: vectorize
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _get_ufunc_and_otypes(self, func, args)
          +  _vectorize_call(self, func, args)
          +  __init__(self, pyfunc, otypes, doc, excluded, cache)
        	  	  Default_Args:(otypes, ), (doc, None), (excluded, None), (cache, False)
    
   +Class: void
        (No members)
    
   +Class: void
        (No members)
      +Func: vsplit(ary, indices_or_sections)
      +Func: vstack(tup)
    +Built-in Function: where
    	-Method Arguments:
condition, x, y
      +Func: who(vardict)
    	  	  Default_Args:(vardict, None)
      +Func: zeros(shape, dtype, order)
    	  	  Default_Args:(dtype, None), (order, C)
      +Func: zeros_like(a, dtype, order, subok)
    	  	  Default_Args:(dtype, None), (order, K), (subok, True)

 
Module: numpy.matrixlib-------------------------------------------------
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.matrixlib.defmatrix-------------------------------------------------
      +Func: _convert_from_string(data)
      +Func: _eval(astr)
      +Func: _from_string(str, gdict, ldict)
      +Func: asanyarray(a, dtype, order)
    	  	  Default_Args:(dtype, None), (order, None)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: binary_repr(num, width)
    	  	  Default_Args:(width, None)
      +Func: bmat(obj, ldict, gdict)
    	  	  Default_Args:(ldict, None), (gdict, None)
    +Built-in Function: concatenate
    	-Method Arguments:
(a1, a2, ...
      +Func: identity(n, dtype)
    	  	  Default_Args:(dtype, None)
      +Func: isscalar(num)
      +Func: issubdtype(arg1, arg2)
      +Func: asmatrix(data, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: matrix
          +  getH(self)
          +  getI(self)
          +  argmax(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  getA(self)
          +  __str__(self)
          +  all(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rmul__(self, other)
          +  getT(self)
          +  any(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  ptp(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __rpow__(self, other)
          +  __array_finalize__(self, obj)
          +  min(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  sum(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  max(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  var(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  prod(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
          +  __repr__(self)
          +  tolist(self)
          +  __getitem__(self, index)
          +  _collapse(self, axis)
          +  getA1(self)
          +  __pow__(self, other)
          +  std(self, axis, dtype, out, ddof)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None), (ddof, 0)
          +  _align(self, axis)
          +  __imul__(self, other)
          +  argmin(self, axis, out)
        	  	  Default_Args:(axis, None), (out, None)
          +  __ipow__(self, other)
          +  __mul__(self, other)
          +  mean(self, axis, dtype, out)
        	  	  Default_Args:(axis, None), (dtype, None), (out, None)
      +Func: matrix_power(M, n)

 
Module: numpy.matrixlib.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.polynomial-------------------------------------------------
    
   +Class: Chebyshev
        (No members)
    
   +Class: Hermite
        (No members)
    
   +Class: HermiteE
        (No members)
    
   +Class: Laguerre
        (No members)
    
   +Class: Legendre
        (No members)
    
   +Class: Polynomial
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.polynomial._polybase-------------------------------------------------
    
   +Class: ABCMeta
          +  __instancecheck__(cls, instance)
          +  register(cls, subclass)
          +  __subclasscheck__(cls, subclass)
          +  _dump_registry(cls, file)
        	  	  Default_Args:(file, None)
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Number
        (No members)
      +Func: abstractmethod(funcobj)
    
   +Class: abstractproperty
        (No members)

 
Module: numpy.polynomial.chebyshev-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Chebyshev
        (No members)
      +Func: _cseries_to_zseries(c)
      +Func: _zseries_der(zs)
      +Func: _zseries_div(z1, z2)
      +Func: _zseries_int(zs)
      +Func: _zseries_mul(z1, z2)
      +Func: _zseries_to_cseries(zs)
      +Func: cheb2poly(c)
      +Func: chebadd(c1, c2)
      +Func: chebcompanion(c)
      +Func: chebder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: chebdiv(c1, c2)
      +Func: chebfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: chebfromroots(roots)
      +Func: chebgauss(deg)
      +Func: chebgrid2d(x, y, c)
      +Func: chebgrid3d(x, y, z, c)
      +Func: chebint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: chebline(off, scl)
      +Func: chebmul(c1, c2)
      +Func: chebmulx(c)
      +Func: chebpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: chebpts1(npts)
      +Func: chebpts2(npts)
      +Func: chebroots(c)
      +Func: chebsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: chebval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: chebval2d(x, y, c)
      +Func: chebval3d(x, y, z, c)
      +Func: chebvander(x, deg)
      +Func: chebvander2d(x, y, deg)
      +Func: chebvander3d(x, y, z, deg)
      +Func: chebweight(x)
      +Func: poly2cheb(pol)

 
Module: numpy.polynomial.hermite-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Hermite
        (No members)
      +Func: herm2poly(c)
      +Func: hermadd(c1, c2)
      +Func: hermcompanion(c)
      +Func: hermder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermdiv(c1, c2)
      +Func: hermfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermfromroots(roots)
      +Func: hermgauss(deg)
      +Func: hermgrid2d(x, y, c)
      +Func: hermgrid3d(x, y, z, c)
      +Func: hermint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermline(off, scl)
      +Func: hermmul(c1, c2)
      +Func: hermmulx(c)
      +Func: hermpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermroots(c)
      +Func: hermsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermval2d(x, y, c)
      +Func: hermval3d(x, y, z, c)
      +Func: hermvander(x, deg)
      +Func: hermvander2d(x, y, deg)
      +Func: hermvander3d(x, y, z, deg)
      +Func: hermweight(x)
      +Func: poly2herm(pol)

 
Module: numpy.polynomial.hermite_e-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: HermiteE
        (No members)
      +Func: herme2poly(c)
      +Func: hermeadd(c1, c2)
      +Func: hermecompanion(c)
      +Func: hermeder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: hermediv(c1, c2)
      +Func: hermefit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: hermefromroots(roots)
      +Func: hermegauss(deg)
      +Func: hermegrid2d(x, y, c)
      +Func: hermegrid3d(x, y, z, c)
      +Func: hermeint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: hermeline(off, scl)
      +Func: hermemul(c1, c2)
      +Func: hermemulx(c)
      +Func: hermepow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: hermeroots(c)
      +Func: hermesub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: hermeval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: hermeval2d(x, y, c)
      +Func: hermeval3d(x, y, z, c)
      +Func: hermevander(x, deg)
      +Func: hermevander2d(x, y, deg)
      +Func: hermevander3d(x, y, z, deg)
      +Func: hermeweight(x)
      +Func: poly2herme(pol)

 
Module: numpy.polynomial.laguerre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Laguerre
        (No members)
      +Func: lag2poly(c)
      +Func: lagadd(c1, c2)
      +Func: lagcompanion(c)
      +Func: lagder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: lagdiv(c1, c2)
      +Func: lagfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: lagfromroots(roots)
      +Func: laggauss(deg)
      +Func: laggrid2d(x, y, c)
      +Func: laggrid3d(x, y, z, c)
      +Func: lagint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: lagline(off, scl)
      +Func: lagmul(c1, c2)
      +Func: lagmulx(c)
      +Func: lagpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: lagroots(c)
      +Func: lagsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: lagval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: lagval2d(x, y, c)
      +Func: lagval3d(x, y, z, c)
      +Func: lagvander(x, deg)
      +Func: lagvander2d(x, y, deg)
      +Func: lagvander3d(x, y, z, deg)
      +Func: lagweight(x)
      +Func: poly2lag(pol)

 
Module: numpy.polynomial.legendre-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Legendre
        (No members)
      +Func: leg2poly(c)
      +Func: legadd(c1, c2)
      +Func: legcompanion(c)
      +Func: legder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: legdiv(c1, c2)
      +Func: legfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: legfromroots(roots)
      +Func: leggauss(deg)
      +Func: leggrid2d(x, y, c)
      +Func: leggrid3d(x, y, z, c)
      +Func: legint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: legline(off, scl)
      +Func: legmul(c1, c2)
      +Func: legmulx(c)
      +Func: legpow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, 16)
      +Func: legroots(c)
      +Func: legsub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: legval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: legval2d(x, y, c)
      +Func: legval3d(x, y, z, c)
      +Func: legvander(x, deg)
      +Func: legvander2d(x, y, deg)
      +Func: legvander3d(x, y, z, deg)
      +Func: legweight(x)
      +Func: poly2leg(pol)

 
Module: numpy.polynomial.polynomial-------------------------------------------------
    
   +Class: ABCPolyBase
          +  __repr__(self)
          +  _val(self)
          +  __str__(self)
          +  _add(self)
          +  __rsub__(self, other)
          +  __rdiv__(self, other)
          +  __rmul__(self, other)
          +  has_samecoef(self, other)
          +  roots(self)
          +  _line(self)
          +  cutdeg(self, deg)
          +  copy(self)
          +  _int(self)
          +  basis(cls, deg, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _der(self)
          +  has_samedomain(self, other)
          +  __rfloordiv__(self, other)
          +  __len__(self)
          +  __rdivmod__(self, other)
          +  __setstate__(self, dict)
          +  _fit(self)
          +  __call__(self, arg)
          +  __iter__(self)
          +  linspace(self, n, domain)
        	  	  Default_Args:(n, 100), (domain, None)
          +  _sub(self)
          +  __eq__(self, other)
          +  __mod__(self, other)
          +  integ(self, m, k, lbnd)
        	  	  Default_Args:(m, 1), (k, ), (lbnd, None)
          +  mapparms(self)
          +  cast(cls, series, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _div(self)
          +  __floordiv__(self, other)
          +  __sub__(self, other)
          +  trim(self, tol)
        	  	  Default_Args:(tol, 0)
          +  __rtruediv__(self, other)
          +  _mul(self)
          +  _pow(self)
          +  has_sametype(self, other)
          +  has_samewindow(self, other)
          +  __truediv__(self, other)
          +  __rmod__(self, other)
          +  __init__(self, coef, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  _get_coefficients(self, other)
          +  degree(self)
          +  __pos__(self)
          +  fromroots(cls, roots, domain, window)
        	  	  Default_Args:(domain, ), (window, None)
          +  _roots(self)
          +  __getstate__(self)
          +  __mul__(self, other)
          +  __ne__(self, other)
          +  deriv(self, m)
        	  	  Default_Args:(m, 1)
          +  truncate(self, size)
          +  __divmod__(self, other)
          +  __add__(self, other)
          +  identity(cls, domain, window)
        	  	  Default_Args:(domain, None), (window, None)
          +  convert(self, domain, kind, window)
        	  	  Default_Args:(domain, None), (kind, None), (window, None)
          +  __radd__(self, other)
          +  fit(cls, x, y, deg, domain, rcond, full, w, window)
        	  	  Default_Args:(domain, None), (rcond, None), (full, False), (w, None), (window, None)
          +  __div__(self, other)
          +  _fromroots(self)
          +  __neg__(self)
          +  __pow__(self, other)
    
   +Class: Polynomial
        (No members)
      +Func: polyadd(c1, c2)
      +Func: polycompanion(c)
      +Func: polyder(c, m, scl, axis)
    	  	  Default_Args:(m, 1), (scl, 1), (axis, 0)
      +Func: polydiv(c1, c2)
      +Func: polyfit(x, y, deg, rcond, full, w)
    	  	  Default_Args:(rcond, None), (full, False), (w, None)
      +Func: polyfromroots(roots)
      +Func: polygrid2d(x, y, c)
      +Func: polygrid3d(x, y, z, c)
      +Func: polyint(c, m, k, lbnd, scl, axis)
    	  	  Default_Args:(m, 1), (k, ), (lbnd, 0), (scl, 1), (axis, 0)
      +Func: polyline(off, scl)
      +Func: polymul(c1, c2)
      +Func: polymulx(c)
      +Func: polypow(c, pow, maxpower)
    	  	  Default_Args:(maxpower, None)
      +Func: polyroots(c)
      +Func: polysub(c1, c2)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: polyval(x, c, tensor)
    	  	  Default_Args:(tensor, True)
      +Func: polyval2d(x, y, c)
      +Func: polyval3d(x, y, z, c)
      +Func: polyvander(x, deg)
      +Func: polyvander2d(x, y, deg)
      +Func: polyvander3d(x, y, z, deg)

 
Module: numpy.polynomial.polyutils-------------------------------------------------
    
   +Class: PolyBase
        (No members)
    
   +Class: PolyDomainError
        (No members)
    
   +Class: PolyError
        (No members)
    
   +Class: RankWarning
        (No members)
      +Func: as_series(alist, trim)
    	  	  Default_Args:(trim, True)
      +Func: getdomain(x)
      +Func: mapdomain(x, old, new)
      +Func: mapparms(old, new)
      +Func: trimcoef(c, tol)
    	  	  Default_Args:(tol, 0)
      +Func: trimseq(seq)

 
Module: numpy.polynomial.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.random-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: bench(self, label, verbose, extra_argv)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.info-------------------------------------------------
    (No members)

 
Module: numpy.random.mtrand-------------------------------------------------
    +Built-in Function: allocate_lock
    	-Method Arguments: None
    
   +Class: RandomState
        (No members)
    +Built-in Function: _shape_from_size
    	-Method Arguments: None
    +Built-in Function: beta
    	-Method Arguments: None
    +Built-in Function: binomial
    	-Method Arguments: None
    +Built-in Function: bytes
    	-Method Arguments: None
    +Built-in Function: chisquare
    	-Method Arguments: None
    +Built-in Function: choice
    	-Method Arguments: None
    +Built-in Function: dirichlet
    	-Method Arguments: None
    +Built-in Function: exponential
    	-Method Arguments: None
    +Built-in Function: f
    	-Method Arguments: None
    +Built-in Function: gamma
    	-Method Arguments: None
    +Built-in Function: geometric
    	-Method Arguments: None
    +Built-in Function: get_state
    	-Method Arguments: None
    +Built-in Function: gumbel
    	-Method Arguments: None
    +Built-in Function: hypergeometric
    	-Method Arguments: None
    +Built-in Function: laplace
    	-Method Arguments: None
    +Built-in Function: logistic
    	-Method Arguments: None
    +Built-in Function: lognormal
    	-Method Arguments: None
    +Built-in Function: logseries
    	-Method Arguments: None
    +Built-in Function: multinomial
    	-Method Arguments: None
    +Built-in Function: multivariate_normal
    	-Method Arguments: None
    +Built-in Function: negative_binomial
    	-Method Arguments: None
    +Built-in Function: noncentral_chisquare
    	-Method Arguments: None
    +Built-in Function: noncentral_f
    	-Method Arguments: None
    +Built-in Function: normal
    	-Method Arguments: None
    +Built-in Function: pareto
    	-Method Arguments: None
    +Built-in Function: permutation
    	-Method Arguments: None
    +Built-in Function: poisson
    	-Method Arguments: None
    +Built-in Function: power
    	-Method Arguments: None
    +Built-in Function: rand
    	-Method Arguments: None
    +Built-in Function: randint
    	-Method Arguments: None
    +Built-in Function: randn
    	-Method Arguments: None
    +Built-in Function: random_integers
    	-Method Arguments: None
    +Built-in Function: random_sample
    	-Method Arguments: None
    +Built-in Function: rayleigh
    	-Method Arguments: None
    +Built-in Function: seed
    	-Method Arguments: None
    +Built-in Function: set_state
    	-Method Arguments: None
    +Built-in Function: shuffle
    	-Method Arguments: None
    +Built-in Function: standard_cauchy
    	-Method Arguments: None
    +Built-in Function: standard_exponential
    	-Method Arguments: None
    +Built-in Function: standard_gamma
    	-Method Arguments: None
    +Built-in Function: standard_normal
    	-Method Arguments: None
    +Built-in Function: standard_t
    	-Method Arguments: None
    +Built-in Function: triangular
    	-Method Arguments: None
    +Built-in Function: uniform
    	-Method Arguments: None
    +Built-in Function: vonmises
    	-Method Arguments: None
    +Built-in Function: wald
    	-Method Arguments: None
    +Built-in Function: weibull
    	-Method Arguments: None
    +Built-in Function: zipf
    	-Method Arguments: None

 
Module: numpy.random.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)
      +Func: dirname(p)
      +Func: join(path)
    	   Positional_Args: paths
      +Func: newer(source, target)
      +Func: split(p)

 
Module: numpy.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing-------------------------------------------------
    
   +Class: IgnoreException
        (No members)
    
   +Class: TestCase
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  __str__(self)
          +  addCleanup(self, function)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  _getAssertEqualityFunc(self, first, second)
          +  assertGreater(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  assertMultiLineEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNotNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  _addSkip(self, result, reason)
          +  _truncateMessage(self, message, diff)
          +  assertNotEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertRaisesRegexp(self, expected_exception, expected_regexp, callable_obj)
        	  	  Default_Args:(callable_obj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  assertRegexpMatches(self, text, expected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  _baseAssertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertLessEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
          +  __call__(self)
        	   Positional_Args: args
        	   Keyword_Args: kwds
          +  tearDownClass(cls)
          +  assertDictEqual(self, d1, d2, msg)
        	  	  Default_Args:(msg, None)
          +  assertItemsEqual(self, expected_seq, actual_seq, msg)
        	  	  Default_Args:(msg, None)
          +  assertIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  assertNotIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  assertTupleEqual(self, tuple1, tuple2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsNone(self, obj, msg)
        	  	  Default_Args:(msg, None)
          +  assertIs(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertIsInstance(self, obj, cls, msg)
        	  	  Default_Args:(msg, None)
          +  __eq__(self, other)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  setUpClass(cls)
          +  skipTest(self, reason)
          +  assertIsNot(self, expr1, expr2, msg)
        	  	  Default_Args:(msg, None)
          +  assertAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  defaultTestResult(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  debug(self)
          +  _deprecate(original_func)
          +  assertSetEqual(self, set1, set2, msg)
        	  	  Default_Args:(msg, None)
          +  addTypeEqualityFunc(self, typeobj, function)
          +  tearDown(self)
          +  assertNotAlmostEqual(self, first, second, places, msg, delta)
        	  	  Default_Args:(places, None), (msg, None), (delta, None)
          +  fail(self, msg)
        	  	  Default_Args:(msg, None)
          +  assertEqual(self, first, second, msg)
        	  	  Default_Args:(msg, None)
          +  shortDescription(self)
          +  id(self)
          +  __init__(self, methodName)
        	  	  Default_Args:(methodName, runTest)
          +  assertLess(self, a, b, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertSequenceEqual(self, seq1, seq2, msg, seq_type)
        	  	  Default_Args:(msg, None), (seq_type, None)
          +  assertNotIn(self, member, container, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  doCleanups(self)
          +  assertRaises(self, excClass, callableObj)
        	  	  Default_Args:(callableObj, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  __ne__(self, other)
          +  run(self, result)
        	  	  Default_Args:(result, None)
          +  assertDictContainsSubset(self, expected, actual, msg)
        	  	  Default_Args:(msg, None)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  setUp(self)
          +  assertNotRegexpMatches(self, text, unexpected_regexp, msg)
        	  	  Default_Args:(msg, None)
          +  __hash__(self)
          +  _formatMessage(self, msg, standardMsg)
          +  assertTrue(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  assertListEqual(self, list1, list2, msg)
        	  	  Default_Args:(msg, None)
          +  __repr__(self)
          +  assertFalse(self, expr, msg)
        	  	  Default_Args:(msg, None)
          +  countTestCases(self)
        	   Positional_Args: args
        	   Keyword_Args: kwargs
          +  assertGreaterEqual(self, a, b, msg)
        	  	  Default_Args:(msg, None)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
      +Func: test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
    	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)

 
Module: numpy.testing.decorators-------------------------------------------------
      +Func: deprecated(conditional)
    	  	  Default_Args:(conditional, True)
      +Func: knownfailureif(fail_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: setastest(tf)
    	  	  Default_Args:(tf, True)
      +Func: skipif(skip_condition, msg)
    	  	  Default_Args:(msg, None)
      +Func: slow(t)

 
Module: numpy.testing.noseclasses-------------------------------------------------
    
   +Class: ErrorClass
          +  __iter__(self)
          +  __init__(self)
        	   Positional_Args: errorClasses
        	   Keyword_Args: kw
    
   +Class: ErrorClassPlugin
          +  addError(self, test, err)
          +  patchResult(self, result)
          +  prepareTestResult(self, result)
    
   +Class: KnownFailure
          +  configure(self, options, conf)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
    
   +Class: KnownFailureTest
        (No members)
    
   +Class: NumpyDocTestCase
          +  __init__(self, test, optionflags, setUp, tearDown, checker, obj, result_var)
        	  	  Default_Args:(optionflags, 0), (setUp, None), (tearDown, None), (checker, None), (obj, None), (result_var, _)
    
   +Class: NumpyDocTestFinder
          +  _find(self, tests, obj, name, module, source_lines, globs, seen)
          +  _from_module(self, module, object)
    
   +Class: NumpyDoctest
          +  afterContext(self)
          +  loadTestsFromModule(self, module)
          +  wantFile(self, file)
          +  set_test_context(self, test)
          +  options(self, parser, env)
        	  	  Default_Args:(env, {UMR_NAMELIST: guidata,guiqwt, VS100COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, SYSTEMROOT: C:\\Windows, MATPLOTLIB_ION: True, TK_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tk8.5, JAVA_HOME: E:\\_devs\\JDK7\\jre, WINDOWS_TRACING_FLAGS: 3, CUDA_PATH: D:\\_app\\nvidiacuda\\cudatoolkit, CUDA_PATH_V7_0: D:\\_app\\nvidiacuda\\cudatoolkit, HOMEDRIVE: C:, SPYDER_AR_TIMEOUT: 2000, SYSTEMDRIVE: C:, SPYDER_I_PORT: 20128, PROCESSOR_LEVEL: 6, NUMBAPRO_CUDALIB: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, IGNORE_SIP_SETAPI_ERRORS: False, OS: Windows_NT, SPYDER_PARENT_DIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages, ETS_TOOLKIT: qt4, NUMBAPRO_LIBDEVICE: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\libdevice, JDK_HOME: E:\\_devs\\JDK7, TEMP: F:\\usertemp, COMMONPROGRAMFILES(X86): C:\\Program Files (x86)\\Common Files, HOMEPATH: \\Users\\asus1, UMR_ENABLED: True, WINPYVER: 2.7.10.2, LOGONSERVER: \\\\ASUS1-PC, CLASSPATH: D:\\_devs\\01CourseraPrinceton\\algs4.jar   D:\\_devs\\01CourseraPrinceton\\stdlib.jar, TCL_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tcl8.5, SESSIONNAME: Console, ASL.LOG: Destination=file, COLORIZE_SYS_STDERR: False, PYQT_API: 2, APPDATA: C:\\Users\\asus1\\AppData\\Roaming, NUMBAPRO_NVVM: D:\\\\_app\\\\nvidiacuda\\\\cudatoolkit\\\\nvvm\\\\bin\\\\nvvm64_30_0.dll, NVCUDASAMPLES7_0_ROOT: D:\\_app\\nvidiacuda\\cudasamples, PAGER: cat, TMP: F:\\usertemp, COMPUTERNAME: ASUS1-PC, VS110COMNTOOLS: C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\, USERDOMAIN: asus1-PC, QT_API: pyqt, COMMONPROGRAMFILES: C:\\Program Files\\Common Files, VBOX_MSI_INSTALL_PATH: E:\\_apps\\virtualBox\\, HOME: D:\\_devs\\Python01\\WinPython-64-2710\\settings, LANG: en_US, PROCESSOR_ARCHITECTURE: AMD64, ALLUSERSPROFILE: C:\\ProgramData, MATPLOTLIB_BACKEND: Qt4Agg, PROGRAMW6432: C:\\Program Files, USERNAME: asus1, SPYDER_AR_STATE: True, NVCUDASAMPLES_ROOT: D:\\_app\\nvidiacuda\\cudasamples, GIT_PAGER: cat, NVTOOLSEXT_PATH: C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\, PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC, WINPYDIR: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64, WINDIR: C:\\Windows,  LD_LIBRARY_PATH: D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin, NUMBER_OF_PROCESSORS: 4, JRE_HOME: E:\\_devs\\JDK7\\jre, IPYTHON_KERNEL: True, PUBLIC: C:\\Users\\Public, USERPROFILE: C:\\Users\\asus1, SHIM_MCCOMPAT: 0x810000001, PSMODULEPATH: C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\, SPYDER_SHELL_ID: 607398504, PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel, PROGRAMFILES: C:\\Program Files, PROCESSOR_REVISION: 3a09, PATH: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\numpy\\core;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt5;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Lib\\site-packages\\PyQt4;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\DLLs;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\Scripts;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\mingw32\\bin;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\R\\bin\\x64;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\..\\tools\\Julia\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\libnvvp;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\_devs\\Python01\\pythonInstall01\\;D:\\_devs\\Python01\\pythonInstall01\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\_app\\uicktime\\QTSystem\\;D:\\_app\\adk\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;D:\\_app\\DISKEE~1\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;D:\\_app\\doxygen\\bin;D:\\_devs\\_github\\CPP\\VisualLeakDetector\\bin\\Win32;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;C:\\Program Files\\Shield;D:\\_devs\\Python01\\Anaconda2;D:\\_devs\\Python01\\Anaconda2\\Scripts;D:\\_app\\nvidiacuda\\cudatoolkit\\bin;D:\\_app\\nvidiacuda\\cudatoolkit\\nvvm\\bin;E:\\_devs\\JDK7\\bin\\;D:\\_devs\\Java\\zjar\\javaopenblas;D:\\_devs\\Java\\apache-maven-3.3.9;D:\\_app\\visualstudio13\\VC\\bin\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE;;D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\lib\\site-packages\\llvmlite\\binding, PROGRAMFILES(X86): C:\\Program Files (x86), COMSPEC: C:\\Windows\\system32\\cmd.exe, TERM: xterm-color, WINDOWS_TRACING_LOGFILE: C:\\BVTBin\\Tests\\installpackage\\csilogfile.log, TIX_LIBRARY: D:\\_devs\\Python01\\WinPython-64-2710\\python-2.7.10.amd64\\tcl\\tix8.4.3, SPYDER_N_PORT: 20129, LOCALAPPDATA: C:\\Users\\asus1\\AppData\\Local, VS120COMNTOOLS: D:\\_app\\visualstudio13\\Common7\\Tools\\, PROGRAMDATA: C:\\ProgramData, UMR_VERBOSE: True, FP_NO_HOST_CHECK: NO, NVIDIAWHITELISTED: 0x01, CLICOLOR: 1, COMMONPROGRAMW6432: C:\\Program Files\\Common Files})
          +  configure(self, options, config)
    
   +Class: NumpyOutputChecker
          +  check_output(self, want, got, optionflags)
    
   +Class: NumpyTestProgram
          +  runTests(self)
    
   +Class: Plugin
          +  tolist(self, val)
          +  addOptions(self, parser, env)
        	  	  Default_Args:(env, None)
          +  configure(self, options, conf)
          +  add_options(self, parser, env)
        	  	  Default_Args:(env, None)
          +  options(self, parser, env)
          +  __init__(self)
          +  help(self)
    
   +Class: Unplugger
          +  options(self, parser, env)
          +  __init__(self, to_unplug)
        	  	  Default_Args:(to_unplug, doctest)
          +  configure(self, options, config)
      +Func: get_package_name(filepath)
      +Func: src(filename)

 
Module: numpy.testing.nosetester-------------------------------------------------
    
   +Class: ModuleDeprecationWarning
        (No members)
    
   +Class: NoseTester
          +  bench(self, label, verbose, extra_argv)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None)
          +  _get_custom_doctester(self)
          +  __init__(self, package, raise_warnings)
        	  	  Default_Args:(package, None), (raise_warnings, release)
          +  test(self, label, verbose, extra_argv, doctests, coverage, raise_warnings)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False), (raise_warnings, None)
          +  _test_argv(self, label, verbose, extra_argv)
          +  prepare_test_args(self, label, verbose, extra_argv, doctests, coverage)
        	  	  Default_Args:(label, fast), (verbose, 1), (extra_argv, None), (doctests, False), (coverage, False)
          +  _show_system_info(self)
    
   +Class: basestring
        (No members)
      +Func: get_package_name(filepath)
      +Func: run_module_suite(file_to_run, argv)
    	  	  Default_Args:(file_to_run, None), (argv, None)

 
Module: numpy.testing.print_coercion_tables-------------------------------------------------
    
   +Class: GenericObject
          +  __radd__(self, other)
          +  __add__(self, other)
          +  __init__(self, v)
      +Func: print_cancast_table(ntypes)
      +Func: print_coercion_table(ntypes, inputfirstvalue, inputsecondvalue, firstarray, use_promote_types)
    	  	  Default_Args:(use_promote_types, False)

 
Module: numpy.testing.setup-------------------------------------------------
      +Func: configuration(parent_package, top_path)
    	  	  Default_Args:(parent_package, ), (top_path, None)

 
Module: numpy.testing.utils-------------------------------------------------
      +Func: GetPerformanceAttributes(object, counter, instance, inum, format, machine)
    	  	  Default_Args:(instance, None), (inum, -1), (format, None), (machine, None)
    
   +Class: IgnoreException
        (No members)
    
   +Class: StringIO
          +  isatty(self)
          +  truncate(self, size)
        	  	  Default_Args:(size, None)
          +  read(self, n)
        	  	  Default_Args:(n, -1)
          +  writelines(self, iterable)
          +  readlines(self, sizehint)
        	  	  Default_Args:(sizehint, 0)
          +  next(self)
          +  write(self, s)
          +  __iter__(self)
          +  tell(self)
          +  flush(self)
          +  close(self)
          +  readline(self, length)
        	  	  Default_Args:(length, None)
          +  getvalue(self)
          +  seek(self, pos, mode)
        	  	  Default_Args:(mode, 0)
          +  __init__(self, buf)
        	  	  Default_Args:(buf, )
    
   +Class: WarningManager
          +  __exit__(self)
          +  __enter__(self)
          +  __init__(self, record, module)
        	  	  Default_Args:(record, False), (module, None)
    
   +Class: WarningMessage
          +  __str__(self)
          +  __init__(self, message, category, filename, lineno, file, line)
        	  	  Default_Args:(file, None), (line, None)
      +Func: _assert_valid_refcount(op)
      +Func: _gen_alignment_data(dtype, type, max_size)
    	  	  Default_Args:(dtype, <type numpy.float32>), (type, binary), (max_size, 24)
      +Func: _integer_repr(x, vdt, comp)
    +Built-in Function: arange
    	-Method Arguments:
start, stop, step,, dtype=None
      +Func: array_repr(arr, max_line_width, precision, suppress_small)
    	  	  Default_Args:(max_line_width, None), (precision, None), (suppress_small, None)
      +Func: assert_(val, msg)
    	  	  Default_Args:(msg, )
      +Func: assert_allclose(actual, desired, rtol, atol, err_msg, verbose)
    	  	  Default_Args:(rtol, 1e-07), (atol, 0), (err_msg, ), (verbose, True)
      +Func: assert_almost_equal(actual, desired, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 7), (err_msg, ), (verbose, True)
      +Func: assert_approx_equal(actual, desired, significant, err_msg, verbose)
    	  	  Default_Args:(significant, 7), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal(x, y, decimal, err_msg, verbose)
    	  	  Default_Args:(decimal, 6), (err_msg, ), (verbose, True)
      +Func: assert_array_almost_equal_nulp(x, y, nulp)
    	  	  Default_Args:(nulp, 1)
      +Func: assert_array_compare(comparison, x, y, err_msg, verbose, header, precision)
    	  	  Default_Args:(err_msg, ), (verbose, True), (header, ), (precision, 6)
      +Func: assert_array_equal(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_less(x, y, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_array_max_ulp(a, b, maxulp, dtype)
    	  	  Default_Args:(maxulp, 1), (dtype, None)
      +Func: assert_equal(actual, desired, err_msg, verbose)
    	  	  Default_Args:(err_msg, ), (verbose, True)
      +Func: assert_no_warnings(func)
    	   Positional_Args: args
    	   Keyword_Args: kw
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_raises_regex(exception_class, expected_regexp, callable_obj)
    	  	  Default_Args:(callable_obj, None)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
      +Func: assert_string_equal(actual, desired)
      +Func: assert_warns(warning_class, func)
    	   Positional_Args: args
    	   Keyword_Args: kw
      +Func: build_err_msg(arrays, err_msg, header, verbose, names, precision)
    	  	  Default_Args:(header, Items are not equal:), (verbose, True), (names, (ACTUAL, DESIRED)), (precision, 8)
      +Func: decorate_methods(cls, decorator, testmatch)
    	  	  Default_Args:(testmatch, None)
    +Built-in Function: empty
    	-Method Arguments:
shape, dtype=float, order=C
    
   +Class: float32
        (No members)
      +Func: gisfinite(x)
      +Func: gisinf(x)
      +Func: gisnan(x)
      +Func: integer_repr(x)
      +Func: jiffies(_load_time)
    	  	  Default_Args:(_load_time, )
      +Func: measure(code_str, times, label)
    	  	  Default_Args:(times, 1), (label, None)
      +Func: memusage(processName, instance)
    	  	  Default_Args:(processName, python), (instance, 0)
      +Func: mkdtemp(suffix, prefix, dir)
    	  	  Default_Args:(suffix, ), (prefix, tmp), (dir, None)
    
   +Class: ndarray
        (No members)
      +Func: nulp_diff(x, y, dtype)
    	  	  Default_Args:(dtype, None)
    
   +Class: partial
        (No members)
      +Func: print_assert_equal(test_string, actual, desired)
    	   Positional_Args: args
    	   Keyword_Args: kwargs
    	   Positional_Args: args
      +Func: rundocs(filename, raise_on_error)
    	  	  Default_Args:(filename, None), (raise_on_error, True)
      +Func: runstring(astr, dict)
    	   Positional_Args: args
    	   Keyword_Args: kwds

 
Module: numpy.version-------------------------------------------------
    (No members)

  
  
  
  
  '''
  
  
  
